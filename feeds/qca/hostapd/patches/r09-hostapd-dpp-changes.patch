From 2d4fd55abf11b872318547cddd07540b082e9985 Mon Sep 17 00:00:00 2001
From: Arunpandi Kannan <quic_arunpand@quicinc.com>
Date: Sun, 17 Dec 2023 23:24:29 +0530
Subject: [PATCH] hostapd: DPP changes for single netdev and make dpp peer auth
 version as 2

Allow dpp to send frames only on supported channels by
checking current mode in dpp auth init. And update
peer version in dpp as 2 to support dpp+sae and
dpp+psk AKMs in DPPR2.

Signed-off-by: Arunpandi Kannan <quic_arunpand@quicinc.com>
---
 src/ap/dpp_hostapd.c | 14 +++++++-------
 src/common/dpp.c     |  4 ++++
 2 files changed, 11 insertions(+), 7 deletions(-)

diff --git a/src/ap/dpp_hostapd.c b/src/ap/dpp_hostapd.c
index 70dd18e..9d31026 100644
--- a/src/ap/dpp_hostapd.c
+++ b/src/ap/dpp_hostapd.c
@@ -349,8 +349,8 @@ static int hostapd_dpp_pkex_done(void *ctx, void *conn,
 
 	auth = dpp_auth_init(hapd->iface->interfaces->dpp, hapd->msg_ctx,
 			     peer_bi, own_bi, allowed_roles, 0,
-			     hapd->iface->hw_features,
-			     hapd->iface->num_hw_features);
+			     hapd->iface->current_mode,
+			     1);
 	if (!auth)
 		return -1;
 
@@ -931,8 +931,8 @@ int hostapd_dpp_auth_init(struct hostapd_data *hapd, const char *cmd)
 
 	auth = dpp_auth_init(hapd->iface->interfaces->dpp, hapd->msg_ctx,
 			     peer_bi, own_bi, allowed_roles, neg_freq,
-			     hapd->iface->hw_features,
-			     hapd->iface->num_hw_features);
+			     hapd->iface->current_mode,
+			     1);
 	if (!auth)
 		goto fail;
 	hostapd_dpp_set_testing_options(hapd, auth);
@@ -3646,7 +3646,7 @@ hostapd_dpp_chirp_scan_res_handler(struct hostapd_iface *iface)
 
 	/* Preferred chirping channels */
 	mode = dpp_get_mode(hapd, HOSTAPD_MODE_IEEE80211G);
-	if (mode) {
+	if (mode && (mode == hapd->iface->current_mode)) {
 		for (c = 0; c < mode->num_channels; c++) {
 			struct hostapd_channel_data *chan = &mode->channels[c];
 
@@ -3662,7 +3662,7 @@ hostapd_dpp_chirp_scan_res_handler(struct hostapd_iface *iface)
 		int_array_add_unique(&hapd->dpp_chirp_freqs, 2437);
 
 	mode = dpp_get_mode(hapd, HOSTAPD_MODE_IEEE80211A);
-	if (mode) {
+	if (mode && (mode == hapd->iface->current_mode)) {
 		int chan44 = 0, chan149 = 0;
 
 		for (c = 0; c < mode->num_channels; c++) {
@@ -3683,7 +3683,7 @@ hostapd_dpp_chirp_scan_res_handler(struct hostapd_iface *iface)
 	}
 
 	mode = dpp_get_mode(hapd, HOSTAPD_MODE_IEEE80211AD);
-	if (mode) {
+	if (mode && (mode == hapd->iface->current_mode)) {
 		for (c = 0; c < mode->num_channels; c++) {
 			struct hostapd_channel_data *chan = &mode->channels[c];
 
diff --git a/src/common/dpp.c b/src/common/dpp.c
index 3b9f35e..837120d 100644
--- a/src/common/dpp.c
+++ b/src/common/dpp.c
@@ -4000,6 +4000,10 @@ int dpp_configurator_own_config(struct dpp_authentication *auth,
 		   "DPP: Building own configuration/connector with curve %s",
 		   auth->curve->name);
 
+#ifdef CONFIG_DPP2
+	auth->peer_version = 2;
+#endif
+
 	auth->own_protocol_key = dpp_gen_keypair(auth->curve);
 	if (!auth->own_protocol_key)
 		return -1;
-- 
2.17.1

