From e8b287415b7ca8774e4e51e57dfe1e4d89086119 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Sat, 16 Dec 2023 21:24:47 +0530
Subject: [PATCH] hostapd: fix wpa_auth conf during reconfig

Currently when wpa_auth is reconfigured, wpa_auth conf is generated
and directly used. This leads to wpa_auth trying to set up its state
machine in such a way that it is beyond the driver supported
capabilities hence few requests to kernel are rejected leading to its
state machine entering failure state. Hence no client can connect to
it once it is reconfigured.

However, in normal bring up sequence, after the conf is generated,
it is sanitized with the iface capabilities. Hence, initial wpa_auth
state machine setup is successful since it never tries to go beyond
the supported capabilities.

Fix the above issue by moving the sanitizing the conf part to a
helper function and calling it during initial as well as during
reconfig time.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 src/ap/wpa_auth_glue.c | 116 +++++++++++++++++++++++------------------
 1 file changed, 66 insertions(+), 50 deletions(-)

diff --git a/src/ap/wpa_auth_glue.c b/src/ap/wpa_auth_glue.c
index b7796cb7d35f..331187521622 100644
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -34,6 +34,70 @@
 #include "wpa_auth.h"
 #include "wpa_auth_glue.h"
 
+static int hostapd_wpa_auth_config_sanitize(struct hostapd_data *hapd,
+					    struct wpa_auth_config *_conf)
+{
+	struct hostapd_data *lhapd = NULL;
+
+	_conf->msg_ctx = hapd->msg_ctx;
+
+	if (hapd->iface->drv_flags & WPA_DRIVER_FLAGS_EAPOL_TX_STATUS)
+		_conf->tx_status = 1;
+
+	if (hapd->iface->drv_flags & WPA_DRIVER_FLAGS_AP_MLME)
+		_conf->ap_mlme = 1;
+
+	if (!(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_WIRED) &&
+	    (hapd->conf->wpa_deny_ptk0_rekey == PTK0_REKEY_ALLOW_NEVER ||
+	     (hapd->conf->wpa_deny_ptk0_rekey == PTK0_REKEY_ALLOW_LOCAL_OK &&
+	      !(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_SAFE_PTK0_REKEYS)))) {
+		wpa_msg(hapd->msg_ctx, MSG_INFO,
+			"Disable PTK0 rekey support - replaced with disconnect");
+		_conf->wpa_deny_ptk0_rekey = 1;
+	}
+
+	if (_conf->extended_key_id &&
+	    (hapd->iface->drv_flags & WPA_DRIVER_FLAGS_EXTENDED_KEY_ID))
+		wpa_msg(hapd->msg_ctx, MSG_DEBUG, "Extended Key ID supported");
+	else
+		_conf->extended_key_id = 0;
+
+	if (!(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_BEACON_PROTECTION))
+		_conf->beacon_prot = 0;
+
+#ifdef CONFIG_OCV
+	if (!(hapd->iface->drv_flags2 &
+	      (WPA_DRIVER_FLAGS2_AP_SME | WPA_DRIVER_FLAGS2_OCV)))
+		_conf->ocv = 0;
+#endif /* CONFIG_OCV */
+
+	_conf->secure_ltf =
+		!!(hapd->iface->drv_flags2 & WPA_DRIVER_FLAGS2_SEC_LTF_AP);
+	_conf->secure_rtt =
+		!!(hapd->iface->drv_flags2 & WPA_DRIVER_FLAGS2_SEC_RTT_AP);
+	_conf->prot_range_neg =
+		!!(hapd->iface->drv_flags2 &
+		   WPA_DRIVER_FLAGS2_PROT_RANGE_NEG_AP);
+
+	_conf->first_link_auth = NULL;
+	_conf->mld_addr = NULL;
+	_conf->link_id = -1;
+
+#ifdef CONFIG_IEEE80211BE
+	if (hapd->conf->mld_ap) {
+		_conf->mld_addr = hapd->mld->mld_addr;
+		_conf->link_id = hapd->mld_link_id;
+
+		for_each_partner_bss(lhapd, hapd) {
+			if (lhapd == hapd)
+				continue;
+
+			if (lhapd->wpa_auth)
+				_conf->first_link_auth = lhapd->wpa_auth;
+		}
+	}
+#endif /* CONFIG_IEEE80211BE */
+}
 
 static void hostapd_wpa_auth_conf(struct hostapd_bss_config *conf,
 				  struct hostapd_config *iconf,
@@ -1665,59 +1729,10 @@ int hostapd_setup_wpa(struct hostapd_data *hapd)
 	};
 	const u8 *wpa_ie;
 	size_t wpa_ie_len;
-	struct hostapd_data *lhapd = NULL;
 
 	hostapd_wpa_auth_conf(hapd->conf, hapd->iconf, &_conf);
-	_conf.msg_ctx = hapd->msg_ctx;
-	_conf.mld_addr = hapd->conf->mld_ap ? hapd->mld->mld_addr : NULL;
-	_conf.link_id = hapd->conf->mld_ap ? hapd->mld_link_id : -1;
-	if (hapd->iface->drv_flags & WPA_DRIVER_FLAGS_EAPOL_TX_STATUS)
-		_conf.tx_status = 1;
-	if (hapd->iface->drv_flags & WPA_DRIVER_FLAGS_AP_MLME)
-		_conf.ap_mlme = 1;
-
-	if (!(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_WIRED) &&
-	    (hapd->conf->wpa_deny_ptk0_rekey == PTK0_REKEY_ALLOW_NEVER ||
-	     (hapd->conf->wpa_deny_ptk0_rekey == PTK0_REKEY_ALLOW_LOCAL_OK &&
-	      !(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_SAFE_PTK0_REKEYS)))) {
-		wpa_msg(hapd->msg_ctx, MSG_INFO,
-			"Disable PTK0 rekey support - replaced with disconnect");
-		_conf.wpa_deny_ptk0_rekey = 1;
-	}
-
-	if (_conf.extended_key_id &&
-	    (hapd->iface->drv_flags & WPA_DRIVER_FLAGS_EXTENDED_KEY_ID))
-		wpa_msg(hapd->msg_ctx, MSG_DEBUG, "Extended Key ID supported");
-	else
-		_conf.extended_key_id = 0;
+	hostapd_wpa_auth_config_sanitize(hapd, &_conf);
 
-	if (!(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_BEACON_PROTECTION))
-		_conf.beacon_prot = 0;
-
-#ifdef CONFIG_OCV
-	if (!(hapd->iface->drv_flags2 &
-	      (WPA_DRIVER_FLAGS2_AP_SME | WPA_DRIVER_FLAGS2_OCV)))
-		_conf.ocv = 0;
-#endif /* CONFIG_OCV */
-
-	_conf.secure_ltf =
-		!!(hapd->iface->drv_flags2 & WPA_DRIVER_FLAGS2_SEC_LTF_AP);
-	_conf.secure_rtt =
-		!!(hapd->iface->drv_flags2 & WPA_DRIVER_FLAGS2_SEC_RTT_AP);
-	_conf.prot_range_neg =
-		!!(hapd->iface->drv_flags2 &
-		   WPA_DRIVER_FLAGS2_PROT_RANGE_NEG_AP);
-
-	_conf.first_link_auth = NULL;
-	if (hapd->conf->mld_ap) {
-		for_each_partner_bss(lhapd, hapd) {
-			if (lhapd == hapd)
-				continue;
-
-			if (lhapd->wpa_auth)
-				_conf.first_link_auth = lhapd->wpa_auth;
-		}
-	}
 	hapd->wpa_auth = wpa_init(hapd->own_addr, &_conf, &cb, hapd);
 	if (hapd->wpa_auth == NULL) {
 		wpa_printf(MSG_ERROR, "WPA initialization failed.");
@@ -1786,6 +1801,7 @@ void hostapd_reconfig_wpa(struct hostapd_data *hapd)
 {
 	struct wpa_auth_config wpa_auth_conf;
 	hostapd_wpa_auth_conf(hapd->conf, hapd->iconf, &wpa_auth_conf);
+	hostapd_wpa_auth_config_sanitize(hapd, &wpa_auth_conf);
 	wpa_reconfig(hapd->wpa_auth, &wpa_auth_conf);
 }
 
-- 
2.17.1

