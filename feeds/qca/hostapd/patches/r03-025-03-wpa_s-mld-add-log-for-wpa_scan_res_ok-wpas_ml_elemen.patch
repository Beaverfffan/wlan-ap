From fff13e8a1c3f3f3f8dbe6cf49c23b0700f2fc323 Mon Sep 17 00:00:00 2001
From: Wen Gong <quic_wgong@quicinc.com>
Date: Thu, 2 Nov 2023 22:43:39 -0800
Subject: [PATCH 4/9] wpa_s: mld: add log for
 wpa_scan_res_ok()/wpas_ml_element(()

Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
Signed-off-by: Amutha Ravikumar <quic_aravikum@quicinc.com>
---
 wpa_supplicant/events.c | 21 +++++++++++++++++++++
 wpa_supplicant/sme.c    | 10 ++++++++++
 2 files changed, 31 insertions(+)

--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -1256,6 +1256,9 @@ static bool wpa_scan_res_ok(struct wpa_s
 #endif /* CONFIG_SAE */
 	const u8 *ie;
 
+	if (debug_print)
+		wpa_dbg(wpa_s, MSG_DEBUG, "   wpa_scan_res_ok 0");
+
 	ie = wpa_bss_get_vendor_ie(bss, WPA_IE_VENDOR_TYPE);
 	wpa = ie && ie[1];
 	ie = wpa_bss_get_ie(bss, WLAN_EID_RSN);
@@ -1348,9 +1351,15 @@ static bool wpa_scan_res_ok(struct wpa_s
 		return false;
 	}
 
+	if (debug_print)
+		wpa_dbg(wpa_s, MSG_DEBUG, "   wpa_scan_res_ok 1");
+
 	if (!wpa_supplicant_ssid_bss_match(wpa_s, ssid, bss, debug_print))
 		return false;
 
+	if (debug_print)
+		wpa_dbg(wpa_s, MSG_DEBUG, "   wpa_scan_res_ok 2");
+
 	if (!osen && !wpa &&
 	    !(ssid->key_mgmt & WPA_KEY_MGMT_NONE) &&
 	    !(ssid->key_mgmt & WPA_KEY_MGMT_WPS) &&
@@ -1578,6 +1587,9 @@ skip_assoc_disallow:
 		return false;
 	}
 
+	if (debug_print)
+		wpa_dbg(wpa_s, MSG_DEBUG, "   wpa_scan_res_ok 10");
+
 	/* Matching configuration found */
 	return true;
 }
@@ -1672,12 +1684,18 @@ struct wpa_ssid * wpa_scan_res_match(str
 		return NULL;
 	}
 
+	if (debug_print)
+		wpa_dbg(wpa_s, MSG_DEBUG, "   wpa_scan_res_match 2");
+
 	for (ssid = group; ssid; ssid = only_first_ssid ? NULL : ssid->pnext) {
 		if (wpa_scan_res_ok(wpa_s, ssid, match_ssid, match_ssid_len,
 				    bss, bssid_ignore_count, debug_print))
 			return ssid;
 	}
 
+	if (debug_print)
+		wpa_dbg(wpa_s, MSG_DEBUG, "   wpa_scan_res_match 3");
+
 	/* No matching configuration found */
 	return NULL;
 }
--- a/wpa_supplicant/sme.c
+++ b/wpa_supplicant/sme.c
@@ -499,6 +499,16 @@ static bool wpas_ml_element(struct wpa_s
 		} else {
 			struct wpa_bss *neigh_bss =
 				wpa_bss_get_bssid(wpa_s, ap_info->data + 1);
+
+			wpa_printf(MSG_DEBUG, "Neighbor bssid : " MACSTR,
+				   MAC2STR(ap_info->data + 1));
+
+			if (neigh_bss)
+				wpa_printf(MSG_DEBUG, "MLD: Neighbor founded in scan");
+
+			if (!wpa_s->current_ssid)
+				wpa_printf(MSG_DEBUG, "MLD: empty wpa_s->current_ssid");
+
 			u8 link_id = *(data + 1) & 0xF;
 
 			if (neigh_bss) {
