From 5b17a5b79c7432c048035b3b48e36c1019660a97 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Mon, 22 Jan 2024 12:14:33 +0530
Subject: [PATCH] [WAR] wpa_supplicant: Add changes to reassociate if
 associated links is lesser than requested link

With the latest hostapd, when the partner link is going for a CAC/ACS
scanning, other link(s) will start beaconing without any RNR for
affliated links. And in the station side, while scanning if it has the
entry for the requested SSID, it will first check if the beacon has all
the requested links are beaconing and try to associated immediately if
the RNR has all links information. But, if it has less number of links,
supplicant will retry for 5 times, after which it will associated with
less number of links. This leads to station association with less number
of links, though the AP will advertise the RNR with new link after the
CAC/ACS is completed, station will not be able to add that link until ML
reconfigure is supported.

Hence, add this WAR to get the existing scan entries from the kernel for
every 5 seconds if the associated number of links is lesser than the
actual user requested configuration and try to re-associate after
deauthenticating the existing link(s) if scan entry is found with the
new link needed for completing the user configured association.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 wpa_supplicant/bss.c              |  22 ++--
 wpa_supplicant/bss.h              |   7 +-
 wpa_supplicant/events.c           |  54 +++++++++
 wpa_supplicant/scan.c             | 193 ++++++++++++++++++++++++++++++
 wpa_supplicant/scan.h             |   8 ++
 wpa_supplicant/wpa_supplicant_i.h |   2 +-
 6 files changed, 277 insertions(+), 9 deletions(-)

--- a/wpa_supplicant/bss.c
+++ b/wpa_supplicant/bss.c
@@ -590,8 +590,8 @@ static int are_ies_equal(const struct wp
 }
 
 
-static u32 wpa_bss_compare_res(const struct wpa_bss *old,
-			       const struct wpa_scan_res *new_res)
+u32 wpa_bss_compare_res(const struct wpa_bss *old,
+			const struct wpa_scan_res *new_res)
 {
 	u32 changes = 0;
 	int caps_diff = old->caps ^ new_res->caps;
@@ -664,9 +664,10 @@ void notify_bss_changes(struct wpa_suppl
 }
 
 
-static struct wpa_bss *
+struct wpa_bss *
 wpa_bss_update(struct wpa_supplicant *wpa_s, struct wpa_bss *bss,
-	       struct wpa_scan_res *res, struct os_reltime *fetch_time)
+	       struct wpa_scan_res *res, struct os_reltime *fetch_time,
+	       bool override)
 {
 	u32 changes;
 
@@ -695,13 +696,20 @@ wpa_bss_update(struct wpa_supplicant *wp
 			   (unsigned int) update_time.usec,
 			   res->freq,
 			   (res->flags & WPA_SCAN_ASSOCIATED) ? " assoc" : "");
-		if ((bss->flags & WPA_BSS_ASSOCIATED) ||
+
+		/* Override flag is set during scanning for RNR entries in the
+		 * associated link when the requested affliated link is
+		 * initially in CAC/ACS timer, so that the new scan entry is
+		 * updated to re-initiate the association
+		 */
+		if (!override && ((bss->flags & WPA_BSS_ASSOCIATED) ||
 		    (!(res->flags & WPA_SCAN_ASSOCIATED) &&
-		     !os_reltime_before(&bss->last_update, &update_time))) {
+		     !os_reltime_before(&bss->last_update, &update_time)))) {
 			wpa_printf(MSG_DEBUG,
 				   "Ignore this BSS entry since the previous update looks more current");
 			return bss;
 		}
+
 		wpa_printf(MSG_DEBUG,
 			   "Accept this BSS entry since it looks more current than the previous update");
 	}
@@ -875,7 +883,7 @@ void wpa_bss_update_scan_res(struct wpa_
 	if (bss == NULL)
 		bss = wpa_bss_add(wpa_s, ssid + 2, ssid[1], res, fetch_time);
 	else {
-		bss = wpa_bss_update(wpa_s, bss, res, fetch_time);
+		bss = wpa_bss_update(wpa_s, bss, res, fetch_time, false);
 		if (wpa_s->last_scan_res) {
 			unsigned int i;
 			for (i = 0; i < wpa_s->last_scan_res_used; i++) {
--- a/wpa_supplicant/bss.h
+++ b/wpa_supplicant/bss.h
@@ -208,5 +208,10 @@ void calculate_update_time(const struct
 			   struct os_reltime *update_time);
 
 struct wpabuf * wpa_bss_defrag_mle(const struct wpa_bss *bss, u8 type);
-
+u32 wpa_bss_compare_res(const struct wpa_bss *old,
+			const struct wpa_scan_res *new_res);
+struct wpa_bss *
+wpa_bss_update(struct wpa_supplicant *wpa_s, struct wpa_bss *bss,
+	       struct wpa_scan_res *res, struct os_reltime *fetch_time,
+	       bool override);
 #endif /* BSS_H */
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -3579,6 +3579,49 @@ out:
 }
 
 
+/* Returns true if all freq count and link count
+ * are same, false otherwise
+ */
+static bool is_all_links_associated(int *freq_list, u16 valid_links)
+{
+	int i = 0, freq;
+	u8 freq_lists = 0; /* Bitmap of user configured frequencies */
+	u8 link_count = 0, freq_count = 0;
+
+	/* If valid_links is not set, consider that all links are associated
+	 */
+	if (!valid_links)
+		return true;
+
+	freq = freq_list[i];
+	while(freq) {
+		if (!(freq < 5180 || freq > 5885))
+			freq_lists |= SCAN_FREQ_BAND_5GHZ;
+		else if (is_6ghz_freq(freq))
+			freq_lists |= SCAN_FREQ_BAND_6GHZ;
+		else
+			freq_lists |= SCAN_FREQ_BAND_2GHZ;
+
+		freq = freq_list[++i];
+	}
+
+	for (i = 0; i < MAX_NUM_MLO_LINKS; i++) {
+		if (valid_links & BIT(i))
+			link_count++;
+	}
+
+	for (i = 0; i < SCAN_FREQ_BAND_MAX; i++) {
+		if (freq_lists & BIT(i))
+			freq_count++;
+	}
+
+	if (freq_count == link_count)
+		return true;
+
+	return false;
+}
+
+
 static void wpa_supplicant_event_assoc(struct wpa_supplicant *wpa_s,
 				       union wpa_event_data *data)
 {
@@ -3906,6 +3949,17 @@ static void wpa_supplicant_event_assoc(s
 
 	if (wpa_s->current_ssid && wpa_s->current_ssid->enable_4addr_mode)
 		wpa_supplicant_set_4addr_mode(wpa_s);
+
+	/* WAR: Check if all the links configured by user are associated,
+	 * otherwise trigger a scan request in background to re-associate
+	 * to all the links after CAC/ACS timer is completed in AP MLD
+	 */
+	if (!is_all_links_associated(&wpa_s->conf->freq_list[0],
+				     wpa_s->valid_links))
+		eloop_register_timeout(5, 0,
+				       wpas_scan_for_rnr_entries,
+				       wpa_s, NULL);
+
 }
 
 
--- a/wpa_supplicant/scan.c
+++ b/wpa_supplicant/scan.c
@@ -3521,3 +3521,157 @@ void wpas_scan_restart_sched_scan(struct
 	wpa_s->prev_sched_ssid = NULL;
 	wpa_supplicant_cancel_sched_scan(wpa_s);
 }
+
+static bool wpa_bss_update_scan_rnr_res(struct wpa_supplicant *wpa_s,
+					struct wpa_scan_res *res,
+					struct os_reltime *fetch_time)
+{
+	const u8 *ml_ie, *rnr_ie, *ssid, *pos;
+	u8 rnr_ie_len, i = 0, mbssid_idx = 0;
+	struct wpa_bss *bss;
+	u32 changes;
+	u8 max_simult_link, ret = true;
+	u16 link_count = 0;
+
+	bss = wpa_bss_get_bssid(wpa_s, res->bssid);
+	if (!bss) {
+		wpa_printf(MSG_ERROR, "No BSS found for entry" MACSTR,
+				MAC2STR(res->bssid));
+		return ret;
+	}
+
+	ssid = wpa_scan_get_ie(res, WLAN_EID_SSID);
+	if (ssid == NULL) {
+		wpa_dbg(wpa_s, MSG_DEBUG, "BSS: No SSID IE included for "
+			MACSTR, MAC2STR(res->bssid));
+		return ret;
+	}
+	if (ssid[1] > SSID_MAX_LEN) {
+		wpa_dbg(wpa_s, MSG_DEBUG, "BSS: Too long SSID IE included for "
+			MACSTR, MAC2STR(res->bssid));
+		return ret;
+	}
+
+	/* Res now will have matching ssid, check if the rnr has
+	 * changed.
+	 */
+	changes = wpa_bss_compare_res(bss, res);
+	if (changes & WPA_BSS_IES_CHANGED_FLAG) {
+		bss = wpa_bss_update(wpa_s, bss, res, fetch_time, true);
+		mbssid_idx = wpa_bss_get_mbssid_idx(bss);
+		i = 0;
+		while ((rnr_ie = wpa_bss_get_ie_pos(bss, WLAN_EID_REDUCED_NEIGHBOR_REPORT, i++))) {
+			rnr_ie_len = rnr_ie[1];
+			pos = rnr_ie + 2;
+
+			while (rnr_ie_len > sizeof(struct ieee80211_neighbor_ap_info)) {
+				const struct ieee80211_neighbor_ap_info *ap_info =
+					(const struct ieee80211_neighbor_ap_info *) pos;
+				const u8 *data = ap_info->data;
+				size_t rnr_info_len = sizeof(struct ieee80211_neighbor_ap_info);
+				u8 tbtt_count = ((ap_info->tbtt_info_hdr & 0xF0) >> 4) + 1;
+				rnr_ie_len -= rnr_info_len;
+				pos += rnr_info_len;
+
+				if (ap_info->tbtt_info_len < 16) {
+					rnr_ie_len -= (tbtt_count * ap_info->tbtt_info_len);
+					pos += (tbtt_count * ap_info->tbtt_info_len);
+					continue;
+				}
+
+				while (tbtt_count--) {
+					const u8 *bssid = data + 1;
+					u16 mld_id = *(data + 13);
+					u8 link_id = *(data + 14) & 0xF;
+
+					if (wpa_s->valid_links & BIT(link_id))
+						/*Existing link_id IE */
+						goto cont;
+
+					/* RNR updated with the new link */
+					/* For NON-MBSSID BSS and MBSSID Tx BSS, idx will be 0 */
+					if (mbssid_idx != mld_id) {
+						wpa_printf(MSG_DEBUG,
+							   "MLD: Reported link not part of current MLD");
+					} else {
+						int partner_freq = ieee80211_chan_to_freq(NULL, ap_info->op_class, ap_info->channel);
+						int curr_freq = 0;
+						if (partner_freq && wpa_s->conf->freq_list && wpa_s->conf->freq_list[0]) {
+							int i = 0;
+							curr_freq = wpa_s->conf->freq_list[i];
+							while (curr_freq) {
+								i++;
+								if (curr_freq == partner_freq) {
+									wpa_printf(MSG_DEBUG, "ML Partner freq %d is part of our scan list", partner_freq);
+									break;
+								}
+								curr_freq = wpa_s->conf->freq_list[i];
+							}
+						}
+						if (wpa_s->conf->freq_list && wpa_s->conf->freq_list[0] && !curr_freq) {
+							wpa_printf(MSG_DEBUG, "ML Partner freq %d is not part of our scan list ignore this link", partner_freq);
+							goto cont;
+						}
+
+						wpa_s->own_disconnect_req = 1;
+						wpa_supplicant_deauthenticate(wpa_s,
+									      WLAN_REASON_DEAUTH_LEAVING);
+						wpa_printf(MSG_INFO, "Match found and triggering deauthenticate\n");
+						ret = false;
+						goto exit;
+					}
+
+cont:
+					data += ap_info->tbtt_info_len;
+				}
+
+				rnr_ie_len -= (data - ap_info->data);
+				pos += (data - ap_info->data);
+			}
+		}
+	}
+
+exit:
+	return ret;
+}
+
+void wpas_scan_for_rnr_entries(void *eloop_ctx, void *timeout_ctx)
+{
+	struct wpa_supplicant *wpa_s = eloop_ctx;
+	struct wpa_scan_results *scan_res;
+	size_t i;
+	bool ret = true;
+
+	if (wpa_s->wpa_state != WPA_COMPLETED)
+		/* Still the original authentication is not completed
+		 * No need to re-check here, re-schedule to check after
+		 * authetication is completed
+		 */
+		goto exit;
+
+	scan_res = wpa_drv_get_scan_results2(wpa_s);
+	if (scan_res == NULL) {
+		wpa_dbg(wpa_s, MSG_DEBUG, "No scan results available");
+		goto exit;
+	}
+	filter_scan_res(wpa_s, scan_res);
+
+	for (i = 0; i < scan_res->num; i++) {
+		if (os_memcmp(wpa_s->current_bss->bssid, scan_res->res[i]->bssid, ETH_ALEN) != 0) {
+			/* Need to check any scan entry for current assoc bssid */
+			continue;
+		}
+
+		ret = wpa_bss_update_scan_rnr_res(wpa_s,
+						  scan_res->res[i],
+						  &scan_res->fetch_time);
+		if (!ret)
+			break;
+	}
+
+exit:
+	if (ret)
+		eloop_register_timeout(5, 0,
+				       wpas_scan_for_rnr_entries,
+				       wpa_s, NULL);
+}
--- a/wpa_supplicant/scan.h
+++ b/wpa_supplicant/scan.h
@@ -33,6 +33,14 @@
 #define IS_2P4GHZ(n) (n >= 2412 && n <= 2484)
 #define IS_5GHZ(n) (n > 4000 && n < 5895)
 
+enum configured_freq_band {
+	SCAN_FREQ_BAND_2GHZ = BIT(0),
+	SCAN_FREQ_BAND_5GHZ = BIT(1),
+	SCAN_FREQ_BAND_6GHZ = BIT(2),
+
+	SCAN_FREQ_BAND_MAX,
+};
+
 int wpa_supplicant_enabled_networks(struct wpa_supplicant *wpa_s);
 void wpa_supplicant_req_scan(struct wpa_supplicant *wpa_s, int sec, int usec);
 int wpa_supplicant_delayed_sched_scan(struct wpa_supplicant *wpa_s,
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -1930,5 +1930,5 @@ int wpas_pasn_deauthenticate(struct wpa_
 void wpas_pasn_auth_trigger(struct wpa_supplicant *wpa_s,
 			    struct pasn_auth *pasn_auth);
 void wpas_pasn_auth_work_done(struct wpa_supplicant *wpa_s, int status);
-
+void wpas_scan_for_rnr_entries(void *eloop_ctx, void *timeout_ctx);
 #endif /* WPA_SUPPLICANT_I_H */
--- a/wpa_supplicant/sme.c
+++ b/wpa_supplicant/sme.c
@@ -465,6 +465,11 @@ static bool wpas_ml_element(struct wpa_s
 	i = 0;
 	mbssid_idx = wpa_bss_get_mbssid_idx(bss);
 	wpa_printf(MSG_DEBUG, "MLD: mbssid idx = %u for bss " MACSTR, mbssid_idx, MAC2STR(bss->bssid));
+
+	/* NOTE: Any changes in rnr ie len calculation or fetching the ap info
+	 * from rnr ie must be reflected in wpa_bss_update_scan_rnr_res API as
+	 * it uses similar logic for WAR
+	 */
 	while ((rnr_ie = wpa_bss_get_ie_pos(bss, WLAN_EID_REDUCED_NEIGHBOR_REPORT, i++))) {
 		rnr_ie_len = rnr_ie[1];
 		pos = rnr_ie + 2;
