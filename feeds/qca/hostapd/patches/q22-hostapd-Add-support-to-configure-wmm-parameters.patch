From 5d86b9df554c2c5c6e3ffafaf77ba7707b134137 Mon Sep 17 00:00:00 2001
From: Yuvarani V <quic_yuvarani@quicinc.com>
Date: Tue, 7 Nov 2023 16:02:59 +0530
Subject: [PATCH] hostapd: Add support to Set WMM sub-parameters

This provides the support to Set WMM sub-parameters as follows.

hostapd_cli -i <wlanX> wmm_param [ac= <be / bk / vi / vo>]
[aifs=] [cwmin=] [cwmax=] [txop=] [acm=]

   wmeparam       (wmevalue)
1    aifs      (0-15)
2    cwmin     (0-15)
3    cwmax     (0-15)
4    txop    (0-8192, in units of 32 microseconds)
5    acm       (0 for disable, 1 for enable)

Access Category Parameters (ac)
0 Best effort (BE)
1 Background (BK)
2 Video (VI)
3 Voice (VO)

Signed-off-by: Yuvarani V <quic_yuvarani@quicinc.com>
---
 hostapd/ctrl_iface.c  | 96 +++++++++++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c | 26 ++++++++++++
 2 files changed, 122 insertions(+)

--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -80,6 +80,17 @@
 #define HOSTAPD_GLOBAL_CTRL_IFACE_PORT_LIMIT	50
 #endif /* CONFIG_CTRL_IFACE_UDP */
 
+#define AIFS_RANGE_MIN 0
+#define AIFS_RANGE_MAX 15
+#define CWMIN_RANGE_MIN 0
+#define CWMIN_RANGE_MAX 15
+#define CWMAX_RANGE_MIN 0
+#define CWMAX_RANGE_MAX 15
+#define TXOPLIMIT_RANGE_MIN 0
+#define TXOPLIMIT_RANGE_MAX (8192 >> 5)
+#define ACM_RANGE_MIN 0
+#define ACM_RANGE_MAX 1
+
 static void hostapd_ctrl_iface_send(struct hostapd_data *hapd, int level,
 				    enum wpa_msg_type type,
 				    const char *buf, size_t len);
@@ -2914,6 +2925,116 @@ static int hostapd_ctrl_iface_chan_switc
 #endif /* NEED_AP_MLME */
 }
 
+static int hostapd_ctrl_iface_wmm_param(struct hostapd_data *hapd,
+					char *buf)
+{
+	char *tmp;
+	int ac = 0, wmevalue = 0;
+	bool changed = false;
+
+	if (os_strncmp(buf, "ac=", 3) == 0) {
+		tmp = buf + 3;
+		if (os_strncmp(tmp, "be", 2) == 0) {
+			ac = WMM_AC_BE;
+		} else if (os_strncmp(tmp, "bk", 2) == 0) {
+			ac = WMM_AC_BK;
+		} else if (os_strncmp(tmp, "vi", 2) == 0) {
+			ac = WMM_AC_VI;
+		} else if (os_strncmp(tmp, "vo", 2) == 0) {
+			ac = WMM_AC_VO;
+		} else {
+			wpa_printf(MSG_ERROR, "CTRL: Unknown WMM ACCESS CONTROL name");
+			goto fail;
+		}
+	} else {
+		wpa_printf(MSG_ERROR, "CTRL: Unknown WMM subelement name");
+		goto fail;
+	}
+
+	tmp = os_strstr(buf, "aifs=");
+	if (tmp) {
+		wmevalue =  atoi(tmp + 5);
+
+		if (wmevalue < AIFS_RANGE_MIN || wmevalue > AIFS_RANGE_MAX) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: AIFS expects wmevalue (0-15)");
+			goto fail;
+		} else if (hapd->iconf->wmm_ac_params[ac].aifs != wmevalue) {
+			hapd->iconf->wmm_ac_params[ac].aifs = wmevalue;
+			changed = true;
+		}
+	}
+
+	tmp = os_strstr(buf, "cwmin=");
+	if (tmp) {
+		wmevalue =  atoi(tmp + 6);
+
+		if (wmevalue < CWMIN_RANGE_MIN || wmevalue > CWMIN_RANGE_MAX) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: CWMIN expects wmevalue (0-15)");
+			goto fail;
+		} else if (wmevalue > hapd->iconf->wmm_ac_params[ac].cwmax) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: CWMIN can't be greater than CWMAX.");
+			goto fail;
+		} else if (hapd->iconf->wmm_ac_params[ac].cwmin != wmevalue) {
+			hapd->iconf->wmm_ac_params[ac].cwmin = wmevalue;
+			changed = true;
+		}
+	}
+
+	tmp = os_strstr(buf, "cwmax=");
+	if (tmp) {
+		wmevalue =  atoi(tmp + 6);
+
+		if (wmevalue < CWMAX_RANGE_MIN || wmevalue > CWMAX_RANGE_MAX) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: CWMAX expects wmevalue (0-15)");
+			goto fail;
+		} else if (wmevalue < hapd->iconf->wmm_ac_params[ac].cwmin) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: CWMAX can't be lesser than CWMIN.");
+			goto fail;
+		} else if (hapd->iconf->wmm_ac_params[ac].cwmax != wmevalue) {
+			hapd->iconf->wmm_ac_params[ac].cwmax = wmevalue;
+			changed = true;
+		}
+	}
+
+	tmp = os_strstr(buf, "txop=");
+	if (tmp) {
+		wmevalue =  atoi(tmp + 5);
+
+		if (wmevalue < TXOPLIMIT_RANGE_MIN || wmevalue > TXOPLIMIT_RANGE_MAX) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: TXOP expects wmevalue (0-8192 in units of 32 microseconds)");
+			goto fail;
+		} else if (hapd->iconf->wmm_ac_params[ac].txop_limit != wmevalue) {
+			hapd->iconf->wmm_ac_params[ac].txop_limit = wmevalue;
+			changed = true;
+		}
+	}
+
+	tmp = os_strstr(buf, "acm=");
+	if (tmp) {
+		wmevalue =  atoi(tmp + 4);
+
+		if (wmevalue < ACM_RANGE_MIN || wmevalue > ACM_RANGE_MAX) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: ACM expects wmevalue (0/1)");
+			goto fail;
+		} else if (hapd->iconf->wmm_ac_params[ac].admission_control_mandatory != wmevalue) {
+			hapd->iconf->wmm_ac_params[ac].admission_control_mandatory = wmevalue;
+			changed = true;
+		}
+	}
+
+	if (changed)
+		ieee802_11_set_beacon(hapd);
+	return 0;
+fail:
+	return -1;
+}
 
 static char hostapd_ctrl_iface_notify_cw_htaction(struct hostapd_data *hapd,
 						  const u8 *addr, u8 width)
@@ -4375,6 +4496,9 @@ static int hostapd_ctrl_iface_receive_pr
 	} else if (os_strncmp(buf, "NOTIFY_CW_CHANGE ", 17) == 0) {
 		if (hostapd_ctrl_iface_notify_cw_change(hapd, buf + 17))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "WMM_PARAM ", 10) == 0) {
+		if (hostapd_ctrl_iface_wmm_param(hapd, buf + 10) < 0)
+			reply_len = -1;
 	} else if (os_strncmp(buf, "CHAN_SWITCH ", 12) == 0) {
 		if (hostapd_ctrl_iface_chan_switch(hapd->iface, buf + 12))
 			reply_len = -1;
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1223,6 +1223,28 @@ static int hostapd_cli_cmd_chan_switch(s
 	return wpa_ctrl_command(ctrl, cmd);
 }
 
+static int hostapd_cli_cmd_wmm_param(struct wpa_ctrl *ctrl,
+				     int argc, char *argv[])
+{
+	char cmd[256];
+	int res;
+
+	if (argc < 2) {
+		printf("Invalid wmm access category parameter command given \n"
+		       "usage: <wmm_param [ac= <be / bk / vi / vo>]"
+		       "[aifs=] [cwmin=] [cwmax=] [txop=] [acm=]\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "WMM_PARAM %s %s %s %s %s %s %s",
+			  argv[0], argv[1], argv[2], argv[3], argv[4], argv[5], argv[6]);
+	if (os_snprintf_error(sizeof(cmd), res)) {
+		printf("Too long WMM_PARAM command.\n");
+		return -1;
+	}
+	return wpa_ctrl_command(ctrl, cmd);
+}
+
 static int hostapd_cli_cmd_notify_cw_change(struct wpa_ctrl *ctrl,
 					    int argc, char *argv[])
 {
@@ -1723,7 +1745,10 @@ static const struct hostapd_cli_cmd host
 	  "<cs_count> <freq> [sec_channel_offset=] [center_freq1=]\n"
 	  "  [center_freq2=] [bandwidth=] [blocktx] [ht|vht]\n"
 	  "  = initiate channel switch announcement" },
-	 { "color_change", hostapd_cli_cmd_color_change, NULL,
+	{ "wmm_param", hostapd_cli_cmd_wmm_param, NULL,
+	  "[ac=] [aifs=] [cwmin=] [cwmax=] [txop=] [acm=]\n"
+	  "  = set wmm access category parameters" },
+	{ "color_change", hostapd_cli_cmd_color_change, NULL,
 	   "<color> = initiate bss color change to set user color if value between 1-63\n"
 	   "Value 0 will disable the color\n"},
 	{ "hs20_wnm_notif", hostapd_cli_cmd_hs20_wnm_notif, NULL,
