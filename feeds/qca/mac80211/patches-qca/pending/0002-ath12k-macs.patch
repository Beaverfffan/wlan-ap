--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -5944,6 +5944,23 @@ out:
 	return ret;
 }
 
+static const struct firmware *fw_macs;
+static int fw_macs_num = 0;
+
+int ath12k_get_custom_macs_num(int num)
+{
+	int ret = fw_macs_num;
+
+	fw_macs_num += num;
+
+	return ret;
+}
+
+const struct firmware* ath12k_get_custom_macs(void)
+{
+	return fw_macs;
+}
+
 static int ath12k_qmi_event_load_bdf(struct ath12k_qmi *qmi)
 {
 	struct ath12k_base *ab = qmi->ab;
@@ -5993,6 +6010,8 @@ static int ath12k_qmi_event_load_bdf(str
 		return ret;
 	}
 
+	request_firmware(&fw_macs, "ath12k-macs", ab->dev);
+
 	return ret;
 }
 
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -21,6 +21,8 @@
 #include "peer.h"
 #include "testmode.h"
 
+#include <linux/firmware.h>
+
 struct ath12k_wmi_svc_ready_parse {
 	bool wmi_svc_bitmap_done;
 };
@@ -9129,6 +9131,9 @@ mem_free:
 	return ret;
 }
 
+const struct firmware* ath12k_get_custom_macs(void);
+int ath12k_get_custom_macs_num(int num);
+
 static int ath12k_wmi_rdy_parse(struct ath12k_base *ab, u16 tag, u16 len,
 				const void *ptr, void *data)
 {
@@ -9136,6 +9141,7 @@ static int ath12k_wmi_rdy_parse(struct a
 	struct wmi_ready_event fixed_param;
 	struct ath12k_wmi_mac_addr_params *addr_list;
 	struct ath12k_pdev *pdev;
+	const struct firmware *fw_entry;
 	u32 num_mac_addr;
 	int i;
 
@@ -9157,6 +9163,20 @@ static int ath12k_wmi_rdy_parse(struct a
 		addr_list = (struct ath12k_wmi_mac_addr_params *)ptr;
 		num_mac_addr = rdy_parse->num_extra_mac_addr;
 
+		fw_entry = ath12k_get_custom_macs();
+		if (fw_entry) {
+			int num = ath12k_get_custom_macs_num(ab->num_radios);
+			printk("applying ath12k-macs\n");
+			if (fw_entry->size >= ((num + ab->num_radios) * 6)) {
+				for (i = 0; i < ab->num_radios; i++) {
+					pdev = &ab->pdevs[i];
+					ether_addr_copy(pdev->mac_addr, &fw_entry->data[(num + i) * 6]);
+				}
+			}
+			ab->pdevs_macaddr_valid = true;
+			return 0;
+		}
+
 		if (!(ab->num_radios > 1 && num_mac_addr >= ab->num_radios))
 			break;
 
