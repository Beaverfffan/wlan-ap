From b68501c35cda1397cbde8d9c409f960ad3d0987f Mon Sep 17 00:00:00 2001
From: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
Date: Wed, 16 Aug 2023 19:04:46 +0530
Subject: [PATCH] wifi: mac80211: Fix to update 6 GHz power type for station

For station mode, updating the 6 GHz power mode in bss_conf instead of
link_conf in mac80211 causes the station to hang when configuring
the 6 GHz SLO/MLO vap to access the 6 GHz psd channel.

Add proper handling for 6 GHz power mode update in link_conf bss in mac80211,
remove temporary fix in ath12k driver.

Signed-off-by: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
---
 net/mac80211/ieee80211_i.h |  3 ++-
 net/mac80211/mesh.c        |  2 +-
 net/mac80211/mlme.c        |  3 ++-
 net/mac80211/spectmgmt.c   |  2 +-
 net/mac80211/util.c        | 10 ++++++++--
 5 files changed, 14 insertions(+), 6 deletions(-)

--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2534,7 +2534,8 @@ struct ieee80211_channel
 bool ieee80211_chandef_he_6ghz_oper(struct ieee80211_sub_if_data *sdata,
 				    const struct ieee80211_he_operation *he_oper,
 				    const struct ieee80211_eht_operation *eht_oper,
-				    struct cfg80211_chan_def *chandef);
+				    struct cfg80211_chan_def *chandef,
+				    int link_id);
 bool ieee80211_chandef_s1g_oper(const struct ieee80211_s1g_oper_ie *oper,
 				struct cfg80211_chan_def *chandef);
 ieee80211_conn_flags_t ieee80211_chandef_downgrade(struct cfg80211_chan_def *c);
--- a/net/mac80211/mesh.c
+++ b/net/mac80211/mesh.c
@@ -105,7 +105,7 @@ bool mesh_matches_local(struct ieee80211
 				   ie->vht_operation, ie->ht_operation,
 				   &sta_chan_def);
 	ieee80211_chandef_he_6ghz_oper(sdata, ie->he_operation, ie->eht_operation,
-				       &sta_chan_def);
+				       &sta_chan_def, -1);
 
 	/* Update STA ru_punct_bitmap before compatiblity check to allow mesh peering with
 	 * Peers advertising different puncturing pattern.
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -163,6 +163,7 @@ ieee80211_determine_chantype(struct ieee
 	const struct ieee80211_sta_eht_cap *eht_cap;
 	const struct ieee80211_sta_he_cap *he_cap;
 	enum nl80211_iftype iftype = ieee80211_vif_type_p2p(&sdata->vif);
+	int link_id;
 
 	memset(chandef, 0, sizeof(struct cfg80211_chan_def));
 	chandef->chan = channel;
@@ -171,8 +172,10 @@ ieee80211_determine_chantype(struct ieee
 	chandef->freq1_offset = channel->freq_offset;
 
 	if (channel->band == NL80211_BAND_6GHZ) {
+		link_id = link ? link->link_id : -1;
 		if (!ieee80211_chandef_he_6ghz_oper(sdata, he_oper, eht_oper,
-						    chandef)) {
+						    chandef,
+						    link_id)) {
 			mlme_dbg(sdata,
 				 "bad 6 GHz operation, disabling HT/VHT/HE/EHT\n");
 			ret = IEEE80211_CONN_DISABLE_HT |
--- a/net/mac80211/spectmgmt.c
+++ b/net/mac80211/spectmgmt.c
@@ -35,10 +35,10 @@ int ieee80211_parse_ch_switch_ie(struct
 	const struct ieee80211_wide_bw_chansw_ie *wide_bw_chansw_ie;
 	struct ieee80211_vht_operation vht_oper;
 	struct ieee80211_ht_operation ht_oper;
-	struct ieee80211_he_operation he_oper;
-	struct ieee80211_he_6ghz_oper he_6ghz_oper;
-	struct ieee80211_eht_operation eht_oper;
-	struct ieee80211_eht_operation_info eht_oper_info;
+	struct ieee80211_he_operation *he_oper;
+	struct ieee80211_he_6ghz_oper *he_6ghz_oper;
+	struct ieee80211_eht_operation *eht_oper;
+	struct ieee80211_eht_operation_info *eht_oper_info;
 	int secondary_channel_offset = -1;
 	u8 new_seg0, new_seg1, new_chan_width;
 
@@ -153,50 +153,57 @@ int ieee80211_parse_ch_switch_ie(struct
 		new_seg1 = wide_bw_chansw_ie->new_center_freq_seg1;
 		new_chan_width = wide_bw_chansw_ie->new_channel_width;
 		if (new_band == NL80211_BAND_6GHZ) {
-			he_6ghz_oper.primary = new_chan_no;
+			he_oper = kmalloc(sizeof(*he_oper) +
+					  sizeof(*he_6ghz_oper), GFP_KERNEL);
+			if (!he_oper)
+				return -ENOMEM;
+
+			he_6ghz_oper = &he_oper->optional;
+			he_6ghz_oper->primary = new_chan_no;
+
 			if (new_chan_width == IEEE80211_CHANWIDTH_160MHZ)
-				he_6ghz_oper.control = IEEE80211_HE_6GHZ_OPER_CTRL_CHANWIDTH_160MHZ;
+				he_6ghz_oper->control = IEEE80211_HE_6GHZ_OPER_CTRL_CHANWIDTH_160MHZ;
 			else if (new_chan_width == IEEE80211_CHANWIDTH_80MHZ)
-				he_6ghz_oper.control = IEEE80211_HE_6GHZ_OPER_CTRL_CHANWIDTH_80MHZ;
+				he_6ghz_oper->control = IEEE80211_HE_6GHZ_OPER_CTRL_CHANWIDTH_80MHZ;
+
+			he_6ghz_oper->ccfs0 = new_seg0;
+			he_6ghz_oper->ccfs1 = new_seg1;
 
-			he_6ghz_oper.ccfs0 = new_seg0;
-			he_6ghz_oper.ccfs1 = new_seg1;
+			he_oper->he_oper_params =
+				u32_encode_bits(1, IEEE80211_HE_OPERATION_6GHZ_OP_INFO);
 
-			he_oper.he_oper_params = u32_encode_bits(1,
-					IEEE80211_HE_OPERATION_6GHZ_OP_INFO);
-			he_oper.optional[0] = he_6ghz_oper.primary;
-			he_oper.optional[1] = he_6ghz_oper.control;
-			he_oper.optional[2] = he_6ghz_oper.ccfs0;
-			he_oper.optional[3] = he_6ghz_oper.ccfs1;
-
-			eht_oper.params |= IEEE80211_EHT_OPER_INFO_PRESENT;
-			eht_oper_info.ccfs0 = new_seg0;
-			eht_oper_info.ccfs1 = new_seg1;
+			eht_oper = kmalloc(sizeof(*eht_oper) +
+					   sizeof(*eht_oper_info), GFP_KERNEL);
+			if (!eht_oper) {
+				kfree(he_oper);
+				return -ENOMEM;
+			}
+			eht_oper_info = &eht_oper->optional;
+			eht_oper_info->ccfs0 = new_seg0;
+			eht_oper_info->ccfs1 = new_seg1;
 			if (new_chan_width == IEEE80211_CHANWIDTH_320MHZ) {
-				eht_oper_info.control = IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ;
-				eht_oper_info.ccfs0 =
+				eht_oper_info->control = IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ;
+				eht_oper_info->ccfs0 =
 					PRIMARY_CENTER_CHAN_IDX(new_chan_no,
 								new_seg0, 320);
-				eht_oper_info.ccfs1 = new_seg0;
+				eht_oper_info->ccfs1 = new_seg0;
 			} else if (new_chan_width == IEEE80211_CHANWIDTH_160MHZ) {
-				eht_oper_info.control = IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ;
-				eht_oper_info.ccfs0 =
+				eht_oper_info->control = IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ;
+				eht_oper_info->ccfs0 =
 					PRIMARY_CENTER_CHAN_IDX(new_chan_no,
 								new_seg0, 160);
-				eht_oper_info.ccfs1 = new_seg0;
+				eht_oper_info->ccfs1 = new_seg0;
 			} else if (new_chan_width == IEEE80211_CHANWIDTH_80MHZ) {
-				eht_oper_info.control = IEEE80211_EHT_OPER_CHAN_WIDTH_80MHZ;
+				eht_oper_info->control = IEEE80211_EHT_OPER_CHAN_WIDTH_80MHZ;
 			}
-
-			eht_oper.optional[0] = eht_oper_info.control;
-			eht_oper.optional[1] = eht_oper_info.ccfs0;
-			eht_oper.optional[2] = eht_oper_info.ccfs1;
-
+			eht_oper->params |= IEEE80211_EHT_OPER_INFO_PRESENT;
 			new_chandef = csa_ie->chandef;
 
-			if (!ieee80211_chandef_he_6ghz_oper(sdata, &he_oper,
-							    &eht_oper, &new_chandef))
+			if (!ieee80211_chandef_he_6ghz_oper(sdata, he_oper,
+							    eht_oper, &new_chandef, -1))
 					new_chandef.chan = NULL;
+			kfree(he_oper);
+			kfree(eht_oper);
 		} else {
 			vht_oper.chan_width = wide_bw_chansw_ie->new_channel_width;
 			vht_oper.center_freq_seg0_idx = wide_bw_chansw_ie->new_center_freq_seg0;
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -3924,7 +3924,8 @@ struct ieee80211_channel
 bool ieee80211_chandef_he_6ghz_oper(struct ieee80211_sub_if_data *sdata,
 				    const struct ieee80211_he_operation *he_oper,
 				    const struct ieee80211_eht_operation *eht_oper,
-				    struct cfg80211_chan_def *chandef)
+				    struct cfg80211_chan_def *chandef,
+				    int link_id)
 {
 	struct ieee80211_local *local = sdata->local;
 	struct ieee80211_supported_band *sband;
@@ -3933,7 +3934,7 @@ bool ieee80211_chandef_he_6ghz_oper(stru
 	const struct ieee80211_sta_eht_cap *eht_cap;
 	struct cfg80211_chan_def he_chandef = *chandef;
 	const struct ieee80211_he_6ghz_oper *he_6ghz_oper;
-	struct ieee80211_bss_conf *bss_conf = &sdata->vif.bss_conf;
+	struct ieee80211_bss_conf *bss_conf;
 	enum nl80211_regulatory_power_modes mode;
 	bool support_80_80, support_160, support_320;
 	u8 he_phy_cap, eht_phy_cap;
@@ -4010,6 +4011,11 @@ bool ieee80211_chandef_he_6ghz_oper(stru
 	he_chandef.chan = ieee80211_get_6g_channel_khz(sdata->local->hw.wiphy,
 						       MHZ_TO_KHZ(freq), mode);
 
+	if (link_id < 0)
+		bss_conf = &sdata->vif.bss_conf;
+	else
+		bss_conf = rcu_dereference(sdata->vif.link_conf[link_id]);
+
 	switch (u8_get_bits(he_6ghz_oper->control,
 			    IEEE80211_HE_6GHZ_OPER_CTRL_REG_INFO)) {
 	case IEEE80211_6GHZ_CTRL_REG_LPI_AP:
