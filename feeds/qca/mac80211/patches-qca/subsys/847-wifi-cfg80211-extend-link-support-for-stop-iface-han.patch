From a4773442cb835d80ff4f2bff9753631262c67f2c Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Tue, 26 Dec 2023 15:29:36 +0530
Subject: [PATCH] wifi: cfg80211: extend link support for stop iface handler

Currently whenever stop iface is called, the complete iface was getting stopped.
However, there could be need where we would like to stop a link alone instead
of the whole iface.

Hence, extend stop iface infra to handle the event on the passed link id and stop
that link alone instead of the whole iface. This would be useful during cases
such as MBSSID where in if Tx link is going down, all non-tx links alone would
be stopped instead of the whole iface.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 .../wireless/microchip/wilc1000/cfg80211.c    |  2 +-
 include/net/cfg80211.h                        |  5 ++++-
 net/mac80211/cfg.c                            |  4 ++--
 net/mac80211/chan.c                           |  2 +-
 net/mac80211/ieee80211_i.h                    |  2 +-
 net/mac80211/iface.c                          | 19 +++++++++++++------
 net/wireless/core.c                           |  9 +++++----
 net/wireless/core.h                           |  3 ++-
 net/wireless/util.c                           |  3 ++-
 9 files changed, 31 insertions(+), 18 deletions(-)

diff --git a/drivers/net/wireless/microchip/wilc1000/cfg80211.c b/drivers/net/wireless/microchip/wilc1000/cfg80211.c
index b545d93c6e37..7e14f2e49d16 100644
--- a/drivers/net/wireless/microchip/wilc1000/cfg80211.c
+++ b/drivers/net/wireless/microchip/wilc1000/cfg80211.c
@@ -1611,7 +1611,7 @@ static int del_virtual_intf(struct wiphy *wiphy, struct wireless_dev *wdev)
 	    wdev->iftype == NL80211_IFTYPE_P2P_GO)
 		wilc_wfi_deinit_mon_interface(wl, true);
 	vif = netdev_priv(wdev->netdev);
-	cfg80211_stop_iface(wiphy, wdev, GFP_KERNEL);
+	cfg80211_stop_iface(wiphy, wdev, GFP_KERNEL, -1);
 	cfg80211_unregister_netdevice(vif->ndev);
 	vif->monitor_flag = 0;
 
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index df834abb8ceb..39769fa2a2ee 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -9280,14 +9280,17 @@ int cfg80211_get_hw_idx_by_freq(struct wiphy *wiphy, int freq);
  * @wiphy: the wiphy
  * @wdev: wireless device
  * @gfp: context flags
+ * @link_id: valid link ID in case of MLO or else -1
  *
  * Trigger interface to be stopped as if AP was stopped, IBSS/mesh left, STA
  * disconnected.
+ * In case of AP, if link_id is passed, it would only stop that link on the
+ * iface alone. If need to stop the whole iface, -1 should be passed
  *
  * Note: This doesn't need any locks and is asynchronous.
  */
 void cfg80211_stop_iface(struct wiphy *wiphy, struct wireless_dev *wdev,
-			 gfp_t gfp);
+			 gfp_t gfp, int link_id);
 
 /**
  * cfg80211_shutdown_all_interfaces - shut down all interfaces for a wiphy
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 126948d37207..e25df8093cb8 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1879,7 +1879,7 @@ static int ieee80211_stop_ap(struct wiphy *wiphy, struct net_device *dev,
 
 	__sta_info_flush(sdata, true, -1);
 
-	ieee80211_stop_mbssid(sdata);
+	ieee80211_stop_mbssid(sdata, link_id);
 	link_conf->enable_beacon = false;
 	link_conf->mbssid_tx_vif = NULL;
 	link_conf->mbssid_tx_vif_linkid = -1;
@@ -4228,7 +4228,7 @@ static void ieee80211_csa_finalize(struct ieee80211_link_data *link)
 		sdata_info(sdata, "failed to finalize CSA on link_id %d, disconnecting\n",
 			   link->link_id);
 		cfg80211_stop_iface(sdata->local->hw.wiphy, &sdata->wdev,
-				    GFP_KERNEL);
+				    GFP_KERNEL, link->link_id);
 	}
 }
 
diff --git a/net/mac80211/chan.c b/net/mac80211/chan.c
index 628f09b65eea..d2c488055a70 100644
--- a/net/mac80211/chan.c
+++ b/net/mac80211/chan.c
@@ -1805,7 +1805,7 @@ static int ieee80211_vif_use_reserved_switch(struct ieee80211_local *local)
 				ieee80211_link_unreserve_chanctx(link);
 				cfg80211_stop_iface(local->hw.wiphy,
 						    &link->sdata->wdev,
-						    GFP_KERNEL);
+						    GFP_KERNEL, -1);
 			}
 		}
 	}
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 83cd94e1d13d..08851d193a1b 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2721,5 +2721,5 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(struct ieee80211_sub_if_data *sdata,
 				    struct link_sta_info *link_sta);
 void ieee80211_eht_op_ie_to_bss_conf(struct ieee80211_bss_conf *link_conf,
 				     const struct ieee80211_eht_operation *op_ie);
-void ieee80211_stop_mbssid(struct ieee80211_sub_if_data *sdata);
+void ieee80211_stop_mbssid(struct ieee80211_sub_if_data *sdata, int _link_id);
 #endif /* IEEE80211_I_H */
diff --git a/net/mac80211/iface.c b/net/mac80211/iface.c
index c2f7cc3ec2c5..0a4e75d91e44 100644
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -755,7 +755,7 @@ static void ieee80211_do_stop(struct ieee80211_sub_if_data *sdata, bool going_do
 		ieee80211_add_virtual_monitor(local);
 }
 
-void ieee80211_stop_mbssid(struct ieee80211_sub_if_data *sdata)
+void ieee80211_stop_mbssid(struct ieee80211_sub_if_data *sdata, int _link_id)
 {
 	struct ieee80211_sub_if_data *tx_sdata, *non_tx_sdata, *tmp_sdata;
 	struct ieee80211_vif *tx_vif;
@@ -765,8 +765,13 @@ void ieee80211_stop_mbssid(struct ieee80211_sub_if_data *sdata)
 
 	lockdep_assert_wiphy(sdata->local->hw.wiphy);
 	sdata_assert_lock(sdata);
-	/* Check link 0 by default for non MLO. */
-	iter_valid_links = sdata->vif.valid_links | BIT(0);
+
+	if (_link_id == -1)
+		/* Check link 0 by default for non MLO. */
+		iter_valid_links = sdata->vif.valid_links | BIT(0);
+	else
+		iter_valid_links = BIT(_link_id);
+
 	/* Check if any of the links of current sdata is an MBSSID. */
 	for_each_set_bit(iter_link_id, &iter_valid_links,
 			 IEEE80211_MLD_MAX_NUM_LINKS) {
@@ -817,7 +822,8 @@ void ieee80211_stop_mbssid(struct ieee80211_sub_if_data *sdata)
 					 * can be supported.
 					 */
 					cfg80211_stop_iface(non_tx_sdata->wdev.wiphy,
-							    &non_tx_sdata->wdev, GFP_KERNEL);
+							    &non_tx_sdata->wdev, GFP_KERNEL,
+							    link_id);
 				}
 				sdata_unlock(non_tx_sdata);
 			}
@@ -827,7 +833,8 @@ void ieee80211_stop_mbssid(struct ieee80211_sub_if_data *sdata)
 		if (sdata != tx_sdata && ieee80211_sdata_running(tx_sdata)) {
 			sdata_lock(tx_sdata);
 			cfg80211_stop_iface(tx_sdata->wdev.wiphy,
-					    &tx_sdata->wdev, GFP_KERNEL);
+					    &tx_sdata->wdev, GFP_KERNEL,
+					    tx_link_id);
 			sdata_unlock(tx_sdata);
 		}
 	}
@@ -891,7 +898,7 @@ static int ieee80211_stop(struct net_device *dev)
 	 */
 	if (sdata->vif.type == NL80211_IFTYPE_AP) {
 		sdata_lock(sdata);
-		ieee80211_stop_mbssid(sdata);
+		ieee80211_stop_mbssid(sdata, -1);
 		sdata_unlock(sdata);
 	}
 	ieee80211_do_stop(sdata, true);
diff --git a/net/wireless/core.c b/net/wireless/core.c
index 9fca1fc2343d..de647e2ea63d 100644
--- a/net/wireless/core.c
+++ b/net/wireless/core.c
@@ -1497,7 +1497,7 @@ void cfg80211_update_iface_num(struct cfg80211_registered_device *rdev,
 }
 
 void __cfg80211_leave(struct cfg80211_registered_device *rdev,
-		      struct wireless_dev *wdev)
+		      struct wireless_dev *wdev, int link_id)
 {
 	struct net_device *dev = wdev->netdev;
 	struct cfg80211_sched_scan_request *pos, *tmp;
@@ -1539,7 +1539,7 @@ void __cfg80211_leave(struct cfg80211_registered_device *rdev,
 		break;
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_P2P_GO:
-		__cfg80211_stop_ap(rdev, dev, -1, true);
+		__cfg80211_stop_ap(rdev, dev, link_id, true);
 		break;
 	case NL80211_IFTYPE_OCB:
 		__cfg80211_leave_ocb(rdev, dev);
@@ -1564,12 +1564,12 @@ void cfg80211_leave(struct cfg80211_registered_device *rdev,
 		    struct wireless_dev *wdev)
 {
 	wdev_lock(wdev);
-	__cfg80211_leave(rdev, wdev);
+	__cfg80211_leave(rdev, wdev, -1);
 	wdev_unlock(wdev);
 }
 
 void cfg80211_stop_iface(struct wiphy *wiphy, struct wireless_dev *wdev,
-			 gfp_t gfp)
+			 gfp_t gfp, int link_id)
 {
 	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
 	struct cfg80211_event *ev;
@@ -1582,6 +1582,7 @@ void cfg80211_stop_iface(struct wiphy *wiphy, struct wireless_dev *wdev,
 		return;
 
 	ev->type = EVENT_STOPPED;
+	ev->link_id = link_id;
 
 	spin_lock_irqsave(&wdev->event_lock, flags);
 	list_add_tail(&ev->list, &wdev->event_list);
diff --git a/net/wireless/core.h b/net/wireless/core.h
index a6279049f4e0..970e668fb1eb 100644
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -282,6 +282,7 @@ struct cfg80211_event {
 			const u8 *td_bitmap;
 			u8 td_bitmap_len;
 		} pa;
+		int link_id;
 	};
 };
 
@@ -534,7 +535,7 @@ void cfg80211_update_iface_num(struct cfg80211_registered_device *rdev,
 			       enum nl80211_iftype iftype, int num);
 
 void __cfg80211_leave(struct cfg80211_registered_device *rdev,
-		      struct wireless_dev *wdev);
+		      struct wireless_dev *wdev, int link_id);
 void cfg80211_leave(struct cfg80211_registered_device *rdev,
 		    struct wireless_dev *wdev);
 
diff --git a/net/wireless/util.c b/net/wireless/util.c
index e9e210da0746..9dcf0d10c966 100644
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -1091,7 +1091,8 @@ void cfg80211_process_wdev_events(struct wireless_dev *wdev)
 					       ev->ij.channel);
 			break;
 		case EVENT_STOPPED:
-			__cfg80211_leave(wiphy_to_rdev(wdev->wiphy), wdev);
+			__cfg80211_leave(wiphy_to_rdev(wdev->wiphy), wdev,
+					 ev->link_id);
 			break;
 		case EVENT_PORT_AUTHORIZED:
 			__cfg80211_port_authorized(wdev, ev->pa.bssid,
-- 
2.34.1

