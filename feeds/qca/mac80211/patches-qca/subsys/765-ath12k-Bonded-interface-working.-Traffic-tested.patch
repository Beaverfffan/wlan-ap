From ac0d3754703e11e054269e05650a2fd59bec0070 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Wed, 26 Apr 2023 16:37:13 -0700
Subject: [PATCH] ath12k: Add support for Bond interface

Add support for bonded interface to represent each wifi link with a separate
netdevice. With the new code changes, there will be new interfaces in the system.
Add support to collect statistics for the bonded devices.

wlan0 - Original netdevice that gets created as per ath12k control path
        This netdevice will continue to exist and will be used for all
        control path communications. All NL messages from userspace applications
        are processed on the context of this device. This device will not be
        exposed to the bridge anymore
wlan0_b - This represents the bonded interface. No NL messages will be processed
        on the context of this device. This device is purely meant for only
        datapath. This device will be exposed to the bridge layer
link0 - wlan_l0 (link netdevice)
        Will be used for registering with PPE module during MLO DS operation
link1 - wlan_l1 (link netdevice)
        Will be used for registering with PPE module during MLO DS operation

Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
Signed-off-by: Shivani Tambatkar <quic_stambatk@quicinc.com>
Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/Kconfig    |   9 +
 drivers/net/wireless/ath/ath12k/Makefile   |   1 +
 drivers/net/wireless/ath/ath12k/bondif.c   | 783 +++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/bondif.h   |  43 ++
 drivers/net/wireless/ath/ath12k/core.h     |  18 +
 drivers/net/wireless/ath/ath12k/dp.c       |   7 +
 drivers/net/wireless/ath/ath12k/dp_rx.c    |  15 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c    |   5 +-
 drivers/net/wireless/ath/ath12k/mac.c      |  80 ++-
 drivers/net/wireless/ath/ath12k/pci.c      |  23 +
 drivers/net/wireless/ath/ath12k/ppe.c      |  82 ++-
 drivers/net/wireless/ath/ath12k/ppe.h      |  15 +-
 drivers/net/wireless/ath/ath6kl/cfg80211.c |   2 +-
 drivers/net/wireless/ath/wil6210/netdev.c  |   2 +-
 include/net/cfg80211.h                     |   3 +-
 include/net/mac80211.h                     |   6 +-
 include/uapi/linux/nl80211.h               |   3 +
 local-symbols                              |   2 +
 net/mac80211/Kconfig                       |  18 +
 net/mac80211/cfg.c                         |  30 +-
 net/mac80211/chan.c                        |   8 +
 net/mac80211/ieee80211_i.h                 |   5 +-
 net/mac80211/iface.c                       |  24 +-
 net/mac80211/main.c                        |   8 +-
 net/mac80211/mlme.c                        |   3 +-
 net/mac80211/rx.c                          |  18 +-
 net/mac80211/util.c                        |   4 +
 net/wireless/chan.c                        |   8 +
 net/wireless/core.c                        |  50 +-
 net/wireless/nl80211.c                     |  29 +-
 net/wireless/util.c                        |   4 +
 32 files changed, 1268 insertions(+), 89 deletions(-)
 create mode 100644 drivers/net/wireless/ath/ath12k/bondif.c
 create mode 100644 drivers/net/wireless/ath/ath12k/bondif.h

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -6267,6 +6267,7 @@ struct wireless_dev {
 	/* the remainder of this struct should be private to cfg80211 */
 	struct list_head list;
 	struct net_device *netdev;
+	struct net_device *bond_netdev;
 
 	u32 identifier;
 
@@ -9024,7 +9025,7 @@ void cfg80211_unregister_wdev(struct wir
  *
  * Requires the RTNL and wiphy mutex to be held.
  */
-int cfg80211_register_netdevice(struct net_device *dev);
+int cfg80211_register_netdevice(struct net_device *dev, bool mlo_bond_dev);
 
 /**
  * cfg80211_unregister_netdevice - unregister the given netdev
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1985,7 +1985,11 @@ struct ieee80211_vif {
 	bool rx_mcast_action_reg;
 
 	bool noqueue_enable;
-
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	bool bond_init;
+	struct mutex bond_mutex;
+	struct net_device *link_ndev[IEEE80211_MLD_MAX_NUM_LINKS];
+#endif
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	int ppe_vp_num;
 	unsigned long ppe_vp_type;
@@ -4787,6 +4791,10 @@ struct ieee80211_ops {
 	int (*ppeds_detach_vdev)(struct ieee80211_hw *hw,
 				 struct ieee80211_vif *vif,
 				 struct ieee80211_ppe_vp_ds_params *vp_params);
+	int (*set_multicast_to_unicast)(struct ieee80211_hw *hw,
+					struct net_device *dev,
+					const bool enabled);
+
 };
 
 /**
@@ -4830,6 +4838,10 @@ struct ieee80211_hw *ieee80211_alloc_hw(
 	return ieee80211_alloc_hw_nm(priv_data_len, ops, NULL);
 }
 
+#ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
+void ieee80211_enable_bond_dev(struct ieee80211_hw *hw);
+#endif
+
 /**
  * ieee80211_register_hw - Register hardware device
  *
@@ -5047,6 +5059,11 @@ void ieee80211_restart_hw(struct ieee802
 void ieee80211_rx_list(struct ieee80211_hw *hw, struct ieee80211_sta *sta,
 		       struct sk_buff *skb, struct list_head *list);
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+void ieee80211_rx_update_stats(struct ieee80211_hw *hw, struct ieee80211_sta *pubsta,
+			       int link_id, u32 len, struct ieee80211_rx_status *status);
+#endif /* CPTCFG_MAC80211_BONDED_SUPPORT */
+
 /**
  * ieee80211_rx_napi - receive frame from NAPI context
  *
@@ -5418,6 +5435,32 @@ void ieee80211_report_low_ack(struct iee
 
 #define IEEE80211_MAX_CNTDWN_COUNTERS_NUM 2
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+/**
+ * ieee80211_ppeds_tx_update_stats - update tx stats for PPE DS path
+ *
+ * Call this function for all transmitted data frames after their transmit
+ * completion. This callback should only be called for data frames which
+ * are using driver's (or hardware's) offload capability of encap/decap
+ * 802.11 frames.
+ *
+ * This function may not be called in IRQ context. Calls to this function
+ * for a single hardware must be synchronized against each other and all
+ * calls in the same tx status family.
+ *
+ * @hw: the hardware the frame was transmitted by
+ * @pubsta: the station to update the tx rate for.
+ * @info: tx status information
+ * @rate: tx rate information
+ * @link_id: link id
+ * @len: length
+ */
+void ieee80211_ppeds_tx_update_stats(struct ieee80211_hw *hw,
+				     struct ieee80211_sta *pubsta,
+				     struct ieee80211_tx_info *info,
+				     struct rate_info rate, int link_id, u32 len);
+#endif /* CPTCFG_MAC80211_BONDED_SUPPORT */
+
 /**
  * struct ieee80211_mutable_offsets - mutable beacon offsets
  * @tim_offset: position of TIM element
@@ -6384,6 +6427,15 @@ struct ieee80211_sta *ieee80211_find_sta
 					       const u8 *localaddr);
 
 /**
+ * ieee80211_sta_get_dvlan_iface - get dynamic vlan interface
+ *
+ * @pubsta: the station
+ *
+ * Return: The interface if found. %NULL otherwire.
+ */
+struct net_device *ieee80211_sta_get_dvlan_iface(struct ieee80211_sta *pubsta);
+
+/**
  * ieee80211_find_sta_by_link_addrs - find STA by link addresses
  * @hw: pointer as obtained from ieee80211_alloc_hw()
  * @addr: remote station's link address
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -3555,6 +3555,9 @@ enum nl80211_iftype {
 	NL80211_IFTYPE_P2P_DEVICE,
 	NL80211_IFTYPE_OCB,
 	NL80211_IFTYPE_NAN,
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	NL80211_IFTYPE_DUMMY,
+#endif
 
 	/* keep last */
 	NUM_NL80211_IFTYPES,
--- a/net/mac80211/Kconfig
+++ b/net/mac80211/Kconfig
@@ -122,6 +122,24 @@ config MAC80211_PPE_SUPPORT
 
          If unsure, say N.
 
+config MAC80211_BONDED_SUPPORT
+	bool "QTI mac80211 bonded support"
+	depends on ATH12K
+	default n
+	---help---
+	  Enables Bonded support for ATH12K driver
+
+	  If unsure, say N.
+
+config MAC80211_BONDED_SUPPORT
+	bool "QTI mac80211 bonded support"
+	depends on ATH12K
+	default n
+	---help---
+	  Enables Bonded support for ATH12K driver
+
+	  If unsure, say N.
+
 config MAC80211_NOINLINE
 	bool "Do not inline TX/RX handlers"
 	depends on MAC80211_DEBUG_MENU
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -202,7 +202,11 @@ static struct wireless_dev *ieee80211_ad
 	struct ieee80211_sub_if_data *sdata;
 	int err;
 
-	err = ieee80211_if_add(local, name, name_assign_type, &wdev, type, params);
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	err = ieee80211_if_add(local, name, name_assign_type, &wdev, type, params, true);
+#else
+	err = ieee80211_if_add(local, name, name_assign_type, &wdev, type, params, false);
+#endif
 	if (err)
 		return ERR_PTR(err);
 
@@ -226,6 +230,26 @@ static int ieee80211_del_iface(struct wi
 	return 0;
 }
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+static struct wireless_dev *ieee80211_dummy_add_iface(struct wiphy *wiphy,
+                                                const char *name,
+                                                unsigned char name_assign_type,
+                                                enum nl80211_iftype type,
+                                                struct vif_params *params)
+{
+	return NULL;
+}
+static int ieee80211_dummy_del_iface(struct wiphy *wiphy, struct wireless_dev *wdev)
+{
+	return -EINVAL;
+}
+const struct cfg80211_ops mac80211_dummy_config_ops = {
+        .add_virtual_intf = ieee80211_dummy_add_iface,
+        .del_virtual_intf = ieee80211_dummy_del_iface,
+};
+EXPORT_SYMBOL(mac80211_dummy_config_ops);
+#endif
+
 static int ieee80211_change_iface(struct wiphy *wiphy,
 				  struct net_device *dev,
 				  enum nl80211_iftype type,
@@ -554,6 +578,10 @@ static int ieee80211_add_key(struct wiph
 	}
 
 	switch (sdata->vif.type) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return 0;
+#endif
 	case NL80211_IFTYPE_STATION:
 		if (sdata->u.mgd.mfp != IEEE80211_MFP_DISABLED)
 			key->conf.flags |= IEEE80211_KEY_FLAG_RX_MGMT;
@@ -1857,9 +1885,23 @@ static int ieee80211_stop_ap(struct wiph
 
 	ieee80211_free_next_beacon(link);
 
+ #ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	if (sdata->wdev.bond_netdev && sdata->wdev.bond_netdev->flags & IFF_UP) {
+		netif_stop_queue(sdata->wdev.bond_netdev);
+		netif_carrier_off(sdata->wdev.bond_netdev);
+		sdata->wdev.bond_netdev->flags &= ~IFF_UP;
+	}
+
+	if (sdata->vif.link_ndev[link_id]) {
+		netif_stop_queue(sdata->vif.link_ndev[link_id]);
+		netif_carrier_off(sdata->vif.link_ndev[link_id]);
+	}
+#endif
+
 	/* turn off carrier for this interface and dependent VLANs */
 	list_for_each_entry(vlan, &sdata->u.ap.vlans, u.vlan.list)
 		netif_carrier_off(vlan->dev);
+
 	netif_carrier_off(dev);
 
 	/* remove beacon and probe response */
@@ -4965,6 +5007,9 @@ static int ieee80211_set_multicast_to_un
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 
 	sdata->u.ap.multicast_to_unicast = enabled;
+#ifdef CPTCFG_MAC80211_PPE_SUPPORT
+	drv_set_multicast_to_unicast(sdata->local, sdata, dev, enabled);
+#endif
 
 	return 0;
 }
--- a/net/mac80211/chan.c
+++ b/net/mac80211/chan.c
@@ -296,6 +296,10 @@ ieee80211_get_chanctx_vif_max_required_b
 			continue;
 
 		switch (vif->type) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+		case NL80211_IFTYPE_DUMMY:
+			return 0;
+#endif
 		case NL80211_IFTYPE_AP:
 		case NL80211_IFTYPE_AP_VLAN:
 			width = ieee80211_get_max_required_bw(sdata, link_id);
@@ -1255,6 +1259,10 @@ ieee80211_link_chanctx_reservation_compl
 	struct ieee80211_sub_if_data *sdata = link->sdata;
 
 	switch (sdata->vif.type) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return;
+#endif
 	case NL80211_IFTYPE_ADHOC:
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_MESH_POINT:
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -26,6 +26,9 @@
 #include <linux/idr.h>
 #include <linux/rhashtable.h>
 #include <linux/rbtree.h>
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+#include <net/bonding.h>
+#endif
 #include <net/ieee80211_radiotap.h>
 #include <net/cfg80211.h>
 #include <net/mac80211.h>
@@ -2063,7 +2066,7 @@ void ieee80211_iface_exit(void);
 int ieee80211_if_add(struct ieee80211_local *local, const char *name,
 		     unsigned char name_assign_type,
 		     struct wireless_dev **new_wdev, enum nl80211_iftype type,
-		     struct vif_params *params);
+		     struct vif_params *params, bool mlo_bond_dev);
 int ieee80211_if_change_type(struct ieee80211_sub_if_data *sdata,
 			     enum nl80211_iftype type);
 void ieee80211_if_remove(struct ieee80211_sub_if_data *sdata);
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -487,6 +487,16 @@ static void ieee80211_do_stop(struct iee
 	if (cancel_scan)
 		ieee80211_scan_cancel(local);
 
+ #ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	for_each_set_bit(link_id, &sdata->vif.valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+		if (sdata->vif.link_ndev[link_id])
+			netif_tx_stop_all_queues(sdata->vif.link_ndev[link_id]);
+	}
+
+	if (sdata->wdev.bond_netdev)
+		netif_tx_stop_all_queues(sdata->wdev.bond_netdev);
+#endif
+
 	ieee80211_roc_purge(local, sdata);
 
 	switch (sdata->vif.type) {
@@ -837,10 +847,24 @@ static int ieee80211_stop(struct net_dev
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	struct ieee80211_ppe_vp_ds_params vp_params = {0};
 #endif
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	int link_id;
+#endif
 
 	/* close dependent VLAN interfaces before locking wiphy */
 	if (sdata->vif.type == NL80211_IFTYPE_AP) {
 		struct ieee80211_sub_if_data *vlan, *tmpsdata;
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+			for_each_set_bit(link_id, &sdata->vif.valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+				if (sdata->vif.link_ndev[link_id])
+					dev_close(sdata->vif.link_ndev[link_id]);
+			}
+
+			if (sdata->wdev.bond_netdev) {
+				if (sdata->wdev.bond_netdev)
+					dev_close(sdata->wdev.bond_netdev);
+		         }
+#endif
 
 		list_for_each_entry_safe(vlan, tmpsdata, &sdata->u.ap.vlans,
 					 u.vlan.list)
@@ -857,7 +881,7 @@ static int ieee80211_stop(struct net_dev
 #endif
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	if (sdata->vif.ppe_vp_num != -1) {
+	if (ppe_vp_accel && sdata->vif.ppe_vp_num != -1) {
 		drv_ppeds_detach_vdev(sdata, &sdata->vif, &vp_params);
 		if (sdata->vif.ppe_vp_type != PPE_VP_USER_TYPE_DS)
 			ppe_vp_free(sdata->vif.ppe_vp_num);
@@ -1496,6 +1520,11 @@ int ieee80211_do_open(struct wireless_de
 		/* cannot happen */
 		WARN_ON(1);
 		break;
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return 0;
+		break;
+#endif
 	}
 
 	if (local->open_count == 0) {
@@ -1967,6 +1996,11 @@ static void ieee80211_setup_sdata(struct
 
 	/* and set some type-dependent values */
 	sdata->vif.type = type;
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	mutex_init(&sdata->vif.bond_mutex);
+	sdata->vif.bond_init = true;
+#endif
+
 	sdata->vif.p2p = false;
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	sdata->vif.ppe_vp_num = -1;
@@ -2046,6 +2080,10 @@ static void ieee80211_setup_sdata(struct
 	case NUM_NL80211_IFTYPES:
 		WARN_ON(1);
 		break;
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return;
+#endif
 	}
 
 	/* need to do this after the switch so vif.type is correct */
@@ -2308,7 +2346,7 @@ static void ieee80211_assign_perm_addr(s
 int ieee80211_if_add(struct ieee80211_local *local, const char *name,
 		     unsigned char name_assign_type,
 		     struct wireless_dev **new_wdev, enum nl80211_iftype type,
-		     struct vif_params *params)
+		     struct vif_params *params, bool mlo_bond_dev)
 {
 	struct net_device *ndev = NULL;
 	struct ieee80211_sub_if_data *sdata = NULL;
@@ -2461,7 +2499,7 @@ int ieee80211_if_add(struct ieee80211_lo
 		else
 			ndev->max_mtu = local->hw.max_mtu;
 
-		ret = cfg80211_register_netdevice(ndev);
+		ret = cfg80211_register_netdevice(ndev, mlo_bond_dev);
 		if (ret) {
 			free_netdev(ndev);
 			return ret;
@@ -2492,7 +2530,9 @@ void ieee80211_if_remove(struct ieee8021
 	synchronize_rcu();
 
 	cfg80211_unregister_wdev(&sdata->wdev);
-
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	mutex_destroy(&sdata->vif.bond_mutex);
+#endif
 	if (!sdata->dev) {
 		ieee80211_teardown_sdata(sdata);
 		kfree(sdata);
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -637,6 +637,17 @@ static const struct ieee80211_vht_cap ma
 	},
 };
 
+#ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
+void cfg80211_enable_bond_dev(struct wiphy *wiphy);
+void ieee80211_enable_bond_dev(struct ieee80211_hw *hw)
+{
+	struct wiphy *wiphy = hw->wiphy;
+	cfg80211_enable_bond_dev(wiphy);
+
+}
+EXPORT_SYMBOL(ieee80211_enable_bond_dev);
+#endif
+
 struct ieee80211_hw *ieee80211_alloc_hw_nm(size_t priv_data_len,
 					   const struct ieee80211_ops *ops,
 					   const char *requested_name)
@@ -1513,8 +1524,14 @@ int ieee80211_register_hw(struct ieee802
 	    !ieee80211_hw_check(hw, NO_AUTO_VIF)) {
 		struct vif_params params = {0};
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+		result = ieee80211_if_add(local, "wlan%d", NET_NAME_ENUM, NULL,
+					  NL80211_IFTYPE_STATION, &params, true);
+#else
 		result = ieee80211_if_add(local, "wlan%d", NET_NAME_ENUM, NULL,
-					  NL80211_IFTYPE_STATION, &params);
+					  NL80211_IFTYPE_STATION, &params, false);
+#endif
+
 		if (result)
 			wiphy_warn(local->hw.wiphy,
 				   "Failed to add default virtual iface\n");
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -2426,7 +2426,7 @@ void ieee80211_dfs_cac_timer_work(struct
 			     dfs_cac_timer_work);
 	struct cfg80211_chan_def chandef = link->conf->chandef;
 	struct ieee80211_sub_if_data *sdata = link->sdata;
-
+	rtnl_lock();
 	mutex_lock(&sdata->local->mtx);
 
 	if (sdata->wdev.links[link->link_id].cac_started) {
@@ -2437,6 +2437,7 @@ void ieee80211_dfs_cac_timer_work(struct
 	}
 
 	mutex_unlock(&sdata->local->mtx);
+	rtnl_unlock();
 }
 
 static bool
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -2697,6 +2697,9 @@ static void ieee80211_netif_rx_ppe(struc
 out:
 	skb->protocol = eth_type_trans(skb, sdata->dev);
 	skb->dev = sdata->dev;
+	if (sdata->wdev.bond_netdev)
+		skb->dev = sdata->wdev.bond_netdev;
+
 	if (rx->napi)
 		napi_gro_receive(rx->napi, skb);
 	else
@@ -4881,6 +4884,59 @@ void ieee80211_check_fast_rx_iface(struc
 	mutex_unlock(&local->sta_mtx);
 }
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+void ieee80211_rx_update_stats(struct ieee80211_hw *hw, struct ieee80211_sta *pubsta,
+			       int link_id, u32 len, struct ieee80211_rx_status *status)
+{
+	struct sta_info *sta = container_of(pubsta, struct sta_info, sta);
+	struct link_sta_info *link_sta;
+	struct ieee80211_sta_rx_stats *stats;
+
+	rcu_read_lock();
+	if (link_id >= 0) {
+		link_sta = rcu_dereference(sta->link[link_id]);
+		if (WARN_ON_ONCE(!link_sta)) {
+			rcu_read_unlock();
+			return;
+		}
+	} else {
+		link_sta = &sta->deflink;
+	}
+
+	stats = &link_sta->rx_stats;
+
+	if (!(status->flag & RX_FLAG_NO_SIGNAL_VAL)) {
+		stats->last_signal = status->signal;
+	}
+
+	if (status->chains) {
+		int i;
+
+		stats->chains = status->chains;
+		for (i = 0; i < ARRAY_SIZE(status->chain_signal); i++) {
+			int signal = status->chain_signal[i];
+
+			if (!(status->chains & BIT(i)))
+				continue;
+
+			stats->chain_signal_last[i] = signal;
+		}
+	}
+
+	stats->last_rx = jiffies;
+	stats->last_rate = sta_stats_encode_rate(status);
+
+	stats->fragments++;
+	stats->packets++;
+
+	u64_stats_update_begin(&stats->syncp);
+	stats->bytes += len;
+	u64_stats_update_end(&stats->syncp);
+	rcu_read_unlock();
+}
+EXPORT_SYMBOL(ieee80211_rx_update_stats);
+#endif /* CPTCFG_MAC80211_BONDED_SUPPORT */
+
 static void ieee80211_rx_8023(struct ieee80211_rx_data *rx,
 			      struct ieee80211_fast_rx *fast_rx,
 			      int orig_len)
@@ -4890,6 +4946,9 @@ static void ieee80211_rx_8023(struct iee
 	struct sta_info *sta = rx->sta;
 	struct link_sta_info *link_sta;
 	struct sk_buff *skb = rx->skb;
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	struct wireless_dev *wdev = NULL;
+#endif
 	void *sa = skb->data + ETH_ALEN;
 	void *da = skb->data;
 
@@ -4940,6 +4999,12 @@ static void ieee80211_rx_8023(struct iee
 	stats->packets++;
 
 	skb->dev = fast_rx->dev;
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	wdev = (struct wireless_dev *)fast_rx->dev->ieee80211_ptr;
+	if (wdev && wdev->bond_netdev) {
+		skb->dev = wdev->bond_netdev;
+	}
+#endif
 
 	ieee80211_rx_stats(fast_rx->dev, skb->len);
 
@@ -4982,7 +5047,7 @@ static void ieee80211_rx_8023(struct iee
 	}
 
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
-	if (rx->sdata->vif.ppe_vp_num) {
+	if (rx->sdata->vif.ppe_vp_num != -1) {
 		ieee80211_netif_rx_ppe(rx, skb);
 		atomic_inc(&sta->rx_netif_pkts);
 		return;
@@ -4990,6 +5055,10 @@ static void ieee80211_rx_8023(struct iee
 #endif
 	/* deliver to local stack */
 	skb->protocol = eth_type_trans(skb, fast_rx->dev);
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	if (wdev->bond_netdev && fast_rx->vif_type == NL80211_IFTYPE_AP)
+		skb->dev = wdev->bond_netdev;
+#endif
 	ieee80211_deliver_skb_to_local_stack(skb, rx);
 }
 
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -2521,6 +2521,10 @@ static int ieee80211_reconfig_link_bss(s
 		changed |= BSS_CHANGED_MU_GROUPS;
 
 	switch (sdata->vif.type) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return 0;
+#endif
 	case NL80211_IFTYPE_STATION:
 		changed |= BSS_CHANGED_PS;
 		changed &= ~BSS_CHANGED_IDLE;
@@ -4548,9 +4552,11 @@ ieee80211_dfs_radar_detected_processing(
 	}
 	mutex_unlock(&local->chanctx_mtx);
 
+	rtnl_lock();
 	wiphy_lock(local->hw.wiphy);
 	ieee80211_dfs_cac_cancel(local);
 	wiphy_unlock(local->hw.wiphy);
+	rtnl_unlock();
 
 	if (radar_chandef)
 		radar_chandef->radar_bitmap = radar_bitmap;
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -684,6 +684,10 @@ int cfg80211_chandef_dfs_required(struct
 		return -EINVAL;
 
 	switch (iftype) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return 0;
+#endif
 	case NL80211_IFTYPE_ADHOC:
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_P2P_GO:
@@ -866,6 +870,10 @@ bool cfg80211_beaconing_iface_active(str
 	ASSERT_WDEV_LOCK(wdev);
 
 	switch (wdev->iftype) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return true;
+#endif
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_P2P_GO:
 		for_each_valid_link(wdev, link) {
--- a/net/wireless/core.c
+++ b/net/wireless/core.c
@@ -22,6 +22,9 @@
 #include <linux/etherdevice.h>
 #include <linux/rtnetlink.h>
 #include <linux/sched.h>
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+#include <net/bonding.h>
+#endif
 #include <net/genetlink.h>
 #include <net/cfg80211.h>
 #include "nl80211.h"
@@ -54,6 +57,16 @@ module_param(cfg80211_disable_40mhz_24gh
 MODULE_PARM_DESC(cfg80211_disable_40mhz_24ghz,
 		 "Disable 40MHz support in the 2.4GHz band");
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+int g_bonded_interface_model = 0;
+module_param(g_bonded_interface_model, bool, 0644);
+MODULE_PARM_DESC(g_bonded_interface_model, "g_bonded_interface_model");
+EXPORT_SYMBOL(g_bonded_interface_model);
+
+int (*driver_bond_dev_cb)(struct wireless_dev *wdev, struct net_device *dev, bool is_register);
+EXPORT_SYMBOL(driver_bond_dev_cb);
+#endif
+
 struct cfg80211_registered_device *cfg80211_rdev_by_wiphy_idx(int wiphy_idx)
 {
 	struct cfg80211_registered_device *result = NULL, *rdev;
@@ -70,6 +83,15 @@ struct cfg80211_registered_device *cfg80
 	return result;
 }
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+void cfg80211_enable_bond_dev(struct wiphy *wiphy)
+{
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
+	rdev->enable_bond_dev = 1;
+}
+EXPORT_SYMBOL(cfg80211_enable_bond_dev);
+#endif
+
 int get_wiphy_idx(struct wiphy *wiphy)
 {
 	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
@@ -1377,6 +1399,9 @@ static void _cfg80211_unregister_wdev(st
 {
 	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wdev->wiphy);
 	unsigned int link_id;
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	bool skip_bond_netdev = false;
+#endif
 
 	ASSERT_RTNL();
 	lockdep_assert_held(&rdev->wiphy.mtx);
@@ -1389,6 +1414,19 @@ static void _cfg80211_unregister_wdev(st
 		sysfs_remove_link(&wdev->netdev->dev.kobj, "phy80211");
 		if (unregister_netdev)
 			unregister_netdevice(wdev->netdev);
+
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+		if (wdev->bond_netdev) {
+			if (wdev->iftype == NL80211_IFTYPE_MESH_POINT ||
+			    wdev->iftype == NL80211_IFTYPE_MONITOR ||
+				rdev->enable_bond_dev == 0 || wdev->iftype == NL80211_IFTYPE_STATION)
+				skip_bond_netdev = true;
+			if (!skip_bond_netdev &&
+			    g_bonded_interface_model && driver_bond_dev_cb) {
+				(*driver_bond_dev_cb)(wdev, wdev->netdev, false);
+			}
+		}
+#endif
 	}
 
 	list_del_rcu(&wdev->list);
@@ -1472,6 +1510,10 @@ void __cfg80211_leave(struct cfg80211_re
 	cfg80211_stop_background_radar_detection(wdev);
 
 	switch (wdev->iftype) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return;
+#endif
 	case NL80211_IFTYPE_ADHOC:
 		__cfg80211_leave_ibss(rdev, dev, true);
 		break;
@@ -1605,22 +1647,29 @@ void cfg80211_register_wdev(struct cfg80
 	if (wdev->netdev &&
 	    sysfs_create_link(&wdev->netdev->dev.kobj, &rdev->wiphy.dev.kobj,
 			      "phy80211"))
-		pr_err("failed to add phy80211 symlink to netdev!\n");
+		pr_err("failed to add phy80211 symlink to netdev! name %s\n", wdev->netdev->name);
 
 	nl80211_notify_iface(rdev, wdev, NL80211_CMD_NEW_INTERFACE);
 }
 
-int cfg80211_register_netdevice(struct net_device *dev)
+int cfg80211_register_netdevice(struct net_device *dev, bool create_bond_dev)
 {
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	struct cfg80211_registered_device *rdev;
 	int ret;
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	bool skip_bond_netdev = false;
+#endif
 
 	ASSERT_RTNL();
 
 	if (WARN_ON(!wdev))
 		return -EINVAL;
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	if (wdev->iftype == NL80211_IFTYPE_DUMMY && !wdev->wiphy)
+		return 0;
+#endif
 	rdev = wiphy_to_rdev(wdev->wiphy);
 
 	lockdep_assert_held(&rdev->wiphy.mtx);
@@ -1633,6 +1682,18 @@ int cfg80211_register_netdevice(struct n
 		goto out;
 
 	cfg80211_register_wdev(rdev, wdev);
+
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	if (wdev->iftype == NL80211_IFTYPE_MESH_POINT ||
+	     wdev->iftype == NL80211_IFTYPE_MONITOR ||
+		 rdev->enable_bond_dev == 0 || wdev->iftype == NL80211_IFTYPE_STATION)
+		skip_bond_netdev = true;
+
+	if (!skip_bond_netdev && g_bonded_interface_model &&
+	    create_bond_dev && driver_bond_dev_cb) {
+		(*driver_bond_dev_cb)(wdev, dev, true);
+	}
+#endif
 	ret = 0;
 out:
 	wdev->registering = false;
@@ -1653,6 +1714,11 @@ static int cfg80211_netdev_notifier_call
 	if (!wdev)
 		return NOTIFY_DONE;
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	if (wdev->iftype == NL80211_IFTYPE_DUMMY && !wdev->wiphy)
+		return 0;
+#endif
+
 	rdev = wiphy_to_rdev(wdev->wiphy);
 
 	WARN_ON(wdev->iftype == NL80211_IFTYPE_UNSPECIFIED);
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -1596,6 +1596,10 @@ static int nl80211_key_allowed(struct wi
 	ASSERT_WDEV_LOCK(wdev);
 
 	switch (wdev->iftype) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+	case NL80211_IFTYPE_DUMMY:
+		return 0;
+#endif
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_AP_VLAN:
 	case NL80211_IFTYPE_P2P_GO:
@@ -10685,6 +10689,7 @@ static int nl80211_start_radar_detection
 
 	flush_delayed_work(&rdev->dfs_update_channels_wk);
 
+	rtnl_lock();
 	wiphy_lock(wiphy);
 	wdev_lock(wdev);
 
@@ -10771,6 +10776,7 @@ static int nl80211_start_radar_detection
 unlock:
 	wdev_unlock(wdev);
 	wiphy_unlock(wiphy);
+	rtnl_unlock();
 
 	return err;
 }
@@ -17189,9 +17195,16 @@ static int nl80211_set_hw_timestamp(stru
 		 NL80211_FLAG_NEED_RTNL)		\
 	SELECTOR(__sel, NETDEV_UP,			\
 		 NL80211_FLAG_NEED_NETDEV_UP)		\
+	SELECTOR(__sel, NETDEV_UP_RTNL,			\
+		 NL80211_FLAG_NEED_RTNL |		\
+		 NL80211_FLAG_NEED_NETDEV_UP)		\
 	SELECTOR(__sel, NETDEV_UP_LINK,			\
 		 NL80211_FLAG_NEED_NETDEV_UP |		\
 		 NL80211_FLAG_MLO_VALID_LINK_ID)	\
+	SELECTOR(__sel, NETDEV_UP_LINK_RTNL,			\
+		 NL80211_FLAG_NEED_NETDEV_UP |		\
+		 NL80211_FLAG_NEED_RTNL |		\
+		 NL80211_FLAG_MLO_VALID_LINK_ID)	\
 	SELECTOR(__sel, NETDEV_UP_LINK_NOMTX,		\
 		 NL80211_FLAG_NEED_NETDEV_UP |		\
 		 NL80211_FLAG_NO_WIPHY_MTX |		\
@@ -17223,7 +17236,13 @@ static int nl80211_set_hw_timestamp(stru
 		 NL80211_FLAG_NEED_RTNL)		\
 	SELECTOR(__sel, WIPHY_CLEAR,			\
 		 NL80211_FLAG_NEED_WIPHY |		\
-		 NL80211_FLAG_CLEAR_SKB)
+		 NL80211_FLAG_CLEAR_SKB)		\
+	SELECTOR(__sel, NETDEV_UP_LINK_NOMTX_RTNL,	\
+		 NL80211_FLAG_NEED_NETDEV_UP |		\
+		 NL80211_FLAG_NEED_RTNL	|		\
+		 NL80211_FLAG_NO_WIPHY_MTX |		\
+		 NL80211_FLAG_MLO_VALID_LINK_ID)
+
 
 enum nl80211_internal_flags_selector {
 #define SELECTOR(_, name, value)	NL80211_IFL_SEL_##name,
@@ -17587,6 +17606,7 @@ static const struct genl_small_ops nl802
 		.flags = GENL_UNS_ADMIN_PERM,
 		.doit = nl80211_start_ap,
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP |
+					 NL80211_FLAG_NEED_RTNL |
 					 NL80211_FLAG_MLO_VALID_LINK_ID),
 	},
 	{
@@ -17595,6 +17615,7 @@ static const struct genl_small_ops nl802
 		.flags = GENL_UNS_ADMIN_PERM,
 		.doit = nl80211_stop_ap,
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP |
+					 NL80211_FLAG_NEED_RTNL |
 					 NL80211_FLAG_MLO_VALID_LINK_ID),
 	},
 	{
@@ -17716,7 +17737,7 @@ static const struct genl_small_ops nl802
 		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
 		.doit = nl80211_trigger_scan,
 		.flags = GENL_UNS_ADMIN_PERM,
-		.internal_flags = IFLAGS(NL80211_FLAG_NEED_WDEV_UP),
+		.internal_flags = IFLAGS(NL80211_FLAG_NEED_WDEV_UP | NL80211_FLAG_NEED_RTNL),
 	},
 	{
 		.cmd = NL80211_CMD_ABORT_SCAN,
@@ -18296,13 +18317,15 @@ static const struct genl_small_ops nl802
 		.cmd = NL80211_CMD_ADD_LINK,
 		.doit = nl80211_add_link,
 		.flags = GENL_UNS_ADMIN_PERM,
-		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP),
+		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP |
+					 NL80211_FLAG_NEED_RTNL),
 	},
 	{
 		.cmd = NL80211_CMD_REMOVE_LINK,
 		.doit = nl80211_remove_link,
 		.flags = GENL_UNS_ADMIN_PERM,
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP |
+					 NL80211_FLAG_NEED_RTNL |
 					 NL80211_FLAG_MLO_VALID_LINK_ID),
 	},
 	{
@@ -18310,6 +18333,7 @@ static const struct genl_small_ops nl802
 		.doit = nl80211_add_link_station,
 		.flags = GENL_UNS_ADMIN_PERM,
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP |
+					 NL80211_FLAG_NEED_RTNL |
 					 NL80211_FLAG_MLO_VALID_LINK_ID),
 	},
 	{
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -1196,6 +1196,10 @@ int cfg80211_change_iface(struct cfg8021
 	if (!err) {
 		dev->priv_flags &= ~IFF_DONT_BRIDGE;
 		switch (ntype) {
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+		case NL80211_IFTYPE_DUMMY:
+			return 0;
+#endif
 		case NL80211_IFTYPE_STATION:
 			if (dev->ieee80211_ptr->use_4addr)
 				break;
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -114,6 +114,9 @@ struct cfg80211_registered_device {
 	spinlock_t wiphy_work_lock;
 	bool suspended;
 
+#ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
+	bool enable_bond_dev;
+#endif
 	/* must be last because of the way we do wiphy_priv(),
 	 * and it should at least be aligned to NETDEV_ALIGN */
 	struct wiphy wiphy __aligned(NETDEV_ALIGN);
--- a/net/mac80211/status.c
+++ b/net/mac80211/status.c
@@ -1247,6 +1247,39 @@ void ieee80211_tx_rate_update(struct iee
 }
 EXPORT_SYMBOL(ieee80211_tx_rate_update);
 
+#ifdef CPTCFG_MAC80211_BONDED_SUPPORT
+void ieee80211_ppeds_tx_update_stats(struct ieee80211_hw *hw,
+				     struct ieee80211_sta *pubsta,
+				     struct ieee80211_tx_info *info,
+				     struct rate_info rate, int link_id, u32 len)
+{
+	struct sta_info *sta = container_of(pubsta, struct sta_info, sta);
+	struct link_sta_info *link_sta;
+	int rates_idx, retry_count;
+
+	rcu_read_lock();
+	if (link_id >= 0) {
+		link_sta = rcu_dereference(sta->link[link_id]);
+		if (WARN_ON_ONCE(!link_sta)) {
+			rcu_read_unlock();
+			return;
+		}
+	} else {
+		link_sta = &sta->deflink;
+	}
+
+	link_sta->tx_stats.packets[0]++;
+	link_sta->tx_stats.bytes[0] += len;
+	rates_idx = ieee80211_tx_get_rates(hw, info, &retry_count);
+	link_sta->tx_stats.last_rate = info->status.rates[rates_idx];
+	link_sta->tx_stats.last_rate_info = rate;
+
+	rcu_read_unlock();
+}
+EXPORT_SYMBOL(ieee80211_ppeds_tx_update_stats);
+#endif /* CPTCFG_MAC80211_BONDED_SUPPORT */
+
+
 void ieee80211_report_low_ack(struct ieee80211_sta *pubsta, u32 num_packets)
 {
 	struct sta_info *sta = container_of(pubsta, struct sta_info, sta);
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -216,6 +216,17 @@ static inline u16 ieee80211_sn_sub(u16 s
 #define IEEE80211_MAX_AID_S1G		8191
 #define IEEE80211_MAX_TIM_LEN		251
 #define IEEE80211_MAX_MESH_PEERINGS	63
+
+/*
+ * Maximum acceptable MTU is:
+ *  IEEE80211_MAX_LEN - WEP overhead - CRC -
+ *      QoS overhead - RSN/WPA overhead
+ * Min is arbitrarily chosen > IEEE80211_MIN_LEN.  The default
+ * mtu is Ethernet-compatible; it's set by ether_ifattach.
+ */
+#define IEEE80211_MTU_MAX       2290
+#define IEEE80211_MTU_MIN       32
+
 /* Maximum size for the MA-UNITDATA primitive, 802.11 standard section
    6.2.1.1.2.
 
--- a/local-symbols
+++ b/local-symbols
@@ -67,6 +67,7 @@ MAC80211_DEBUG_COUNTERS=
 MAC80211_STA_HASH_MAX_SIZE=
 MAC80211_NSS_SUPPORT=
 MAC80211_PPE_SUPPORT=
+MAC80211_BONDED_SUPPORT=
 QCOM_AOSS_QMP=
 QCOM_COMMAND_DB=
 QCOM_CPR=
@@ -177,6 +178,7 @@ ATH12K=
 ATH12K_DEBUG=
 ATH12K_TRACING=
 ATH12K_PPE_DS_SUPPORT=
+ATH12K_BONDED_DS_SUPPORT=
 WLAN_VENDOR_ATMEL=
 ATMEL=
 PCI_ATMEL=
--- a/net/wireless/sme.c
+++ b/net/wireless/sme.c
@@ -1584,6 +1584,7 @@ void cfg80211_autodisconnect_wk(struct w
 		container_of(work, struct wireless_dev, disconnect_wk);
 	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wdev->wiphy);
 
+	rtnl_lock();
 	wiphy_lock(&rdev->wiphy);
 	wdev_lock(wdev);
 
@@ -1624,4 +1625,5 @@ void cfg80211_autodisconnect_wk(struct w
 
 	wdev_unlock(wdev);
 	wiphy_unlock(&rdev->wiphy);
+	rtnl_unlock();
 }
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -215,6 +215,20 @@ struct sta_info *sta_info_get(struct iee
 	return NULL;
 }
 
+struct net_device *ieee80211_sta_get_dvlan_iface(struct ieee80211_sta *pubsta)
+{
+	struct sta_info *sta = container_of(pubsta, struct sta_info, sta);
+
+	if (!sta)
+		return NULL;
+
+	if (sta->sdata->vif.type == NL80211_IFTYPE_AP_VLAN)
+		return  sta->sdata->dev;
+	else
+		return NULL;
+}
+EXPORT_SYMBOL(ieee80211_sta_get_dvlan_iface);
+
 /*
  * Get sta info either from the specified interface
  * or from one of its vlans
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1545,6 +1545,25 @@ static inline int drv_net_setup_tc(struc
 
 	return ret;
 }
+#ifdef CPTCFG_MAC80211_PPE_SUPPORT
+static inline int drv_set_multicast_to_unicast(struct ieee80211_local *local,
+						struct ieee80211_sub_if_data *sdata,
+						struct net_device *dev,
+						const bool enabled)
+{
+	struct ieee80211_vif *vif = sdata ? &sdata->vif : NULL;
+
+	might_sleep();
+
+	if (!check_sdata_in_driver(sdata))
+		return -EIO;
+
+	if (!local->ops->set_multicast_to_unicast)
+		return -ENOTSUPP;
+
+	return local->ops->set_multicast_to_unicast(&local->hw, vif, enabled);
+}
+#endif
 
 static inline int drv_ppeds_attach_vdev(struct ieee80211_sub_if_data *sdata,
 					struct ieee80211_vif *vif, void *vp_arg,
