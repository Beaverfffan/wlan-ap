From f7a4d8a33e77447e4a87d58de37bc5a04134b18b Mon Sep 17 00:00:00 2001
From: Kathiravan Thirumoorthy <quic_kathirav@quicinc.com>
Date: Mon, 20 Nov 2023 17:10:01 +0530
Subject: [PATCH] watchdog: qcom: updated the max timeout value

Currently, the following calculation (max_timeout = 0x10000000 / clk_rate) is
used to derive the max WDT timeout value, however this is not valid for
all the platforms. Specifically from IPQ40xx, bark and bite time field
length is only 20bits, which can hold max upto 32 seconds or 31 seconds,
if sleep clock is 32KHz or 32.768KHz respectively.

With the above calculation, max_timeout is 8388s, which is incorrect for
SoCs like IPQ95xx and IPQ53xx.

root@OpenWrt:/# cat
/sys/devices/platform/soc@0/b017000.watchdog/watchdog/watchdog0/max_timeout
8388

Lets add another variable called max_tick_count into the device data,
which defines max counter value of the WDT controller. Using this,
max-timeout will be calculated in runtime for various WDT contorllers.
With this change, we get the proper max_timeout as below

root@OpenWrt:/# cat
/sys/devices/platform/soc@0/b017000.watchdog/watchdog/watchdog0/max_timeout
32

Change-Id: Ib3b58a51cd48bd69f49dc9b489229682661c58cb
Signed-off-by: Kathiravan Thirumoorthy <quic_kathirav@quicinc.com>
---
 drivers/watchdog/qcom-wdt.c | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/drivers/watchdog/qcom-wdt.c b/drivers/watchdog/qcom-wdt.c
index 0d2209c5eaca..46aff555c594 100644
--- a/drivers/watchdog/qcom-wdt.c
+++ b/drivers/watchdog/qcom-wdt.c
@@ -42,6 +42,7 @@ static const u32 reg_offset_data_kpss[] = {
 struct qcom_wdt_match_data {
 	const u32 *offset;
 	bool pretimeout;
+	u32 max_tick_count;
 };
 
 struct qcom_wdt {
@@ -183,11 +184,13 @@ static void qcom_clk_disable_unprepare(void *data)
 static const struct qcom_wdt_match_data match_data_apcs_tmr = {
 	.offset = reg_offset_data_apcs_tmr,
 	.pretimeout = false,
+	.max_tick_count = 0x10000000U,
 };
 
 static const struct qcom_wdt_match_data match_data_kpss = {
 	.offset = reg_offset_data_kpss,
 	.pretimeout = true,
+	.max_tick_count = 0xFFFFFU,
 };
 
 static int qcom_wdt_probe(struct platform_device *pdev)
@@ -251,7 +254,7 @@ static int qcom_wdt_probe(struct platform_device *pdev)
 	 */
 	wdt->rate = clk_get_rate(clk);
 	if (wdt->rate == 0 ||
-	    wdt->rate > 0x10000000U) {
+	    wdt->rate > data->max_tick_count) {
 		dev_err(dev, "invalid clock rate\n");
 		return -EINVAL;
 	}
@@ -275,7 +278,7 @@ static int qcom_wdt_probe(struct platform_device *pdev)
 
 	wdt->wdd.ops = &qcom_wdt_ops;
 	wdt->wdd.min_timeout = 1;
-	wdt->wdd.max_timeout = 0x10000000U / wdt->rate;
+	wdt->wdd.max_timeout = data->max_tick_count / wdt->rate;
 	wdt->wdd.parent = dev;
 	wdt->layout = data->offset;
 
@@ -283,11 +286,11 @@ static int qcom_wdt_probe(struct platform_device *pdev)
 		wdt->wdd.bootstatus = WDIOF_CARDRESET;
 
 	/*
-	 * If 'timeout-sec' unspecified in devicetree, assume a 30 second
-	 * default, unless the max timeout is less than 30 seconds, then use
+	 * If 'timeout-sec' unspecified in devicetree, assume a 32 second
+	 * default, unless the max timeout is less than 32 seconds, then use
 	 * the max instead.
 	 */
-	wdt->wdd.timeout = min(wdt->wdd.max_timeout, 30U);
+	wdt->wdd.timeout = min(wdt->wdd.max_timeout, 32U);
 	watchdog_init_timeout(&wdt->wdd, 0, dev);
 
 	/*
-- 
2.34.1

