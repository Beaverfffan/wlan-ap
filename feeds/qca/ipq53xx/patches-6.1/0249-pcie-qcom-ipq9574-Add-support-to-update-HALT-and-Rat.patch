From de264c4667374a4f144f935e5c373a13d9989b47 Mon Sep 17 00:00:00 2001
From: Devi Priya <quic_devipriy@quicinc.com>
Date: Tue, 16 May 2023 10:11:55 +0530
Subject: [PATCH 249/281] pcie: qcom: ipq9574: Add support to update HALT and
 Rate Adapter registers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Using "axi-halt-val" from pcie node in DTSI, we can update the
PARF_AXI_MSTR_WR_ADDR_HALT register. This register helps to
update the halt window size and currently increased to 1GB.

Using "aggr_noc" in pcie memory reg, we can update the
AGGR_NOC_Dtp_Link_req_xm_pcie_1lane_I_rateadapt_Rate_Low register with
the value calculated as below:

/* RATEADAPT_VAL = 256 / ((NOC frequency / PCIe AXI frequency) - 1) */
/* RATEADAPT_VAL = 256 / ((342M / 240M) - 1) â‰ˆ 256 / (1.5 -1) = 512 */

This register is configured with a calculated value which can prevent
wait cycles when connecting a low-bandwidth relatively narrow channel
to a high-bandwidth relatively wide channel.

Change-Id: I3f15752105d63ade47fefc869f89b786fb504b2c
Signed-off-by: Devi Priya <quic_devipriy@quicinc.com>
---
 drivers/pci/controller/dwc/pcie-qcom.c | 30 ++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/drivers/pci/controller/dwc/pcie-qcom.c b/drivers/pci/controller/dwc/pcie-qcom.c
index 7abdfe61b5cd..dc67d0697bac 100644
--- a/drivers/pci/controller/dwc/pcie-qcom.c
+++ b/drivers/pci/controller/dwc/pcie-qcom.c
@@ -61,6 +61,7 @@
 
 #define PCIE20_PARF_AXI_MSTR_WR_ADDR_HALT	0x178
 #define PCIE20_PARF_AXI_MSTR_WR_ADDR_HALT_V2	0x1A8
+#define PCIE20_PARF_AXI_MSTR_WR_ADDR_HALT_V2_MASK 0x1F
 #define PCIE20_PARF_LTSSM			0x1B0
 #define PCIE20_PARF_SID_OFFSET			0x234
 #define PCIE20_PARF_BDF_TRANSLATE_CFG		0x24C
@@ -113,6 +114,10 @@
 #define PCIE20_v3_PARF_SLV_ADDR_SPACE_SIZE	0x358
 #define SLV_ADDR_SPACE_SZ			0x10000000
 
+/* RATEADAPT_VAL = 256 / ((NOC frequency / PCIe AXI frequency) - 1) */
+/* RATEADAPT_VAL = 256 / ((342M / 240M) - 1) */
+#define AGGR_NOC_PCIE_1LANE_RATEADAPT_VAL	0x200
+
 #define PCIE20_LNK_CONTROL2_LINK_STATUS2	0xa0
 
 #define DEVICE_TYPE_RC				0x4
@@ -227,10 +232,12 @@ struct qcom_pcie {
 	struct dw_pcie *pci;
 	void __iomem *parf;			/* DT parf */
 	void __iomem *elbi;			/* DT elbi */
+	void __iomem *aggr_noc;
 	union qcom_pcie_resources res;
 	struct phy *phy;
 	struct gpio_desc *reset;
 	const struct qcom_pcie_cfg *cfg;
+	uint32_t axi_wr_addr_halt;
 };
 
 #define to_qcom_pcie(x)		dev_get_drvdata((x)->dev)
@@ -1495,6 +1502,16 @@ static int qcom_pcie_post_init_1_27_0(struct qcom_pcie *pcie)
 
 	writel(0, pcie->parf + PCIE20_PARF_Q2A_FLUSH);
 
+	if (pcie->axi_wr_addr_halt) {
+		val = readl(pcie->parf + PCIE20_PARF_AXI_MSTR_WR_ADDR_HALT_V2);
+		val &= ~PCIE20_PARF_AXI_MSTR_WR_ADDR_HALT_V2_MASK;
+		writel(val | pcie->axi_wr_addr_halt,
+			pcie->parf + PCIE20_PARF_AXI_MSTR_WR_ADDR_HALT_V2);
+	}
+
+	if (pcie->aggr_noc != NULL && !IS_ERR(pcie->aggr_noc))
+		writel(AGGR_NOC_PCIE_1LANE_RATEADAPT_VAL, pcie->aggr_noc);
+
 	dw_pcie_dbi_ro_wr_en(pci);
 	writel(PCIE_CAP_SLOT_VAL, pci->dbi_base + offset + PCI_EXP_SLTCAP);
 
@@ -1776,6 +1793,7 @@ static int qcom_pcie_probe(struct platform_device *pdev)
 	struct qcom_pcie *pcie;
 	const struct qcom_pcie_cfg *pcie_cfg;
 	int ret;
+	struct resource *res;
 
 	pcie_cfg = of_device_get_match_data(dev);
 	if (!pcie_cfg || !pcie_cfg->ops) {
@@ -1822,6 +1840,18 @@ static int qcom_pcie_probe(struct platform_device *pdev)
 		goto err_pm_runtime_put;
 	}
 
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "aggr_noc");
+	if (res != NULL) {
+		pcie->aggr_noc = devm_ioremap_resource(dev, res);
+		if (IS_ERR(pcie->aggr_noc)) {
+			ret = PTR_ERR(pcie->aggr_noc);
+			goto err_pm_runtime_put;
+		}
+	}
+
+	of_property_read_u32(pdev->dev.of_node, "axi-halt-val",
+				&pcie->axi_wr_addr_halt);
+
 	pcie->phy = devm_phy_optional_get(dev, "pciephy");
 	if (IS_ERR(pcie->phy)) {
 		ret = PTR_ERR(pcie->phy);
-- 
2.17.1

