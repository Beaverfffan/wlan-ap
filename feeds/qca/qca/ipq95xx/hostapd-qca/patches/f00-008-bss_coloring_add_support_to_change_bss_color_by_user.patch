From baf3a982caee59ec08602a9e981d6742abc4fc7b Mon Sep 17 00:00:00 2001
From: Lavanya Suresh <lavaks@codeaurora.org>
Date: Mon, 28 Sep 2020 23:21:43 +0530
Subject: [PATCH] hostapd: Add support to change bss color by user


hostpad_cli command is added to change bss color in runtime,
for testing purpose. hostapd_cli status can be used to check
updated color.

Usage: hostapd_cli color_change <color>

Signed-off-by: Lavanya Suresh <lavaks@codeaurora.org>
---
 hostapd/ctrl_iface.c   | 45 +++++++++++++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c  | 23 +++++++++++++++++++++++
 src/ap/ctrl_iface_ap.c |  6 ++++--
 src/ap/hostapd.c       |  4 ++--
 src/ap/hostapd.h       |  3 ++-
 5 files changed, 76 insertions(+), 5 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 0216821..f180376 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2674,6 +2674,87 @@ static int hostapd_ctrl_check_freq_params(struct hostapd_freq_params *params,
 }
 #endif /* NEED_AP_MLME */
 
+static int hostapd_ctrl_iface_color_change(struct hostapd_iface *iface,
+                                          char *pos)
+{
+#ifdef NEED_AP_MLME
+	struct cca_settings settings;
+	struct hostapd_data *hapd = iface->bss[0];
+	int ret, color;
+	unsigned int i;
+	char *end;
+
+	os_memset(&settings, 0, sizeof(settings));
+	color = strtol(pos, &end, 10);
+	if (pos == end || color < 0 || color > 63) {
+		wpa_printf(MSG_ERROR, "colorchange: invalid color provided");
+		return -1;
+	}
+
+	/* color value is expected to be [1-63]. If 0 comes, assumption is
+	 * user wants to disable the color. In this case no need to do CCA,
+	 * just changing beacon is sufficient */
+	if (color == 0) {
+		if (iface->conf->he_op.he_bss_color_disabled) {
+			wpa_printf(MSG_ERROR, "colorchange: color is already disabled");
+			return -1;
+		}
+
+		iface->conf->he_op.he_bss_color_disabled = 1;
+
+		for (i = 0; i < iface->num_bss; i++)
+			ieee802_11_set_beacon(iface->bss[i]);
+
+		return 0;
+	}
+
+	if (color == iface->conf->he_op.he_bss_color) {
+		if (!iface->conf->he_op.he_bss_color_disabled) {
+			wpa_printf(MSG_ERROR, "colorchange: provided color is already set");
+			return -1;
+		}
+
+		iface->conf->he_op.he_bss_color_disabled = 0;
+
+		for (i = 0; i < iface->num_bss; i++)
+			ieee802_11_set_beacon(iface->bss[i]);
+
+		return 0;
+	}
+
+	if (hapd->cca_in_progress) {
+		wpa_printf(MSG_ERROR, "colorchange: cca is in progress, so color change is now allowed");
+		return -1;
+	}
+
+	iface->conf->he_op.he_bss_color_disabled = 0;
+
+	for (i = 0; i < iface->num_bss; i++) {
+		struct hostapd_data *bss = iface->bss[i];
+		hostapd_cleanup_cca_params(bss);
+		bss->cca_color = color;
+		bss->cca_count = 10;
+
+		if (hostapd_fill_cca_settings(bss, &settings)) {
+			wpa_printf(MSG_DEBUG, "hostapd fill cca settings failed for color: %d\n", color);
+			hostapd_cleanup_cca_params(bss);
+			continue;
+		}
+
+		wpa_printf(MSG_DEBUG, "Setting user selected color: %d\n", color);
+		ret = hostapd_drv_switch_color(bss, &settings);
+		free_beacon_data(&settings.beacon_cca);
+		free_beacon_data(&settings.beacon_after);
+
+		if (ret)
+			 hostapd_cleanup_cca_params(bss);
+	}
+
+        return 0;
+#else /* NEED_AP_MLME */
+        return -1;
+#endif /* NEED_AP_MLME */
+}
 
 static int hostapd_ctrl_iface_chan_switch(struct hostapd_iface *iface,
 					  char *pos)
@@ -3718,6 +3799,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "CHAN_SWITCH ", 12) == 0) {
 		if (hostapd_ctrl_iface_chan_switch(hapd->iface, buf + 12))
 			reply_len = -1;
+	 } else if (os_strncmp(buf, "COLOR_CHANGE ", 12) == 0) {
+		 if (hostapd_ctrl_iface_color_change(hapd->iface, buf + 12))
+			 reply_len = -1;
 	} else if (os_strncmp(buf, "VENDOR ", 7) == 0) {
 		reply_len = hostapd_ctrl_iface_vendor(hapd, buf + 7, reply,
 						      reply_size);
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index ef33968..dd898b7 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1163,6 +1163,27 @@ static int hostapd_cli_cmd_fst(struct wpa_ctrl *ctrl, int argc, char *argv[])
 }
 #endif /* CONFIG_FST */
 
+static int hostapd_cli_cmd_color_change(struct wpa_ctrl *ctrl,
+                                        int argc, char *argv[])
+{
+	char cmd[256];
+	int res;
+
+	if (argc < 1) {
+		printf("Invalid color_change command: no argument given \n"
+		       "usage: <color> \n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "COLOR_CHANGE %s",
+			   argv[0]);
+	if (os_snprintf_error(sizeof(cmd), res)) {
+		printf("Too long CHAN_CHANGE command\n");
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
+}
 
 static int hostapd_cli_cmd_chan_switch(struct wpa_ctrl *ctrl,
 				       int argc, char *argv[])
@@ -1676,6 +1697,9 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	  "<cs_count> <freq> [sec_channel_offset=] [center_freq1=]\n"
 	  "  [center_freq2=] [bandwidth=] [blocktx] [ht|vht]\n"
 	  "  = initiate channel switch announcement" },
+	 { "color_change", hostapd_cli_cmd_color_change, NULL,
+	   "<color> = initiate bss color change to set user color if value between 1-63\n"
+	   "Value 0 will disable the color\n"},
 	{ "hs20_wnm_notif", hostapd_cli_cmd_hs20_wnm_notif, NULL,
 	  "<addr> <url>\n"
 	  "  = send WNM-Notification Subscription Remediation Request" },
diff --git a/src/ap/ctrl_iface_ap.c b/src/ap/ctrl_iface_ap.c
index 63a0ee8..7ca22f9 100644
--- a/src/ap/ctrl_iface_ap.c
+++ b/src/ap/ctrl_iface_ap.c
@@ -969,10 +969,14 @@ int hostapd_ctrl_iface_status(struct hostapd_data *hapd, char *buf,
 		ret = os_snprintf(buf + len, buflen - len,
 				  "he_oper_chwidth=%d\n"
 				  "he_oper_centr_freq_seg0_idx=%d\n"
-				  "he_oper_centr_freq_seg1_idx=%d\n",
+				   "he_oper_centr_freq_seg1_idx=%d\n"
+				   "he_bss_color=%d (%s)\n",
 				  iface->conf->he_oper_chwidth,
 				  iface->conf->he_oper_centr_freq_seg0_idx,
-				  iface->conf->he_oper_centr_freq_seg1_idx);
+				   iface->conf->he_oper_centr_freq_seg1_idx,
+				   iface->conf->he_op.he_bss_color,
+				   iface->conf->he_op.he_bss_color_disabled ?
+					"disabled" : "enabled");
 		if (os_snprintf_error(buflen - len, ret))
 			return len;
 		len += ret;
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 5dd052c..e90bfc3 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -3740,7 +3740,7 @@ int hostapd_csa_in_progress(struct hostapd_iface *iface)
 
 #ifdef NEED_AP_MLME
 
-static void free_beacon_data(struct beacon_data *beacon)
+void free_beacon_data(struct beacon_data *beacon)
 {
 	os_free(beacon->head);
 	beacon->head = NULL;
@@ -4177,7 +4177,7 @@ void hostapd_cleanup_cca_params(struct hostapd_data *hapd)
 }
 
 
-static int hostapd_fill_cca_settings(struct hostapd_data *hapd,
+int hostapd_fill_cca_settings(struct hostapd_data *hapd,
 				     struct cca_settings *settings)
 {
 	struct hostapd_iface *iface = hapd->iface;
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 09bf8af..b21f4bd 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -736,10 +736,12 @@ void hostapd_cleanup_cs_params(struct hostapd_data *hapd);
 void hostapd_periodic_iface(struct hostapd_iface *iface);
 int hostapd_owe_trans_get_info(struct hostapd_data *hapd);
 void hostapd_ocv_check_csa_sa_query(void *eloop_ctx, void *timeout_ctx);
+void free_beacon_data(struct beacon_data *beacon);
 int hostapd_check_max_sta(struct hostapd_data *hapd);
 
 void hostapd_switch_color(struct hostapd_data *hapd, u64 bitmap);
 void hostapd_cleanup_cca_params(struct hostapd_data *hapd);
+int hostapd_fill_cca_settings(struct hostapd_data *hapd, struct cca_settings *settings);
 
 /* utils.c */
 int hostapd_register_probereq_cb(struct hostapd_data *hapd,
