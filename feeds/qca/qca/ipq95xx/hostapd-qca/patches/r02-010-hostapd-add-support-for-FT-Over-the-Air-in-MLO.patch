From b10b4be033a5f2226a386fe52bb78df679c31ce0 Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Wed, 1 Nov 2023 21:42:25 +0530
Subject: [PATCH 1/2] hostapd: add support for FT Over the Air in MLO

Following changes have been added to bring in FT OTA support
for ML Associations,

Add PMKID in Link KDEs of EAPOL message 3/4, these KDE's will
carry RSNE(along with PMKID) and RSNXE per link for FT Initial
association.

Add MLO GTK/IGTK/BIGTK Subelements to FT reassoc response to
carry Group key information of all links to MLD STA during
FT Reassociation.

Use Station(as S0/1 Keyholder) and AP's MLD address
for deriving/storing ft pmk for an ML association.

For MLO, RSNIE/XE of all associated links has to be protected
in FT reassoc response, as well as link address of AP and STA
in increasing order of link id has to be included in MIC
calculation.
Add change to pass associated link addresses and link RSNIE
and RSNXE (in increasing order of link id) and to MIC
calculation APIs.
Use ML address for FT RRB message header if its an
ML association.
Add changes to share ft pmk cache across links of an MLD, use
refcount and deinit the cache only when all links associated
with the cache has deinited it.
Fragment FTIE if its length exceeds 255.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 src/ap/wpa_auth.c       |  93 ++++----
 src/ap/wpa_auth_ft.c    | 482 ++++++++++++++++++++++++++++++++++++----
 src/ap/wpa_auth_i.h     |  19 ++
 src/common/wpa_common.c |  57 ++++-
 src/common/wpa_common.h |  21 ++
 src/rsn_supp/wpa_ft.c   |   4 +-
 wlantest/rx_mgmt.c      |   4 +-
 7 files changed, 588 insertions(+), 92 deletions(-)

diff --git a/src/ap/wpa_auth.c b/src/ap/wpa_auth.c
index 688dad3..5a1f567 100644
--- a/src/ap/wpa_auth.c
+++ b/src/ap/wpa_auth.c
@@ -83,25 +83,6 @@ static const int dot11RSNAConfigPMKReauthThreshold = 70;
 static const int dot11RSNAConfigSATimeout = 60;
 
 
-static const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm)
-{
-#ifdef CONFIG_IEEE80211BE
-	if (sm->mld_assoc_link_id >= 0)
-		return sm->own_mld_addr;
-#endif /* CONFIG_IEEE80211BE */
-	return sm->wpa_auth->addr;
-}
-
-
-static const u8 * wpa_auth_get_spa(const struct wpa_state_machine *sm)
-{
-#ifdef CONFIG_IEEE80211BE
-	if (sm->mld_assoc_link_id >= 0)
-		return sm->peer_mld_addr;
-#endif /* CONFIG_IEEE80211BE */
-	return sm->addr;
-}
-
 #define for_each_sm_auth(sm, link_id) \
 	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) \
 		if (sm->mld_links[link_id].valid && \
@@ -708,14 +689,22 @@ struct wpa_authenticator * wpa_init(const u8 *addr,
 	}
 
 #ifdef CONFIG_IEEE80211R_AP
-	wpa_auth->ft_pmk_cache = wpa_ft_pmk_cache_init();
-	if (!wpa_auth->ft_pmk_cache) {
-		wpa_printf(MSG_ERROR, "FT PMK cache initialization failed.");
-		os_free(wpa_auth->group);
-		os_free(wpa_auth->wpa_ie);
-		pmksa_cache_auth_deinit(wpa_auth->pmksa);
-		os_free(wpa_auth);
-		return NULL;
+	/* if MLD share FT PMK cache across link BSS
+	 * refcount is used to check and free the cache during link BSS's deinit.
+	 */
+	if (!conf->first_link_auth) {
+		wpa_auth->ft_pmk_cache = wpa_ft_pmk_cache_init();
+		if (!wpa_auth->ft_pmk_cache) {
+			wpa_printf(MSG_ERROR, "FT PMK cache initialization failed.");
+			os_free(wpa_auth->group);
+			os_free(wpa_auth->wpa_ie);
+			pmksa_cache_auth_deinit(wpa_auth->pmksa);
+			os_free(wpa_auth);
+			return NULL;
+		}
+	} else {
+		wpa_auth->ft_pmk_cache = conf->first_link_auth->ft_pmk_cache;
+		wpa_ft_pmk_cache_inc_refcount(wpa_auth->ft_pmk_cache);
 	}
 #endif /* CONFIG_IEEE80211R_AP */
 
@@ -4152,6 +4141,10 @@ static size_t wpa_auth_ml_kdes_len(struct wpa_state_machine *sm)
 		if (!sm->mld_links[link_id].valid)
 			continue;
 
+#ifdef CONFIG_IEEE80211R_AP
+		if (wpa_key_mgmt_ft(sm->wpa_key_mgmt))
+			kde_len += 2 + PMKID_LEN; /* PMKR1Name into RSN IE */
+#endif
 		kde_len += 2 + RSN_SELECTOR_LEN + 1 + ETH_ALEN +
 			sm->mld_links[link_id].rsne_len +
 			sm->mld_links[link_id].rsnxe_len;
@@ -4178,6 +4171,8 @@ static u8 * wpa_auth_ml_kdes(struct wpa_state_machine *sm, u8 *pos)
 			  sm->own_mld_addr, ETH_ALEN, NULL, 0);
 
 	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+		u8 *rsne_start;
+
 		if (!sm->mld_links[link_id].valid)
 			continue;
 
@@ -4206,12 +4201,27 @@ static u8 * wpa_auth_ml_kdes(struct wpa_state_machine *sm, u8 *pos)
 		os_memcpy(pos, sm->mld_links[link_id].own_addr, ETH_ALEN);
 		pos += ETH_ALEN;
 
+		rsne_start = pos;
 		if (sm->mld_links[link_id].rsne_len) {
 			os_memcpy(pos, sm->mld_links[link_id].rsne,
 				  sm->mld_links[link_id].rsne_len);
 			pos += sm->mld_links[link_id].rsne_len;
 		}
 
+#ifdef CONFIG_IEEE80211R_AP
+		if (wpa_key_mgmt_ft(sm->wpa_key_mgmt)) {
+			int res;
+			size_t e_len = pos - rsne_start;
+
+			res = wpa_insert_pmkid(rsne_start, &e_len, sm->pmk_r1_name);
+			if (res < 0) {
+				wpa_printf(MSG_ERROR,
+					   "FT: Failed to insert PMKR1Name into RSN IE in EAPOL-Key data");
+			}
+			pos = rsne_start + e_len;
+		}
+#endif /* CONFIG_IEEE80211R_AP */
+
 		if (sm->mld_links[link_id].rsnxe_len) {
 			os_memcpy(pos, sm->mld_links[link_id].rsnxe,
 				  sm->mld_links[link_id].rsnxe_len);
@@ -4230,7 +4240,7 @@ static u8 * wpa_auth_ml_kdes(struct wpa_state_machine *sm, u8 *pos)
 SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 {
 	u8 rsc[WPA_KEY_RSC_LEN], *_rsc, *gtk, *kde = NULL, *pos, stub_gtk[32];
-	size_t gtk_len, kde_len = 0, wpa_ie_len;
+	size_t gtk_len, kde_len = 0, wpa_ie_len = 0;
 	struct wpa_group *gsm = sm->group;
 	u8 *wpa_ie;
 	int secure, gtkidx, encr = 0;
@@ -4263,17 +4273,19 @@ SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 	os_memset(rsc, 0, WPA_KEY_RSC_LEN);
 	wpa_auth_get_seqnum(sm->wpa_auth, NULL, gsm->GN, rsc);
 	/* If FT is used, wpa_auth->wpa_ie includes both RSNIE and MDIE */
-	wpa_ie = sm->wpa_auth->wpa_ie;
-	wpa_ie_len = sm->wpa_auth->wpa_ie_len;
-	if (sm->wpa == WPA_VERSION_WPA && (conf->wpa & WPA_PROTO_RSN) &&
-	    wpa_ie_len > wpa_ie[1] + 2U && wpa_ie[0] == WLAN_EID_RSN) {
-		/* WPA-only STA, remove RSN IE and possible MDIE */
-		wpa_ie = wpa_ie + wpa_ie[1] + 2;
-		if (wpa_ie[0] == WLAN_EID_RSNX)
-			wpa_ie = wpa_ie + wpa_ie[1] + 2;
-		if (wpa_ie[0] == WLAN_EID_MOBILITY_DOMAIN)
+	if (!is_mld) {
+		wpa_ie = sm->wpa_auth->wpa_ie;
+		wpa_ie_len = sm->wpa_auth->wpa_ie_len;
+		if (sm->wpa == WPA_VERSION_WPA && (conf->wpa & WPA_PROTO_RSN) &&
+		    wpa_ie_len > wpa_ie[1] + 2U && wpa_ie[0] == WLAN_EID_RSN) {
+			/* WPA-only STA, remove RSN IE and possible MDIE */
 			wpa_ie = wpa_ie + wpa_ie[1] + 2;
-		wpa_ie_len = wpa_ie[1] + 2;
+			if (wpa_ie[0] == WLAN_EID_RSNX)
+				wpa_ie = wpa_ie + wpa_ie[1] + 2;
+			if (wpa_ie[0] == WLAN_EID_MOBILITY_DOMAIN)
+				wpa_ie = wpa_ie + wpa_ie[1] + 2;
+			wpa_ie_len = wpa_ie[1] + 2;
+		}
 	}
 #ifdef CONFIG_TESTING_OPTIONS
 	if (conf->rsne_override_eapol_set) {
@@ -4374,7 +4386,8 @@ SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 		kde_len += 2 + RSN_SELECTOR_LEN + 2 + gtk_len;
 #ifdef CONFIG_IEEE80211R_AP
 	if (wpa_key_mgmt_ft(sm->wpa_key_mgmt)) {
-		kde_len += 2 + PMKID_LEN; /* PMKR1Name into RSN IE */
+		if(!is_mld)
+			kde_len += 2 + PMKID_LEN; /* PMKR1Name into RSN IE */
 		kde_len += 300; /* FTIE + 2 * TIE */
 	}
 #endif /* CONFIG_IEEE80211R_AP */
@@ -4403,7 +4416,7 @@ SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 		pos += wpa_ie_len;
 	}
 #ifdef CONFIG_IEEE80211R_AP
-	if (wpa_key_mgmt_ft(sm->wpa_key_mgmt)) {
+	if (!is_mld && wpa_key_mgmt_ft(sm->wpa_key_mgmt)) {
 		int res;
 		size_t elen;
 
diff --git a/src/ap/wpa_auth_ft.c b/src/ap/wpa_auth_ft.c
index 2402ad9..c764812 100644
--- a/src/ap/wpa_auth_ft.c
+++ b/src/ap/wpa_auth_ft.c
@@ -818,6 +818,7 @@ int wpa_write_ftie(struct wpa_auth_config *conf, int key_mgmt, size_t key_len,
 	u8 *pos = buf, *ielen;
 	size_t hdrlen;
 	u16 mic_control = rsnxe_used ? FTE_MIC_CTRL_RSNXE_USED : 0;
+	size_t curr_len;
 
 	if (key_mgmt == WPA_KEY_MGMT_FT_SAE_EXT_KEY &&
 	    key_len == SHA256_MAC_LEN)
@@ -891,13 +892,44 @@ int wpa_write_ftie(struct wpa_auth_config *conf, int key_mgmt, size_t key_len,
 		pos += r0kh_id_len;
 	}
 
-	if (subelem) {
+	curr_len = pos - buf - 2;
+	if (!subelem) {
+		*ielen = curr_len;
+		return pos - buf;
+	}
+	/* Fragment FTIE if length is exceeding 255. */
+	if ((curr_len + subelem_len) > 255) {
+		size_t frag_len;
+
+		*ielen = 255;
+		os_memcpy(pos, subelem, 255 - curr_len);
+		subelem += (255 - curr_len);
+		subelem_len -= (255 - curr_len);
+		pos += (255 - curr_len);
+		curr_len = pos - buf;
+		do {
+			frag_len = subelem_len > 255 ? 255 : subelem_len;
+			/* Make sure we still have space in input buffer
+			 * for current fragment. (header (2) + content)
+			 */
+			if (curr_len + (frag_len + 2) > len) {
+				wpa_printf(MSG_DEBUG, "FT: No Space left in input buffer for FTIE fragment");
+				return -1;
+			}
+			*pos++ = WLAN_EID_FRAGMENT;
+			*pos++ = frag_len;
+			os_memcpy(pos, subelem, frag_len);
+			pos += frag_len;
+			subelem += frag_len;
+			subelem_len -= frag_len;
+			curr_len = pos - buf;
+		} while (subelem_len);
+	} else {
 		os_memcpy(pos, subelem, subelem_len);
 		pos += subelem_len;
+		*ielen = pos - buf - 2;
 	}
 
-	*ielen = pos - buf - 2;
-
 	return pos - buf;
 }
 
@@ -1237,6 +1269,7 @@ struct wpa_ft_pmk_r1_sa {
 struct wpa_ft_pmk_cache {
 	struct dl_list pmk_r0; /* struct wpa_ft_pmk_r0_sa */
 	struct dl_list pmk_r1; /* struct wpa_ft_pmk_r1_sa */
+	unsigned int ref_count;
 };
 
 
@@ -1321,6 +1354,11 @@ static void wpa_ft_expire_pmk_r1(void *eloop_ctx, void *timeout_ctx)
 	wpa_ft_free_pmk_r1(r1);
 }
 
+void wpa_ft_pmk_cache_inc_refcount(struct wpa_ft_pmk_cache *cache)
+{
+	if (cache)
+		cache->ref_count++;
+}
 
 struct wpa_ft_pmk_cache * wpa_ft_pmk_cache_init(void)
 {
@@ -1330,6 +1368,7 @@ struct wpa_ft_pmk_cache * wpa_ft_pmk_cache_init(void)
 	if (cache) {
 		dl_list_init(&cache->pmk_r0);
 		dl_list_init(&cache->pmk_r1);
+		cache->ref_count++;
 	}
 
 	return cache;
@@ -1341,6 +1380,9 @@ void wpa_ft_pmk_cache_deinit(struct wpa_ft_pmk_cache *cache)
 	struct wpa_ft_pmk_r0_sa *r0, *r0prev;
 	struct wpa_ft_pmk_r1_sa *r1, *r1prev;
 
+	cache->ref_count--;
+	if (cache->ref_count)
+		return;
 	dl_list_for_each_safe(r0, r0prev, &cache->pmk_r0,
 			      struct wpa_ft_pmk_r0_sa, list)
 		wpa_ft_free_pmk_r0(r0);
@@ -1977,7 +2019,7 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 		{ .type = FT_RRB_PMK_R0_NAME, .len = WPA_PMK_NAME_LEN,
 		  .data = pmk_r0_name },
 		{ .type = FT_RRB_S1KH_ID, .len = ETH_ALEN,
-		  .data = sm->addr },
+		  .data = wpa_auth_get_spa(sm) },
 		{ .type = FT_RRB_LAST_EMPTY, .len = 0, .data = NULL },
 	};
 	struct tlv_list req_auth[] = {
@@ -2151,15 +2193,15 @@ int wpa_auth_derive_ptk_ft(struct wpa_state_machine *sm, struct wpa_ptk *ptk,
 	}
 
 	if (wpa_derive_pmk_r0(mpmk, mpmk_len, ssid, ssid_len, mdid,
-			      r0kh, r0kh_len, sm->addr,
+			      r0kh, r0kh_len, wpa_auth_get_spa(sm),
 			      pmk_r0, pmk_r0_name,
 			      sm->wpa_key_mgmt) < 0 ||
-	    wpa_derive_pmk_r1(pmk_r0, pmk_r0_len, pmk_r0_name, r1kh, sm->addr,
+	    wpa_derive_pmk_r1(pmk_r0, pmk_r0_len, pmk_r0_name, r1kh, wpa_auth_get_spa(sm),
 			      pmk_r1, sm->pmk_r1_name) < 0)
 		return -1;
 
 	return wpa_pmk_r1_to_ptk(pmk_r1, pmk_r1_len, sm->SNonce, sm->ANonce,
-				 sm->addr, sm->wpa_auth->addr, sm->pmk_r1_name,
+				 wpa_auth_get_spa(sm), wpa_auth_get_aa(sm), sm->pmk_r1_name,
 				 ptk, ptk_name, sm->wpa_key_mgmt, sm->pairwise,
 				 kdk_len);
 }
@@ -2191,12 +2233,12 @@ void wpa_auth_ft_store_keys(struct wpa_state_machine *sm, const u8 *pmk_r0,
 	session_timeout = wpa_ft_get_session_timeout(sm->wpa_auth, sm->addr);
 
 
-	wpa_ft_store_pmk_r0(sm->wpa_auth, sm->addr, pmk_r0, key_len,
+	wpa_ft_store_pmk_r0(sm->wpa_auth, wpa_auth_get_spa(sm), pmk_r0, key_len,
 			    pmk_r0_name,
 			    sm->pairwise, &vlan, expires_in,
 			    session_timeout, identity, identity_len,
 			    radius_cui, radius_cui_len);
-	wpa_ft_store_pmk_r1(sm->wpa_auth, sm->addr, pmk_r1, key_len,
+	wpa_ft_store_pmk_r1(sm->wpa_auth, wpa_auth_get_spa(sm), pmk_r1, key_len,
 			    sm->pmk_r1_name, sm->pairwise, &vlan,
 			    expires_in, session_timeout, identity,
 			    identity_len, radius_cui, radius_cui_len);
@@ -2211,6 +2253,246 @@ static inline int wpa_auth_get_seqnum(struct wpa_authenticator *wpa_auth,
 	return wpa_auth->cb->get_seqnum(wpa_auth->cb_ctx, addr, idx, seq);
 }
 
+#ifdef CONFIG_IEEE80211BE
+static int wpa_add_per_link_ft_mlo_gtk_subelem(struct wpa_authenticator *wpa_auth,
+					       u8 *pos, u8 link_id,
+					       struct wpa_state_machine *sm)
+{
+	u8 *subelem = pos;
+	struct wpa_group *gsm = wpa_auth->group;
+	size_t subelem_len, gtk_len, kek_len;
+	const u8 *gtk, *kek;
+
+	if (!gsm)
+		return -1;
+
+	if (wpa_key_mgmt_fils(sm->wpa_key_mgmt)) {
+		kek = sm->PTK.kek2;
+		kek_len = sm->PTK.kek2_len;
+	} else {
+		kek = sm->PTK.kek;
+		kek_len = sm->PTK.kek_len;
+	}
+
+	gtk_len = gsm->GTK_len;
+
+	gtk = gsm->GTK[gsm->GN - 1];
+
+	/*
+	 * Sub-elem ID[1] | Length[1] | Key Info[2] | LINK INFO[1] | Key Length[1] |
+	 * RSC[8] | Key[5..32].
+	 */
+	subelem_len = 14 + gtk_len + 8;
+	subelem[0] = FTIE_SUBELEM_MLO_GTK;
+	subelem[1] = subelem_len - 2;
+	/* Key ID in B0-B1 of Key Info */
+	WPA_PUT_LE16(&subelem[2], gsm->GN & 0x03);
+	subelem[4] = link_id;
+	subelem[5] = gtk_len;
+	wpa_auth_get_seqnum(wpa_auth, NULL, gsm->GN, subelem + 6);
+	if (aes_wrap(kek, kek_len, gtk_len / 8, gtk, subelem + 14)) {
+		wpa_printf(MSG_DEBUG,
+			   "FT: GTK subelem encryption failed: kek_len=%d",
+			   (int) kek_len);
+		return -1;
+	}
+	*pos += subelem_len;
+	return 0;
+}
+
+static int wpa_add_per_link_ft_mlo_igtk_subelem(struct wpa_authenticator *wpa_auth,
+						u8 *pos, u8 link_id,
+						struct wpa_state_machine *sm)
+{
+	u8 *subelem = pos;
+	struct wpa_group *gsm = wpa_auth->group;
+	size_t subelem_len, igtk_len, kek_len;
+	const u8 *igtk, *kek;
+
+	if (!gsm)
+		return -1;
+
+	if (wpa_key_mgmt_fils(sm->wpa_key_mgmt)) {
+		kek = sm->PTK.kek2;
+		kek_len = sm->PTK.kek2_len;
+	} else {
+		kek = sm->PTK.kek;
+		kek_len = sm->PTK.kek_len;
+	}
+
+	igtk_len = wpa_cipher_key_len(wpa_auth->conf.group_mgmt_cipher);
+
+	igtk = gsm->IGTK[gsm->GN_igtk - 4];
+
+	/* Sub-elem ID[1] | Length[1] | KeyID[2] | IPN[6] | LINK INFO[1] |
+	 *  Key Length[1] | Key[16+8]
+	 */
+	subelem_len = 12 + igtk_len + 8;
+
+	subelem[0] = FTIE_SUBELEM_MLO_IGTK;
+	subelem [1] = subelem_len - 2;
+	WPA_PUT_LE16(&subelem[2], gsm->GN_igtk);
+	wpa_auth_get_seqnum(wpa_auth, NULL, gsm->GN_igtk, subelem + 4);
+	subelem[10] = link_id;
+	subelem[11] = igtk_len;
+	if (aes_wrap(kek, kek_len, igtk_len / 8, igtk, subelem + 12)) {
+		wpa_printf(MSG_DEBUG,
+			   "FT: IGTK subelem encryption failed: kek_len=%d",
+			   (int) kek_len);
+		return -1;
+	}
+
+	*pos += subelem_len;
+	return 0;
+}
+
+static int wpa_add_per_link_ft_mlo_bigtk_subelem(struct wpa_authenticator *wpa_auth,
+						 u8 *pos, u8 link_id,
+						 struct wpa_state_machine *sm)
+{
+	u8 *subelem = pos;
+	struct wpa_group *gsm = wpa_auth->group;
+	size_t subelem_len, bigtk_len, kek_len;
+	const u8 *bigtk, *kek;
+
+	if (!gsm)
+		return -1;
+
+	if (wpa_key_mgmt_fils(sm->wpa_key_mgmt)) {
+		kek = sm->PTK.kek2;
+		kek_len = sm->PTK.kek2_len;
+	} else {
+		kek = sm->PTK.kek;
+		kek_len = sm->PTK.kek_len;
+	}
+
+	bigtk_len = wpa_cipher_key_len(wpa_auth->conf.group_mgmt_cipher);
+
+	bigtk = gsm->BIGTK[gsm->GN_bigtk - 6];
+
+	/* Sub-elem ID[1] | Length[1] | KeyID[2] | IPN[6] | LINK INFO[1] |
+	 *  Key Length[1] | Key[16+8]
+	 */
+	subelem_len = 12 + bigtk_len + 8;
+
+	subelem[0] = FTIE_SUBELEM_MLO_BIGTK;
+	subelem [1] = subelem_len - 2;
+	WPA_PUT_LE16(&subelem[2], gsm->GN_bigtk);
+	wpa_auth_get_seqnum(wpa_auth, NULL, gsm->GN_bigtk, subelem + 4);
+	subelem[10] = link_id;
+	subelem[11] = bigtk_len;
+	if (aes_wrap(kek, kek_len, bigtk_len / 8, bigtk, subelem + 12)) {
+		wpa_printf(MSG_DEBUG,
+			   "FT: BIGTK subelem encryption failed: kek_len=%d",
+			   (int) kek_len);
+		return -1;
+	}
+
+	*pos += subelem_len;
+	return 0;
+}
+
+int wpa_add_ft_mlo_subelems(struct wpa_state_machine *sm, u8 *pos)
+{
+	int link_id, ret = 0;
+	u8 *start = pos;
+
+	if (sm->mld_assoc_link_id < 0)
+		return ret;
+
+	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+		if (sm->mld_links[link_id].valid &&
+		    sm->mld_links[link_id].wpa_auth) {
+			struct wpa_authenticator *wpa_auth = sm->mld_links[link_id].wpa_auth;
+
+			ret = wpa_add_per_link_ft_mlo_gtk_subelem(wpa_auth, pos, link_id, sm);
+			if (!ret && sm->mgmt_frame_prot)
+				ret = wpa_add_per_link_ft_mlo_igtk_subelem(wpa_auth, pos, link_id, sm);
+			if (!ret && sm->mgmt_frame_prot && wpa_auth->conf.beacon_prot)
+				ret = wpa_add_per_link_ft_mlo_bigtk_subelem(wpa_auth, pos, link_id, sm);
+		}
+		if (ret)
+			return ret;
+	}
+
+	wpa_hexdump(MSG_DEBUG, "MLO-FT-Group-subelems:", start, (pos - start));
+	return ret;
+}
+
+static size_t wpa_add_to_mlo_ft_gtk_subelem_length(struct wpa_authenticator *wpa_auth)
+{
+	size_t len = 0;
+	size_t gtk_len;
+	struct wpa_group *gsm = wpa_auth->group;
+
+	if (!gsm)
+		return len;
+	len = 2; /* Sub element id and length */
+	len += 2; /* Key-idx */
+	len++; /* Link info */
+	len++; /* GTK key length */
+	len += 8; /* PN */
+
+	/*
+	 * GTK
+	 */
+	gtk_len = gsm->GTK_len;
+	len += gtk_len + 8; /* 16 bytes GTK key length and 8 bytes wrap around */
+	return len;
+}
+
+static size_t wpa_add_to_mlo_ft_igtk_subelem_length(struct wpa_state_machine *sm,
+						    struct wpa_authenticator *wpa_auth)
+{
+	size_t len = 0;
+
+	if (sm->mgmt_frame_prot) {
+		len = 2; /* Sub element id and length */
+		len += 2; /* Key-idx */
+		len += 6; /* IPN */
+		len++; /* Link info */
+		len++; /* IGTK key length */
+		len += wpa_cipher_key_len(wpa_auth->conf.group_mgmt_cipher) + 8;
+	}
+	return len;
+}
+
+static size_t wpa_add_to_mlo_ft_bigtk_subelem_length(struct wpa_state_machine *sm,
+						     struct wpa_authenticator *wpa_auth)
+{
+	size_t len = 0;
+
+	if (sm->mgmt_frame_prot && wpa_auth->conf.beacon_prot) {
+		len = 2; /* Sub element id and length */
+		len += 2; /* Key-idx */
+		len += 6; /* BIPN */
+		len++; /* Link info */
+		len++; /* BIGTK key length */
+		len += wpa_cipher_key_len(wpa_auth->conf.group_mgmt_cipher) + 8;
+	}
+	return len;
+}
+
+size_t wpa_ft_mlo_subelems_len(struct wpa_state_machine *sm)
+{
+	int link_id;
+	size_t len = 0;
+
+	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+		if (sm->mld_links[link_id].valid &&
+		    sm->mld_links[link_id].wpa_auth) {
+			struct wpa_authenticator *wpa_auth = sm->mld_links[link_id].wpa_auth;
+
+			len += wpa_add_to_mlo_ft_gtk_subelem_length(wpa_auth);
+			len += wpa_add_to_mlo_ft_igtk_subelem_length(sm, wpa_auth);
+			len += wpa_add_to_mlo_ft_bigtk_subelem_length(sm, wpa_auth);
+		}
+	}
+	wpa_printf(MSG_DEBUG, "MLO-FT-Group-subelems length %zu", len);
+	return len;
+}
+
+#endif /* CONFIG_IEEE80211BE */
 
 static u8 * wpa_ft_gtk_subelem(struct wpa_state_machine *sm, size_t *len)
 {
@@ -2573,6 +2855,8 @@ u8 * wpa_sm_write_assoc_resp_ies(struct wpa_state_machine *sm, u8 *pos,
 	const u8 *kck;
 	size_t kck_len;
 	size_t key_len;
+	bool is_mld = false;
+	struct ft_mld_links_data ml_links_data = {0};
 
 	if (sm == NULL)
 		return pos;
@@ -2645,19 +2929,25 @@ u8 * wpa_sm_write_assoc_resp_ies(struct wpa_state_machine *sm, u8 *pos,
 	mdie_len = res;
 	pos += res;
 
+#ifdef CONFIG_IEEE80211BE
+	is_mld = sm->mld_assoc_link_id >= 0 ? true : false;
+#endif /* CONFIG_IEEE80211BE */
 	/* Fast BSS Transition Information */
 	if (auth_alg == WLAN_AUTH_FT) {
-		subelem = wpa_ft_gtk_subelem(sm, &subelem_len);
-		if (!subelem) {
-			wpa_printf(MSG_DEBUG,
-				   "FT: Failed to add GTK subelement");
-			return NULL;
+		if (!is_mld) {
+			subelem = wpa_ft_gtk_subelem(sm, &subelem_len);
+			if (!subelem) {
+				wpa_printf(MSG_DEBUG,
+					   "FT: Failed to add GTK subelement");
+				return NULL;
+			}
 		}
 		r0kh_id = sm->r0kh_id;
 		r0kh_id_len = sm->r0kh_id_len;
 		anonce = sm->ANonce;
 		snonce = sm->SNonce;
-		if (sm->mgmt_frame_prot) {
+
+		if (sm->mgmt_frame_prot && !is_mld) {
 			u8 *igtk;
 			size_t igtk_len;
 			u8 *nbuf;
@@ -2679,7 +2969,7 @@ u8 * wpa_sm_write_assoc_resp_ies(struct wpa_state_machine *sm, u8 *pos,
 			subelem_len += igtk_len;
 			os_free(igtk);
 		}
-		if (sm->mgmt_frame_prot && conf->beacon_prot) {
+		if (sm->mgmt_frame_prot && conf->beacon_prot && !is_mld) {
 			u8 *bigtk;
 			size_t bigtk_len;
 			u8 *nbuf;
@@ -2739,6 +3029,31 @@ u8 * wpa_sm_write_assoc_resp_ies(struct wpa_state_machine *sm, u8 *pos,
 				return NULL;
 			}
 		}
+#ifdef CONFIG_IEEE80211BE
+		if (is_mld) {
+			/* Add Group key subelems for all links */
+			size_t ft_mlo_subelems_len;
+
+			ft_mlo_subelems_len = wpa_ft_mlo_subelems_len(sm);
+			if (!ft_mlo_subelems_len)
+				return NULL;
+
+			subelem = os_zalloc(ft_mlo_subelems_len);
+			if (!subelem) {
+				wpa_printf(MSG_DEBUG, "FT: Failed to allocate buffer of size %zu"
+					   "for ML Group sub elements", ft_mlo_subelems_len);
+				return NULL;
+			}
+			if (wpa_add_ft_mlo_subelems(sm, subelem) < 0) {
+				os_free(subelem);
+				wpa_printf(MSG_DEBUG, "FT: Failed to build ML Group subelems for STA "MACSTR,
+					   MAC2STR(wpa_auth_get_spa(sm)));
+				return NULL;
+			}
+			subelem += ft_mlo_subelems_len;
+			subelem_len += ft_mlo_subelems_len;
+		}
+#endif /* CONFIG_IEEE80211BE */
 #endif /* CONFIG_OCV */
 	} else {
 		r0kh_id = conf->r0_key_holder;
@@ -2800,8 +3115,11 @@ u8 * wpa_sm_write_assoc_resp_ies(struct wpa_state_machine *sm, u8 *pos,
 		fte_mic = _ftie->mic;
 		elem_count = &_ftie->mic_control[1];
 	}
+	/* For RSNIE/XE elem_count will be incremented in wpa_ft_mic()
+	 * based on number of elements considered for protection.
+	 */
 	if (auth_alg == WLAN_AUTH_FT)
-		*elem_count = 3; /* Information element count */
+		*elem_count = 2; /* Information element count */
 
 	ric_start = pos;
 	if (wpa_ft_parse_ies(req_ies, req_ies_len, &parse,
@@ -2834,8 +3152,6 @@ u8 * wpa_sm_write_assoc_resp_ies(struct wpa_state_machine *sm, u8 *pos,
 		rsnxe_len = sm->wpa_auth->conf.rsnxe_override_ft_len;
 	}
 #endif /* CONFIG_TESTING_OPTIONS */
-	if (auth_alg == WLAN_AUTH_FT && rsnxe_len)
-		*elem_count += 1;
 
 	if (wpa_key_mgmt_fils(sm->wpa_key_mgmt)) {
 		kck = sm->PTK.kck2;
@@ -2844,19 +3160,60 @@ u8 * wpa_sm_write_assoc_resp_ies(struct wpa_state_machine *sm, u8 *pos,
 		kck = sm->PTK.kck;
 		kck_len = sm->PTK.kck_len;
 	}
+#ifdef CONFIG_IEEE80211BE
+	struct link_data *assoc_link_data = NULL;
+
+	if (is_mld && auth_alg == WLAN_AUTH_FT) {
+		int pos, link_id;
+
+		assoc_link_data = os_zalloc((sm->n_mld_affiliated_links + 1) * sizeof(struct link_data));
+		if (!assoc_link_data) {
+			wpa_printf(MSG_DEBUG, "MLO FT: " MACSTR " failed"
+				   "to allocate memory for MIC elements",
+				   MAC2STR(wpa_auth_get_spa(sm)));
+			return NULL;
+		}
+		for (pos = 0, link_id = 0; link_id < MAX_NUM_MLD_LINKS &&
+		     pos < (sm->n_mld_affiliated_links + 1); link_id++) {
+			struct mld_link *sm_link = &sm->mld_links[link_id];
+
+			if (!sm_link->valid)
+				continue;
+
+			assoc_link_data[pos].link_id = link_id;
+			os_memcpy(assoc_link_data[pos].link_addr, sm_link->own_addr, ETH_ALEN);
+			assoc_link_data[pos].link_rsnie = sm_link->rsne;
+			assoc_link_data[pos].link_rsnie_len = sm_link->rsne_len;
+			assoc_link_data[pos].link_rsnxe = sm_link->rsnxe;
+			assoc_link_data[pos].link_rsnxe_len = sm_link->rsnxe_len;
+			pos++;
+
+		}
+		ml_links_data.num_links = sm->n_mld_affiliated_links + 1;
+		ml_links_data.link_data = assoc_link_data;
+	}
+#endif
 	if (auth_alg == WLAN_AUTH_FT &&
 	    wpa_ft_mic(sm->wpa_key_mgmt, kck, kck_len,
-		       sm->addr, sm->wpa_auth->addr, 6,
+		       wpa_auth_get_spa(sm), wpa_auth_get_aa(sm), 6,
 		       mdie, mdie_len, ftie, ftie_len,
 		       rsnie, rsnie_len,
 		       ric_start, ric_start ? pos - ric_start : 0,
-		       rsnxe_len ? rsnxe : NULL, rsnxe_len,
-		       fte_mic) < 0) {
+		       rsnxe_len ? rsnxe : NULL, rsnxe_len, elem_count,
+		       is_mld ? &ml_links_data : NULL, fte_mic) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Failed to calculate MIC");
+#ifdef CONFIG_IEEE80211BE
+		if (assoc_link_data)
+			os_free(assoc_link_data);
+#endif
 		return NULL;
 	}
 
 	os_free(sm->assoc_resp_ftie);
+#ifdef CONFIG_IEEE80211BE
+	if (assoc_link_data)
+		os_free(assoc_link_data);
+#endif
 	sm->assoc_resp_ftie = os_malloc(ftie_len);
 	if (!sm->assoc_resp_ftie)
 		return NULL;
@@ -2983,17 +3340,17 @@ static int wpa_ft_psk_pmk_r1(struct wpa_state_machine *sm,
 	pairwise = sm->pairwise;
 
 	for (;;) {
-		pmk = wpa_ft_get_psk(wpa_auth, sm->addr, sm->p2p_dev_addr,
+		pmk = wpa_ft_get_psk(wpa_auth, wpa_auth_get_spa(sm), sm->p2p_dev_addr,
 				     pmk);
 		if (pmk == NULL)
 			break;
 
 		if (wpa_derive_pmk_r0(pmk, PMK_LEN, ssid, ssid_len, mdid, r0kh,
-				      r0kh_len, sm->addr,
+				      r0kh_len, wpa_auth_get_spa(sm),
 				      pmk_r0, pmk_r0_name,
 				      WPA_KEY_MGMT_FT_PSK) < 0 ||
 		    wpa_derive_pmk_r1(pmk_r0, PMK_LEN, pmk_r0_name, r1kh,
-				      sm->addr, pmk_r1, pmk_r1_name) < 0 ||
+				      wpa_auth_get_spa(sm), pmk_r1, pmk_r1_name) < 0 ||
 		    os_memcmp_const(pmk_r1_name, req_pmk_r1_name,
 				    WPA_PMK_NAME_LEN) != 0)
 			continue;
@@ -3007,7 +3364,7 @@ static int wpa_ft_psk_pmk_r1(struct wpa_state_machine *sm,
 		os_memcpy(sm->PMK, pmk, PMK_LEN);
 		sm->pmk_len = PMK_LEN;
 		if (out_vlan &&
-		    wpa_ft_get_vlan(sm->wpa_auth, sm->addr, out_vlan) < 0) {
+		    wpa_ft_get_vlan(sm->wpa_auth, wpa_auth_get_spa(sm), out_vlan) < 0) {
 			wpa_printf(MSG_DEBUG, "FT: vlan not available for STA "
 				   MACSTR, MAC2STR(sm->addr));
 			return -1;
@@ -3015,17 +3372,17 @@ static int wpa_ft_psk_pmk_r1(struct wpa_state_machine *sm,
 
 		if (out_identity && out_identity_len) {
 			*out_identity_len = wpa_ft_get_identity(
-				sm->wpa_auth, sm->addr, out_identity);
+				sm->wpa_auth, wpa_auth_get_spa(sm), out_identity);
 		}
 
 		if (out_radius_cui && out_radius_cui_len) {
 			*out_radius_cui_len = wpa_ft_get_radius_cui(
-				sm->wpa_auth, sm->addr, out_radius_cui);
+				sm->wpa_auth, wpa_auth_get_spa(sm), out_radius_cui);
 		}
 
 		if (out_session_timeout) {
 			*out_session_timeout = wpa_ft_get_session_timeout(
-				sm->wpa_auth, sm->addr);
+				sm->wpa_auth, wpa_auth_get_spa(sm));
 		}
 
 		return 0;
@@ -3106,7 +3463,7 @@ static int wpa_ft_local_derive_pmk_r1(struct wpa_authenticator *wpa_auth,
 		return -1; /* not our R0KH-ID */
 
 	wpa_printf(MSG_DEBUG, "FT: STA R0KH-ID matching local configuration");
-	if (wpa_ft_fetch_pmk_r0(sm->wpa_auth, sm->addr, req_pmk_r0_name, &r0) <
+	if (wpa_ft_fetch_pmk_r0(sm->wpa_auth, wpa_auth_get_spa(sm), req_pmk_r0_name, &r0) <
 	    0)
 		return -1; /* no matching PMKR0Name in local cache */
 
@@ -3114,7 +3471,7 @@ static int wpa_ft_local_derive_pmk_r1(struct wpa_authenticator *wpa_auth,
 
 	if (wpa_derive_pmk_r1(r0->pmk_r0, r0->pmk_r0_len, r0->pmk_r0_name,
 			      conf->r1_key_holder,
-			      sm->addr, out_pmk_r1, out_pmk_r1_name) < 0)
+			      wpa_auth_get_spa(sm), out_pmk_r1, out_pmk_r1_name) < 0)
 		return -1;
 
 	os_get_reltime(&now);
@@ -3124,7 +3481,7 @@ static int wpa_ft_local_derive_pmk_r1(struct wpa_authenticator *wpa_auth,
 	if (r0->session_timeout)
 		session_timeout = r0->session_timeout - now.sec;
 
-	wpa_ft_store_pmk_r1(wpa_auth, sm->addr, out_pmk_r1, r0->pmk_r0_len,
+	wpa_ft_store_pmk_r1(wpa_auth, wpa_auth_get_spa(sm), out_pmk_r1, r0->pmk_r0_len,
 			    out_pmk_r1_name,
 			    sm->pairwise, r0->vlan, expires_in, session_timeout,
 			    r0->identity, r0->identity_len,
@@ -3227,7 +3584,7 @@ static int wpa_ft_process_auth_req(struct wpa_state_machine *sm,
 	    wpa_key_mgmt_ft_psk(sm->wpa_key_mgmt)) {
 		if (wpa_derive_pmk_r1_name(parse.rsn_pmkid,
 					   sm->wpa_auth->conf.r1_key_holder,
-					   sm->addr, pmk_r1_name, PMK_LEN) < 0)
+					   wpa_auth_get_spa(sm), pmk_r1_name, PMK_LEN) < 0)
 			return WLAN_STATUS_UNSPECIFIED_FAILURE;
 		if (wpa_ft_psk_pmk_r1(sm, pmk_r1_name, pmk_r1, &pairwise,
 				      &vlan, &identity, &identity_len,
@@ -3252,10 +3609,10 @@ static int wpa_ft_process_auth_req(struct wpa_state_machine *sm,
 			continue;
 		if (wpa_derive_pmk_r1_name(parse.rsn_pmkid,
 					   sm->wpa_auth->conf.r1_key_holder,
-					   sm->addr, pmk_r1_name, len) < 0)
+					   wpa_auth_get_spa(sm), pmk_r1_name, len) < 0)
 			continue;
 
-		if (wpa_ft_fetch_pmk_r1(sm->wpa_auth, sm->addr, pmk_r1_name,
+		if (wpa_ft_fetch_pmk_r1(sm->wpa_auth, wpa_auth_get_spa(sm), pmk_r1_name,
 					pmk_r1, &pmk_r1_len, &pairwise, &vlan,
 					&identity, &identity_len, &radius_cui,
 					&radius_cui_len,
@@ -3349,7 +3706,7 @@ pmk_r1_derived:
 		kdk_len = 0;
 
 	if (wpa_pmk_r1_to_ptk(pmk_r1, pmk_r1_len, sm->SNonce, sm->ANonce,
-			      sm->addr, sm->wpa_auth->addr, pmk_r1_name,
+			      wpa_auth_get_spa(sm), wpa_auth_get_aa(sm), pmk_r1_name,
 			      &sm->PTK, ptk_name, parse.key_mgmt,
 			      pairwise, kdk_len) < 0)
 		return WLAN_STATUS_UNSPECIFIED_FAILURE;
@@ -3368,18 +3725,18 @@ pmk_r1_derived:
 	sm->tk_already_set = false;
 	wpa_ft_install_ptk(sm, 0);
 
-	if (wpa_ft_set_vlan(sm->wpa_auth, sm->addr, &vlan) < 0) {
+	if (wpa_ft_set_vlan(sm->wpa_auth, wpa_auth_get_spa(sm), &vlan) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Failed to configure VLAN");
 		return WLAN_STATUS_UNSPECIFIED_FAILURE;
 	}
-	if (wpa_ft_set_identity(sm->wpa_auth, sm->addr,
+	if (wpa_ft_set_identity(sm->wpa_auth, wpa_auth_get_spa(sm),
 				identity, identity_len) < 0 ||
-	    wpa_ft_set_radius_cui(sm->wpa_auth, sm->addr,
+	    wpa_ft_set_radius_cui(sm->wpa_auth, wpa_auth_get_spa(sm),
 				  radius_cui, radius_cui_len) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Failed to configure identity/CUI");
 		return WLAN_STATUS_UNSPECIFIED_FAILURE;
 	}
-	wpa_ft_set_session_timeout(sm->wpa_auth, sm->addr, session_timeout);
+	wpa_ft_set_session_timeout(sm->wpa_auth, wpa_auth_get_spa(sm), session_timeout);
 
 	buflen = 2 + sizeof(struct rsn_mdie) + 2 + sizeof(struct rsn_ftie) +
 		2 + FT_R1KH_ID_LEN + 200;
@@ -3473,6 +3830,8 @@ int wpa_ft_validate_reassoc(struct wpa_state_machine *sm, const u8 *ies,
 	const u8 *kck;
 	size_t kck_len;
 	struct wpa_auth_config *conf;
+	bool is_mld = false;
+	struct ft_mld_links_data ml_links_data = {0};
 
 	if (sm == NULL)
 		return WLAN_STATUS_UNSPECIFIED_FAILURE;
@@ -3607,23 +3966,58 @@ int wpa_ft_validate_reassoc(struct wpa_state_machine *sm, const u8 *ies,
 		kck = sm->PTK.kck;
 		kck_len = sm->PTK.kck_len;
 	}
+#ifdef CONFIG_IEEE80211BE
+	struct link_data *assoc_link_data = NULL;
+	is_mld = sm->mld_assoc_link_id >= 0 ? true : false;
+	if (is_mld) {
+		int pos, link_id;
+
+		assoc_link_data = os_zalloc((sm->n_mld_affiliated_links + 1) * sizeof(struct link_data));
+		if (!assoc_link_data) {
+			wpa_printf(MSG_DEBUG, "MLO FT: " MACSTR " failed"
+				   "to allocate memory for MIC elements",
+				   MAC2STR(wpa_auth_get_spa(sm)));
+			return WLAN_STATUS_UNSPECIFIED_FAILURE;
+		}
+		for (pos = 0, link_id = 0; link_id < MAX_NUM_MLD_LINKS &&
+		     pos < (sm->n_mld_affiliated_links + 1); link_id++) {
+			struct mld_link *sm_link = &sm->mld_links[link_id];
+
+			if (!sm_link->valid)
+				continue;
+
+			assoc_link_data[pos].link_id = link_id;
+			os_memcpy(assoc_link_data[pos].link_addr, sm_link->peer_addr, ETH_ALEN);
+			pos++;
+		}
+		ml_links_data.num_links = sm->n_mld_affiliated_links + 1;
+		ml_links_data.link_data = assoc_link_data;
+	}
+#endif /* CONFIG_IEEE80211BE */
 	if (wpa_ft_mic(sm->wpa_key_mgmt, kck, kck_len,
-		       sm->addr, sm->wpa_auth->addr, 5,
+		       wpa_auth_get_spa(sm), wpa_auth_get_aa(sm), 5,
 		       parse.mdie - 2, parse.mdie_len + 2,
 		       parse.ftie - 2, parse.ftie_len + 2,
 		       parse.rsn - 2, parse.rsn_len + 2,
 		       parse.ric, parse.ric_len,
 		       parse.rsnxe ? parse.rsnxe - 2 : NULL,
 		       parse.rsnxe ? parse.rsnxe_len + 2 : 0,
-		       mic) < 0) {
+		       NULL, is_mld ? &ml_links_data : NULL, mic) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Failed to calculate MIC");
+#ifdef CONFIG_IEEE80211BE
+		if (assoc_link_data)
+			os_free(assoc_link_data);
+#endif /* CONFIG_IEEE80211BE */
 		return WLAN_STATUS_UNSPECIFIED_FAILURE;
 	}
-
+#ifdef CONFIG_IEEE80211BE
+	if (assoc_link_data)
+		os_free(assoc_link_data);
+#endif /* CONFIG_IEEE80211BE */
 	if (os_memcmp_const(mic, parse.fte_mic, mic_len) != 0) {
 		wpa_printf(MSG_DEBUG, "FT: Invalid MIC in FTIE");
 		wpa_printf(MSG_DEBUG, "FT: addr=" MACSTR " auth_addr=" MACSTR,
-			   MAC2STR(sm->addr), MAC2STR(sm->wpa_auth->addr));
+			   MAC2STR(wpa_auth_get_spa(sm)), MAC2STR(wpa_auth_get_aa(sm)));
 		wpa_hexdump(MSG_MSGDUMP, "FT: Received MIC",
 			    parse.fte_mic, mic_len);
 		wpa_hexdump(MSG_MSGDUMP, "FT: Calculated MIC", mic, mic_len);
diff --git a/src/ap/wpa_auth_i.h b/src/ap/wpa_auth_i.h
index 47ea5a9..d29ec2a 100644
--- a/src/ap/wpa_auth_i.h
+++ b/src/ap/wpa_auth_i.h
@@ -339,9 +339,28 @@ void wpa_auth_ft_store_keys(struct wpa_state_machine *sm, const u8 *pmk_r0,
 			    size_t key_len);
 struct wpa_ft_pmk_cache * wpa_ft_pmk_cache_init(void);
 void wpa_ft_pmk_cache_deinit(struct wpa_ft_pmk_cache *cache);
+void wpa_ft_pmk_cache_inc_refcount(struct wpa_ft_pmk_cache *cache);
 void wpa_ft_install_ptk(struct wpa_state_machine *sm, int retry);
 int wpa_ft_store_pmk_fils(struct wpa_state_machine *sm, const u8 *pmk_r0,
 			  const u8 *pmk_r0_name);
 #endif /* CONFIG_IEEE80211R_AP */
 
+static const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm)
+{
+#ifdef CONFIG_IEEE80211BE
+	if (sm->mld_assoc_link_id >= 0)
+		return sm->own_mld_addr;
+#endif /* CONFIG_IEEE80211BE */
+	return sm->wpa_auth->addr;
+}
+
+static const u8 * wpa_auth_get_spa(const struct wpa_state_machine *sm)
+{
+#ifdef CONFIG_IEEE80211BE
+	if (sm->mld_assoc_link_id >= 0)
+		return sm->peer_mld_addr;
+#endif /* CONFIG_IEEE80211BE */
+	return sm->addr;
+}
+
 #endif /* WPA_AUTH_I_H */
diff --git a/src/common/wpa_common.c b/src/common/wpa_common.c
index 79c2cab..67b1011 100644
--- a/src/common/wpa_common.c
+++ b/src/common/wpa_common.c
@@ -889,10 +889,12 @@ int wpa_ft_mic(int key_mgmt, const u8 *kck, size_t kck_len, const u8 *sta_addr,
 	       const u8 *rsnie, size_t rsnie_len,
 	       const u8 *ric, size_t ric_len,
 	       const u8 *rsnxe, size_t rsnxe_len,
+	       u8 *elem_count,
+	       struct ft_mld_links_data *assoc_links_data,
 	       u8 *mic)
 {
-	const u8 *addr[10];
-	size_t len[10];
+	const u8 *addr[20];
+	size_t len[20];
 	size_t i, num_elem = 0;
 	u8 zero_mic[32];
 	size_t mic_len, fte_fixed_len;
@@ -928,10 +930,29 @@ int wpa_ft_mic(int key_mgmt, const u8 *kck, size_t kck_len, const u8 *sta_addr,
 	len[num_elem] = 1;
 	num_elem++;
 
+#ifdef CONFIG_IEEE80211BE
+	/* Add Link RSN IEs if this is an ML association
+	 */
+	if (assoc_links_data) {
+		for (i = 0; i < assoc_links_data->num_links; i++) {
+			if (assoc_links_data->link_data[i].link_rsnie_len) {
+				wpa_printf(MSG_WARNING," FT MIC link %zu rsn ie len %d curr index %zu",
+					   i, assoc_links_data->link_data[i].link_rsnie_len, num_elem);
+				addr[num_elem] = assoc_links_data->link_data[i].link_rsnie;
+				len[num_elem] = assoc_links_data->link_data[i].link_rsnie_len;
+				num_elem++;
+				if (elem_count)
+					*elem_count += 1;
+			}
+		}
+	} else
+#endif /*CONFIG_IEEE80211BE */
 	if (rsnie) {
 		addr[num_elem] = rsnie;
 		len[num_elem] = rsnie_len;
 		num_elem++;
+		if (elem_count)
+			*elem_count += 1;
 	}
 	if (mdie) {
 		addr[num_elem] = mdie;
@@ -963,13 +984,41 @@ int wpa_ft_mic(int key_mgmt, const u8 *kck, size_t kck_len, const u8 *sta_addr,
 		len[num_elem] = ric_len;
 		num_elem++;
 	}
-
+#ifdef CONFIG_IEEE80211BE
+	/* Add Link RSNXEs if this is an ML association.
+	 */
+	if (assoc_links_data) {
+		for (i = 0; i < assoc_links_data->num_links; i++) {
+			if (assoc_links_data->link_data[i].link_rsnxe_len) {
+				wpa_printf(MSG_DEBUG, " FT MIC link %zu rsnxe len %d curr index %zu",
+					   i, assoc_links_data->link_data[i].link_rsnxe_len, num_elem);
+				addr[num_elem] = assoc_links_data->link_data[i].link_rsnxe;
+				len[num_elem] = assoc_links_data->link_data[i].link_rsnxe_len;
+				num_elem++;
+				if (elem_count)
+					*elem_count += 1;
+			}
+		}
+        } else
+#endif /* CONFIG_IEEE80211BE */
 	if (rsnxe) {
 		addr[num_elem] = rsnxe;
 		len[num_elem] = rsnxe_len;
 		num_elem++;
+		if (elem_count)
+			*elem_count += 1;
+	}
+#ifdef CONFIG_IEEE80211BE
+	if (assoc_links_data) {
+		for (i = 0; i < assoc_links_data->num_links ; i++) {
+			wpa_printf(MSG_DEBUG, " FT MIC link %zu addr %pM curr index %zu",
+				   i, assoc_links_data->link_data[i].link_addr, num_elem);
+			addr[num_elem] = assoc_links_data->link_data[i].link_addr;
+			len[num_elem] = ETH_ALEN;
+			num_elem++;
+		}
 	}
-
+#endif /* CONFIG_IEEE80211BE */
 	for (i = 0; i < num_elem; i++)
 		wpa_hexdump(MSG_MSGDUMP, "FT: MIC data", addr[i], len[i]);
 	res = -1;
diff --git a/src/common/wpa_common.h b/src/common/wpa_common.h
index c75b9c1..34a209f 100644
--- a/src/common/wpa_common.h
+++ b/src/common/wpa_common.h
@@ -428,6 +428,9 @@ struct rsn_ftie_sha512 {
 #define FTIE_SUBELEM_IGTK 4
 #define FTIE_SUBELEM_OCI 5
 #define FTIE_SUBELEM_BIGTK 6
+#define FTIE_SUBELEM_MLO_GTK 8
+#define FTIE_SUBELEM_MLO_IGTK 9
+#define FTIE_SUBELEM_MLO_BIGTK 10
 
 struct rsn_rdie {
 	u8 id;
@@ -435,6 +438,22 @@ struct rsn_rdie {
 	le16 status_code;
 } STRUCT_PACKED;
 
+struct link_data
+{
+	u8 link_id;
+	u8 link_addr[ETH_ALEN];
+	const u8 *link_rsnie;
+	int link_rsnie_len;
+	const u8 *link_rsnxe;
+	int link_rsnxe_len;
+};
+
+struct ft_mld_links_data
+{
+	u8 num_links;
+	struct link_data *link_data;
+};
+
 /* WFA Transition Disable KDE (using OUI_WFA) */
 /* Transition Disable Bitmap bits */
 #define TRANSITION_DISABLE_WPA3_PERSONAL BIT(0)
@@ -483,6 +502,8 @@ int wpa_ft_mic(int key_mgmt, const u8 *kck, size_t kck_len, const u8 *sta_addr,
 	       const u8 *rsnie, size_t rsnie_len,
 	       const u8 *ric, size_t ric_len,
 	       const u8 *rsnxe, size_t rsnxe_len,
+	       u8 *elem_count,
+	       struct ft_mld_links_data *assoc_links_data,
 	       u8 *mic);
 int wpa_derive_pmk_r0(const u8 *xxkey, size_t xxkey_len,
 		      const u8 *ssid, size_t ssid_len,
diff --git a/src/rsn_supp/wpa_ft.c b/src/rsn_supp/wpa_ft.c
index 497d91e..ef1c7b5 100644
--- a/src/rsn_supp/wpa_ft.c
+++ b/src/rsn_supp/wpa_ft.c
@@ -472,7 +472,7 @@ static u8 * wpa_ft_gen_req_ies(struct wpa_sm *sm, size_t *len,
 			       ftie_pos, 2 + *ftie_len,
 			       (u8 *) rsnie, 2 + rsnie->len, ric_ies,
 			       ric_ies_len, rsnxe_len ? rsnxe : NULL, rsnxe_len,
-			       fte_mic) < 0) {
+			       NULL, NULL, fte_mic) < 0) {
 			wpa_printf(MSG_INFO, "FT: Failed to calculate MIC");
 			os_free(buf);
 			return NULL;
@@ -1145,7 +1145,7 @@ int wpa_ft_validate_reassoc_resp(struct wpa_sm *sm, const u8 *ies,
 		       parse.ric, parse.ric_len,
 		       parse.rsnxe ? parse.rsnxe - 2 : NULL,
 		       parse.rsnxe ? parse.rsnxe_len + 2 : 0,
-		       mic) < 0) {
+		       NULL, NULL, mic) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Failed to calculate MIC");
 		return -1;
 	}
diff --git a/wlantest/rx_mgmt.c b/wlantest/rx_mgmt.c
index 62adaa8..452639e 100644
--- a/wlantest/rx_mgmt.c
+++ b/wlantest/rx_mgmt.c
@@ -1340,7 +1340,7 @@ static void rx_mgmt_reassoc_req(struct wlantest *wt, const u8 *data,
 			       parse.ric, parse.ric_len,
 			       parse.rsnxe ? parse.rsnxe - 2 : NULL,
 			       parse.rsnxe ? parse.rsnxe_len + 2 : 0,
-			       mic) < 0) {
+			       NULL, NULL, mic) < 0) {
 			add_note(wt, MSG_INFO, "FT: Failed to calculate MIC");
 			return;
 		}
@@ -1850,7 +1850,7 @@ static void rx_mgmt_reassoc_resp(struct wlantest *wt, const u8 *data,
 			       parse.ric, parse.ric_len,
 			       parse.rsnxe ? parse.rsnxe - 2 : NULL,
 			       parse.rsnxe ? parse.rsnxe_len + 2 : 0,
-			       mic) < 0) {
+			       NULL, NULL, mic) < 0) {
 			add_note(wt, MSG_INFO, "FT: Failed to calculate MIC");
 			return;
 		}
-- 
2.17.1

