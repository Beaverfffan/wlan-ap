From 3ac000d1961c2073a854f47d934000db3e35a7d9 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Fri, 31 Dec 2021 12:35:09 +0530
Subject: [PATCH] ath11k: remove intersection support for regulatory rules

Currently, regulatory rules from new country settings is intersected with
rules from default country settings(during initialisation) in order to prevent
users to bypass their default country settings such as power limits, channel
flags, etc.

However, the country setting in the BDF will take higher higher precendence
and FW will protect it. Therefore, there is no need to handle intersection
on the driver side now.

Remove regulatory rules intersection logic support.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/reg.c | 191 ++++------------------------------
 drivers/net/wireless/ath/ath11k/reg.h |   2 +-
 drivers/net/wireless/ath/ath11k/wmi.c |  22 +---
 3 files changed, 22 insertions(+), 193 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/reg.c
+++ b/drivers/net/wireless/ath/ath11k/reg.c
@@ -265,6 +265,10 @@ static u32 ath11k_map_fw_reg_flags(u16 r
 	return flags;
 }
 
+/* TODO: API ath11k_reg_can_intersect() to handle whether two
+ * ieee80211_reg_rules can intersect or not based on their
+ * frequency range and power mode. */
+
 static const char *
 ath11k_reg_get_regdom_str(enum nl80211_dfs_regions dfs_region)
 {
@@ -450,7 +454,8 @@ static struct cur_reg_rule
 
 struct ieee80211_regdomain *
 ath11k_reg_build_regd(struct ath11k_base *ab,
-		      struct cur_regulatory_info *reg_info)
+		      struct cur_regulatory_info *reg_info,
+		      enum ieee80211_ap_reg_power power_type)
 {
 	struct ieee80211_regdomain *new_regd = NULL;
 	struct cur_reg_rule *reg_rule;
@@ -605,7 +610,7 @@ ath11k_reg_build_regd(struct ath11k_base
 				   i + 1, reg_rule->start_freq, reg_rule->end_freq,
 				   max_bw, reg_rule->ant_gain, reg_rule->reg_power,
 				   new_regd->reg_rules[i].dfs_cac_ms, flags,
-				   reg_rule->psd_flag, reg_rule->psd_eirp);
+				   reg_rule->psd_eirp, new_regd->reg_rules[i].mode);
 		} else {
 			ath11k_dbg(ab, ATH11K_DBG_REG,
 				   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d)\n",
--- a/drivers/net/wireless/ath/ath11k/reg.h
+++ b/drivers/net/wireless/ath/ath11k/reg.h
@@ -30,7 +30,7 @@ void ath11k_reg_free(struct ath11k_base
 void ath11k_regd_update_work(struct work_struct *work);
 struct ieee80211_regdomain *
 ath11k_reg_build_regd(struct ath11k_base *ab,
-		      struct cur_regulatory_info *reg_info, bool intersect,
+		      struct cur_regulatory_info *reg_info,
 		      enum ieee80211_ap_reg_power power_type);
 int ath11k_regd_update(struct ath11k *ar);
 int ath11k_reg_update_chan_list(struct ath11k *ar, bool wait);
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -8179,10 +8179,10 @@ static int ath11k_reg_handle_chan_list(s
 	vdev_type = ath11k_mac_get_ar_vdev_type(ar);
 
 	ath11k_dbg(ab, ATH11K_DBG_WMI,
-		   "wmi handle chan list power type %d vdev type %d intersect %d\n",
-		   power_type, vdev_type, intersect);
+		   "wmi handle chan list power type %d vdev type %d\n",
+		   power_type, vdev_type);
 
-	regd = ath11k_reg_build_regd(ab, reg_info, intersect, power_type);
+	regd = ath11k_reg_build_regd(ab, reg_info, power_type);
 
 	if (!regd) {
 		ath11k_warn(ab, "failed to build regd from reg_info\n");
