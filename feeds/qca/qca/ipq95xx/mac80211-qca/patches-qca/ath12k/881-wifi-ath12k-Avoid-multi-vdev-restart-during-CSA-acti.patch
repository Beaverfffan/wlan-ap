From 54d5e5a4fe6f271b92ace2517de0fc73e1ef3c2e Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Thu, 15 Feb 2024 11:19:52 -0800
Subject: [PATCH] wifi: ath12k: Avoid multi vdev restart during CSA active

Currently, firmware stops the vdev after receiving the wmi pdev multiple
vdev restart request command when CSA is in progress for all active
vdev_ids of same pdev. This cmd will interrupt the CSA operation in the
firmware.

Firmware expects this cmd (WMI_PDEV_MULTIPLE_VDEV_RESTART_REQUEST_CMDID)
to be sent after CSA switch status event receives by host for respective
vdev_id.

The problem in the code is when host counts the n_vifs, it does not
account the CSA activity. In case of disable_csa_dfs = 1 and dfs radar
is detected, there's CSA switch operation is expected. The userspace
initiates channel switch for respective vif types. Host sends wmi pdev
mvr request cmd to firmware while CSA still in progress for multi-vifs
scenario.

The fix is to avoid sending multi vdev restart related WMI cmd(s) to
firmware for the specific vdev for which CSA activity is still in
progress in firmware.

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 731ace9..f4eba67 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -12143,6 +12143,7 @@ struct ath12k_mac_change_chanctx_arg {
 	struct ieee80211_vif_chanctx_switch *vifs;
 	int n_vifs;
 	int next_vif;
+	bool csa_active;
 	struct ath12k *ar;
 };
 
@@ -12173,7 +12174,10 @@ ath12k_mac_change_chanctx_cnt_iter(void *data, u8 *mac,
 		if ((rcu_access_pointer(link_conf->chanctx_conf) != arg->ctx) ||
 		    (arvif->ar != arg->ar))
 			continue;
-			
+
+		if (link_conf->csa_active)
+			arg->csa_active = true;
+
 		arg->n_vifs++;
 	}
 }
@@ -12684,7 +12688,9 @@ static void
 ath12k_mac_update_active_vif_chan(struct ath12k *ar,
 				  struct ieee80211_chanctx_conf *ctx)
 {
-	struct ath12k_mac_change_chanctx_arg arg = { .ctx = ctx, .ar = ar };
+	struct ath12k_mac_change_chanctx_arg arg = { .ctx = ctx,
+						     .csa_active = false,
+						     .ar = ar };
 	struct ath12k_hw *ah = ar->ah;
 
 	lockdep_assert_held(&ar->conf_mutex);
@@ -12693,7 +12699,8 @@ ath12k_mac_update_active_vif_chan(struct ath12k *ar,
 						   IEEE80211_IFACE_ITER_NORMAL,
 						   ath12k_mac_change_chanctx_cnt_iter,
 						   &arg);
-	if (arg.n_vifs == 0)
+
+	if (arg.n_vifs == 0 || arg.csa_active)
 		return;
 
 	arg.vifs = kcalloc(arg.n_vifs, sizeof(arg.vifs[0]), GFP_KERNEL);
-- 
2.17.1

