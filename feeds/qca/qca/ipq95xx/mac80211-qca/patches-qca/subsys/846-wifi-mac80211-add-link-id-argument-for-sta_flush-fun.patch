From 365ec55751ba08476023af1e18c74ebc0a4987a3 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Fri, 15 Dec 2023 10:23:14 +0530
Subject: [PATCH] wifi: mac80211: add link id argument for sta_flush() function

Currently, whenever sta_flush() is invoked, all sta present in that
interface is flushed. However, there could be a requirement in case
of MLO that only flush those sta who are using a given link id.
This is not possible currently.

Hence add the support for the same.

Passing link id is done currently via the NL interface. If required
from other place also it can be changed on need basis.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 include/net/cfg80211.h       |  3 ++-
 include/uapi/linux/nl80211.h |  3 ++-
 net/mac80211/cfg.c           |  7 ++++---
 net/mac80211/ibss.c          |  4 ++--
 net/mac80211/iface.c         |  2 +-
 net/mac80211/mesh.c          |  2 +-
 net/mac80211/mlme.c          |  2 +-
 net/mac80211/ocb.c           |  2 +-
 net/mac80211/sta_info.c      | 20 +++++++++++++-------
 net/mac80211/sta_info.h      | 14 +++++++++++---
 net/wireless/nl80211.c       | 11 ++++++++++-
 net/wireless/rdev-ops.h      |  7 ++++---
 net/wireless/trace.h         |  5 +++--
 13 files changed, 55 insertions(+), 27 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 9bada2a7a907..df834abb8ceb 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -4648,7 +4648,8 @@ struct cfg80211_ops {
 			       const u8 *mac,
 			       struct station_parameters *params);
 	int	(*del_station)(struct wiphy *wiphy, struct net_device *dev,
-			       struct station_del_parameters *params);
+			       struct station_del_parameters *params,
+			       int link_id);
 	int	(*change_station)(struct wiphy *wiphy, struct net_device *dev,
 				  const u8 *mac,
 				  struct station_parameters *params);
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index 2a75b2616f63..e5a9ecac4347 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -431,7 +431,8 @@
  *	%NL80211_ATTR_REASON_CODE can optionally be used to specify which type
  *	of disconnection indication should be sent to the station
  *	(Deauthentication or Disassociation frame and reason code for that
- *	frame).
+ *	frame). %NL80211_ATTR_MLO_LINK_ID can be used optionally to remove
+ *	stations connected and using at least that link.
  *
  * @NL80211_CMD_GET_MPATH: Get mesh path attributes for mesh path to
  * 	destination %NL80211_ATTR_MAC on the interface identified by
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 806425ed80ed..126948d37207 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1877,7 +1877,7 @@ static int ieee80211_stop_ap(struct wiphy *wiphy, struct net_device *dev,
 	link_conf->ema_ap = false;
 	link_conf->bssid_indicator = 0;
 
-	__sta_info_flush(sdata, true);
+	__sta_info_flush(sdata, true, -1);
 
 	ieee80211_stop_mbssid(sdata);
 	link_conf->enable_beacon = false;
@@ -2374,7 +2374,8 @@ static int ieee80211_add_station(struct wiphy *wiphy, struct net_device *dev,
 }
 
 static int ieee80211_del_station(struct wiphy *wiphy, struct net_device *dev,
-				 struct station_del_parameters *params)
+				 struct station_del_parameters *params,
+				 int link_id)
 {
 	struct ieee80211_sub_if_data *sdata;
 
@@ -2383,7 +2384,7 @@ static int ieee80211_del_station(struct wiphy *wiphy, struct net_device *dev,
 	if (params->mac)
 		return sta_info_destroy_addr_bss(sdata, params->mac);
 
-	sta_info_flush(sdata);
+	sta_info_flush(sdata, link_id);
 	return 0;
 }
 
diff --git a/net/mac80211/ibss.c b/net/mac80211/ibss.c
index 6a06fd41841f..0ea5cdff7518 100644
--- a/net/mac80211/ibss.c
+++ b/net/mac80211/ibss.c
@@ -241,7 +241,7 @@ static void __ieee80211_sta_join_ibss(struct ieee80211_sub_if_data *sdata,
 	drv_reset_tsf(local, sdata);
 
 	if (!ether_addr_equal(ifibss->bssid, bssid))
-		sta_info_flush(sdata);
+		sta_info_flush(sdata, -1);
 
 	/* if merging, indicate to driver that we leave the old IBSS */
 	if (sdata->vif.cfg.ibss_joined) {
@@ -695,7 +695,7 @@ static void ieee80211_ibss_disconnect(struct ieee80211_sub_if_data *sdata)
 
 	ifibss->state = IEEE80211_IBSS_MLME_SEARCH;
 
-	sta_info_flush(sdata);
+	sta_info_flush(sdata, -1);
 
 	spin_lock_bh(&ifibss->incomplete_lock);
 	while (!list_empty(&ifibss->incomplete_stations)) {
diff --git a/net/mac80211/iface.c b/net/mac80211/iface.c
index 1c108187b335..c2f7cc3ec2c5 100644
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -529,7 +529,7 @@ static void ieee80211_do_stop(struct ieee80211_sub_if_data *sdata, bool going_do
 	 * would have removed them, but in other modes there shouldn't
 	 * be any stations.
 	 */
-	flushed = sta_info_flush(sdata);
+	flushed = sta_info_flush(sdata, -1);
 	WARN_ON_ONCE(sdata->vif.type != NL80211_IFTYPE_AP_VLAN && flushed > 0);
 
 	/* don't count this interface for allmulti while it is down */
diff --git a/net/mac80211/mesh.c b/net/mac80211/mesh.c
index 95c3b4495af0..36193c2538ca 100644
--- a/net/mac80211/mesh.c
+++ b/net/mac80211/mesh.c
@@ -1290,7 +1290,7 @@ void ieee80211_stop_mesh(struct ieee80211_sub_if_data *sdata)
 	netif_carrier_off(sdata->dev);
 
 	/* flush STAs and mpaths on this iface */
-	sta_info_flush(sdata);
+	sta_info_flush(sdata, -1);
 	ieee80211_free_keys(sdata, true);
 	mesh_path_flush_by_iface(sdata);
 
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index a1f066ab1c7e..9df162181755 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -3011,7 +3011,7 @@ static void ieee80211_set_disassoc(struct ieee80211_sub_if_data *sdata,
 	sdata->vif.cfg.ssid_len = 0;
 
 	/* remove AP and TDLS peers */
-	sta_info_flush(sdata);
+	sta_info_flush(sdata, -1);
 
 	/* finally reset all BSS / config parameters */
 	if (!ieee80211_vif_is_mld(&sdata->vif))
diff --git a/net/mac80211/ocb.c b/net/mac80211/ocb.c
index b44896e14522..0741fe1a0341 100644
--- a/net/mac80211/ocb.c
+++ b/net/mac80211/ocb.c
@@ -210,7 +210,7 @@ int ieee80211_ocb_leave(struct ieee80211_sub_if_data *sdata)
 	struct sta_info *sta;
 
 	ifocb->joined = false;
-	sta_info_flush(sdata);
+	sta_info_flush(sdata, -1);
 
 	spin_lock_bh(&ifocb->incomplete_lock);
 	while (!list_empty(&ifocb->incomplete_stations)) {
diff --git a/net/mac80211/sta_info.c b/net/mac80211/sta_info.c
index e41eb457dbe3..a9113ed6ce34 100644
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -1572,7 +1572,8 @@ void sta_info_stop(struct ieee80211_local *local)
 }
 
 
-int __sta_info_flush(struct ieee80211_sub_if_data *sdata, bool vlans)
+int __sta_info_flush(struct ieee80211_sub_if_data *sdata, bool vlans,
+		     int link_id)
 {
 	struct ieee80211_local *local = sdata->local;
 	struct sta_info *sta, *tmp;
@@ -1586,12 +1587,17 @@ int __sta_info_flush(struct ieee80211_sub_if_data *sdata, bool vlans)
 
 	mutex_lock(&local->sta_mtx);
 	list_for_each_entry_safe(sta, tmp, &local->sta_list, list) {
-		if (sdata == sta->sdata ||
-		    (vlans && sdata->bss == sta->sdata->bss)) {
-			if (!WARN_ON(__sta_info_destroy_part1(sta)))
-				list_add(&sta->free_list, &free_list);
-			ret++;
-		}
+		if (sdata != sta->sdata &&
+		    (!vlans || sdata->bss != sta->sdata->bss))
+			continue;
+
+		if (link_id >= 0 && !(sta->sta.valid_links & BIT(link_id)))
+			continue;
+
+		if (!WARN_ON(__sta_info_destroy_part1(sta)))
+			list_add(&sta->free_list, &free_list);
+
+		ret++;
 	}
 
 	if (!list_empty(&free_list)) {
diff --git a/net/mac80211/sta_info.h b/net/mac80211/sta_info.h
index 0e4018a14cb4..93105bf06e85 100644
--- a/net/mac80211/sta_info.h
+++ b/net/mac80211/sta_info.h
@@ -919,8 +919,12 @@ void sta_info_stop(struct ieee80211_local *local);
  *
  * @sdata: sdata to remove all stations from
  * @vlans: if the given interface is an AP interface, also flush VLANs
+ * @link_id: if given (>=0), all those STA entries using @link_id only
+ *	     will be removed. If -1 is passed, all STA entries will be
+ *	     removed.
  */
-int __sta_info_flush(struct ieee80211_sub_if_data *sdata, bool vlans);
+int __sta_info_flush(struct ieee80211_sub_if_data *sdata, bool vlans,
+		     int link_id);
 
 /**
  * sta_info_flush - flush matching STA entries from the STA table
@@ -928,10 +932,14 @@ int __sta_info_flush(struct ieee80211_sub_if_data *sdata, bool vlans);
  * Returns the number of removed STA entries.
  *
  * @sdata: sdata to remove all stations from
+ * @link_id: if given (>=0), all those STA entries using @link_id only
+ *	     will be removed. If -1 is passed, all STA entries will be
+ *	     removed.
  */
-static inline int sta_info_flush(struct ieee80211_sub_if_data *sdata)
+static inline int sta_info_flush(struct ieee80211_sub_if_data *sdata,
+				 int link_id)
 {
-	return __sta_info_flush(sdata, false);
+	return __sta_info_flush(sdata, false, link_id);
 }
 
 void sta_set_rate_info_tx(struct sta_info *sta,
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 07df6623679e..f5d8e9b075b4 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -8343,10 +8343,15 @@ static int nl80211_del_station(struct sk_buff *skb, struct genl_info *info)
 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
 	struct net_device *dev = info->user_ptr[1];
 	struct station_del_parameters params;
+	struct wireless_dev *wdev = NULL;
 	int ret;
+	int link_id = nl80211_link_id_or_invalid(info->attrs);
 
 	memset(&params, 0, sizeof(params));
 
+	if (dev)
+		wdev = dev->ieee80211_ptr;
+
 	if (info->attrs[NL80211_ATTR_MAC])
 		params.mac = nla_data(info->attrs[NL80211_ATTR_MAC]);
 
@@ -8391,8 +8396,12 @@ static int nl80211_del_station(struct sk_buff *skb, struct genl_info *info)
 		params.reason_code = WLAN_REASON_PREV_AUTH_NOT_VALID;
 	}
 
+	/* Link ID not expected in case of non-ML operation */
+	if (wdev && !wdev->valid_links && link_id != -1)
+		return -EINVAL;
+
 	wdev_lock(dev->ieee80211_ptr);
-	ret = rdev_del_station(rdev, dev, &params);
+	ret = rdev_del_station(rdev, dev, &params, link_id);
 	wdev_unlock(dev->ieee80211_ptr);
 
 	return ret;
diff --git a/net/wireless/rdev-ops.h b/net/wireless/rdev-ops.h
index 2e851ac53566..bfc9b9d76f3a 100644
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -205,11 +205,12 @@ static inline int rdev_add_station(struct cfg80211_registered_device *rdev,
 
 static inline int rdev_del_station(struct cfg80211_registered_device *rdev,
 				   struct net_device *dev,
-				   struct station_del_parameters *params)
+				   struct station_del_parameters *params,
+				   int link_id)
 {
 	int ret;
-	trace_rdev_del_station(&rdev->wiphy, dev, params);
-	ret = rdev->ops->del_station(&rdev->wiphy, dev, params);
+	trace_rdev_del_station(&rdev->wiphy, dev, params, link_id);
+	ret = rdev->ops->del_station(&rdev->wiphy, dev, params, link_id);
 	trace_rdev_return_int(&rdev->wiphy, ret);
 	return ret;
 }
diff --git a/net/wireless/trace.h b/net/wireless/trace.h
index 60d4de422406..445d5a971b6f 100644
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -897,8 +897,9 @@ DECLARE_EVENT_CLASS(station_del,
 
 DEFINE_EVENT(station_del, rdev_del_station,
 	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
-		 struct station_del_parameters *params),
-	TP_ARGS(wiphy, netdev, params)
+		 struct station_del_parameters *params,
+		 int link_id),
+	TP_ARGS(wiphy, netdev, params, link_id)
 );
 
 DEFINE_EVENT(wiphy_netdev_mac_evt, rdev_get_station,
-- 
2.34.1

