From fb3eee23ab31a27d3a798127715dddef98774c56 Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Mon, 21 Aug 2023 11:49:36 +0530
Subject: [PATCH] coresight: Adding new reserved ETR dump memory

New reserved ETR memory region is added to collect the trace data.

Change-Id: Ia7ab3b2f262d16c683ba48a2d854eacdc05db40f
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 .../hwtracing/coresight/coresight-tmc-core.c  | 28 +++++++++
 .../hwtracing/coresight/coresight-tmc-etr.c   | 60 ++++++++++++++++++-
 drivers/hwtracing/coresight/coresight-tmc.h   |  4 ++
 3 files changed, 91 insertions(+), 1 deletion(-)

diff --git a/drivers/hwtracing/coresight/coresight-tmc-core.c b/drivers/hwtracing/coresight/coresight-tmc-core.c
index 07abf28ad725..676bab92fc32 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-core.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-core.c
@@ -23,6 +23,7 @@
 #include <linux/of.h>
 #include <linux/coresight.h>
 #include <linux/amba/bus.h>
+#include <linux/of_reserved_mem.h>
 
 #include "coresight-priv.h"
 #include "coresight-tmc.h"
@@ -427,6 +428,32 @@ static u32 tmc_etr_get_max_burst_size(struct device *dev)
 	return burst_size;
 }
 
+static void tmc_get_reserved_region(struct device *dev)
+{
+	struct device_node *np;
+	struct reserved_mem *rmem;
+	struct tmc_drvdata *drvdata = dev_get_drvdata(dev);
+
+	np = of_parse_phandle(dev->of_node, "memory-region", 0);
+	if (!np) {
+		dev_info(dev, "No reserved region for ETR specified\n");
+		return;
+	}
+
+	rmem = of_reserved_mem_lookup(np);
+	of_node_put(np);
+	if (!rmem) {
+		dev_err(dev, "unable to acquire reserved ETR memory-region\n");
+		return;
+	}
+
+	drvdata->etr_rsvd_vaddr = devm_ioremap(dev, rmem->base,rmem->size);
+	if (drvdata->etr_rsvd_vaddr) {
+		drvdata->etr_rsvd_paddr = rmem->base;
+		drvdata->rsvd_size =  rmem->size;
+	}
+}
+
 static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 {
 	int ret = 0;
@@ -467,6 +494,7 @@ static int tmc_probe(struct amba_device *adev, const struct amba_id *id)
 	if (drvdata->config_type == TMC_CONFIG_TYPE_ETR) {
 		drvdata->size = tmc_etr_get_default_buffer_size(dev);
 		drvdata->max_burst_size = tmc_etr_get_max_burst_size(dev);
+		tmc_get_reserved_region(dev);
 	} else {
 		drvdata->size = readl_relaxed(drvdata->base + TMC_RSZ) * 4;
 	}
diff --git a/drivers/hwtracing/coresight/coresight-tmc-etr.c b/drivers/hwtracing/coresight/coresight-tmc-etr.c
index 368f2e5a8627..592a5a59241b 100644
--- a/drivers/hwtracing/coresight/coresight-tmc-etr.c
+++ b/drivers/hwtracing/coresight/coresight-tmc-etr.c
@@ -652,6 +652,9 @@ static void tmc_etr_sync_flat_buf(struct etr_buf *etr_buf, u64 rrp, u64 rwp)
 	else
 		etr_buf->len = rwp - rrp;
 
+	/* No need to perform the DMA sync for the reserved memory */
+	if (etr_buf->mode == ETR_MODE_RESERVED)
+		return;
 	/*
 	 * The driver always starts tracing at the beginning of the buffer,
 	 * the only reason why we would get a wrap around is when the buffer
@@ -686,6 +689,53 @@ static const struct etr_buf_operations etr_flat_buf_ops = {
 	.get_data = tmc_etr_get_data_flat_buf,
 };
 
+static int tmc_etr_alloc_rsvd_buf(struct tmc_drvdata *drvdata,
+				  struct etr_buf *etr_buf, int node,
+				  void **pages)
+{
+	struct etr_flat_buf *flat_buf;
+
+	flat_buf = kzalloc(sizeof(*flat_buf), GFP_KERNEL);
+	if (!flat_buf)
+		return -ENOMEM;
+
+	flat_buf->vaddr = drvdata->etr_rsvd_vaddr;
+
+	if (!flat_buf->vaddr) {
+		kfree(flat_buf);
+		return -ENOMEM;
+	}
+
+	flat_buf->size = drvdata->rsvd_size;
+	flat_buf->dev = &drvdata->csdev->dev;
+	flat_buf->daddr = drvdata->etr_rsvd_paddr;
+	etr_buf->hwaddr = drvdata->etr_rsvd_paddr;
+	etr_buf->mode = ETR_MODE_RESERVED;
+	etr_buf->private = flat_buf;
+
+	return 0;
+}
+
+/*
+ * Don't free the q6mem ETR region, no-op function to avoid warning
+ * from tmc_free_etr_buf function
+ */
+static void tmc_etr_free_rsvd_buf(struct etr_buf *etr_buf)
+{
+}
+
+
+/*
+ * sync and get_data callback are same as in etr_flat_buf_ops,
+ * since Q6 ETR region also a contiguous memory
+ */
+static const struct etr_buf_operations etr_rsvd_mem_buf_ops = {
+	.alloc = tmc_etr_alloc_rsvd_buf,
+	.free = tmc_etr_free_rsvd_buf,
+	.sync = tmc_etr_sync_flat_buf,
+	.get_data = tmc_etr_get_data_flat_buf,
+};
+
 /*
  * tmc_etr_alloc_sg_buf: Allocate an SG buf @etr_buf. Setup the parameters
  * appropriately.
@@ -813,6 +863,7 @@ static const struct etr_buf_operations *etr_buf_ops[] = {
 	[ETR_MODE_FLAT] = &etr_flat_buf_ops,
 	[ETR_MODE_ETR_SG] = &etr_sg_buf_ops,
 	[ETR_MODE_CATU] = NULL,
+	[ETR_MODE_RESERVED] = &etr_rsvd_mem_buf_ops,
 };
 
 void tmc_etr_set_catu_ops(const struct etr_buf_operations *catu)
@@ -838,6 +889,7 @@ static inline int tmc_etr_mode_alloc_buf(int mode,
 	case ETR_MODE_FLAT:
 	case ETR_MODE_ETR_SG:
 	case ETR_MODE_CATU:
+	case ETR_MODE_RESERVED:
 		if (etr_buf_ops[mode] && etr_buf_ops[mode]->alloc)
 			rc = etr_buf_ops[mode]->alloc(drvdata, etr_buf,
 						      node, pages);
@@ -891,7 +943,12 @@ static struct etr_buf *tmc_alloc_etr_buf(struct tmc_drvdata *drvdata,
 	 * Fallback to available mechanisms.
 	 *
 	 */
-	if (!pages &&
+	if (size == SZ_1M){
+		rc =  tmc_etr_mode_alloc_buf(ETR_MODE_RESERVED, drvdata,
+					    etr_buf, node, pages);
+		goto err_check;
+	}
+	if (rc && !pages &&
 	    (!has_sg || has_iommu || size < SZ_1M))
 		rc = tmc_etr_mode_alloc_buf(ETR_MODE_FLAT, drvdata,
 					    etr_buf, node, pages);
@@ -901,6 +958,7 @@ static struct etr_buf *tmc_alloc_etr_buf(struct tmc_drvdata *drvdata,
 	if (rc && has_catu)
 		rc = tmc_etr_mode_alloc_buf(ETR_MODE_CATU, drvdata,
 					    etr_buf, node, pages);
+err_check:
 	if (rc) {
 		kfree(etr_buf);
 		return ERR_PTR(rc);
diff --git a/drivers/hwtracing/coresight/coresight-tmc.h b/drivers/hwtracing/coresight/coresight-tmc.h
index 66959557cf39..19e5dcda4979 100644
--- a/drivers/hwtracing/coresight/coresight-tmc.h
+++ b/drivers/hwtracing/coresight/coresight-tmc.h
@@ -135,6 +135,7 @@ enum etr_mode {
 	ETR_MODE_FLAT,		/* Uses contiguous flat buffer */
 	ETR_MODE_ETR_SG,	/* Uses in-built TMC ETR SG mechanism */
 	ETR_MODE_CATU,		/* Use SG mechanism in CATU */
+	ETR_MODE_RESERVED,
 };
 
 struct etr_buf_operations;
@@ -211,6 +212,9 @@ struct tmc_drvdata {
 	struct mutex		idr_mutex;
 	struct etr_buf		*sysfs_buf;
 	struct etr_buf		*perf_buf;
+	void __iomem		*etr_rsvd_vaddr;
+	dma_addr_t		etr_rsvd_paddr;
+	u32			rsvd_size;
 };
 
 struct etr_buf_operations {
-- 
2.34.1

