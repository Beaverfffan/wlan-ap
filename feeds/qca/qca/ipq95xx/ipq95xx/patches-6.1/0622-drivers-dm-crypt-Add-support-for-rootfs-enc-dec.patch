From f6e220171683ed6e284ecd439fb59b37937ca237 Mon Sep 17 00:00:00 2001
From: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Date: Wed, 17 Jan 2024 13:25:22 +0530
Subject: [PATCH] drivers: dm-crypt: Add support for rootfs enc/dec

Change-Id: Id0cb0d533228aabd9c4e2851364b73f1b341dbcf
Signed-off-by: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
(cherry picked from commit ba27f9ab4740f3fff1c32b98623025e85b587c3d)
---
 drivers/firmware/qcom_scm.c  |  68 +++++++++++++++++-
 drivers/firmware/qcom_scm.h  |   5 ++
 drivers/md/dm-crypt.c        | 135 ++++++++++++++++++++++++++++++-----
 drivers/mmc/host/sdhci-msm.c |  11 +--
 include/linux/qcom_scm.h     |  13 +++-
 5 files changed, 201 insertions(+), 31 deletions(-)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index 6ef1404bb313..9d67c5762603 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -296,6 +296,70 @@ static bool __qcom_scm_is_call_available(struct device *dev, u32 svc_id,
 	return ret ? false : !!res.result[0];
 }
 
+int qcom_context_ice_sec(u32 type, u8 key_size,
+			 u8 algo_mode, u8 *data_ctxt, u32 data_ctxt_len,
+			 u8 *salt_ctxt, u32 salt_ctxt_len)
+{
+	int ret;
+	struct qcom_scm_res res;
+	void *data_ctxbuf = NULL, *salt_ctxbuf = NULL;
+	dma_addr_t data_context_phy, salt_context_phy = 0;
+
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SVC_ICE,
+		.cmd = QTI_SCM_ICE_CONTEXT_CMD,
+		.arginfo = QCOM_SCM_ARGS(7, QTI_SCM_PARAM_VAL, QTI_SCM_PARAM_VAL,
+				QTI_SCM_PARAM_VAL, QTI_SCM_PARAM_BUF_RO, QTI_SCM_PARAM_VAL,
+				QTI_SCM_PARAM_BUF_RO, QTI_SCM_PARAM_VAL),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	data_ctxbuf = dma_alloc_coherent(__scm->dev, data_ctxt_len,
+			&data_context_phy, GFP_KERNEL);
+	if (!data_ctxbuf)
+		return -ENOMEM;
+
+	if (data_ctxt) {
+		memcpy(data_ctxbuf, data_ctxt, data_ctxt_len);
+	} else {
+		ret = -EINVAL;
+		goto dma_unmap_data_ctxbuf;
+	}
+	if (algo_mode == ICE_CRYPTO_ALGO_MODE_HW_AES_XTS && salt_ctxt) {
+		salt_ctxbuf = dma_alloc_coherent(__scm->dev, salt_ctxt_len,
+				&salt_context_phy, GFP_KERNEL);
+		if (!salt_ctxbuf) {
+			ret = -ENOMEM;
+			goto dma_unmap_data_ctxbuf;
+		}
+
+		memcpy(salt_ctxbuf, salt_ctxt, salt_ctxt_len);
+	}
+
+	desc.args[0] = type;
+	desc.args[1] = key_size;
+	desc.args[2] = algo_mode;
+	desc.args[3] = data_context_phy;
+	desc.args[4] = data_ctxt_len;
+	desc.args[5] = salt_context_phy;
+	desc.args[6] = salt_ctxt_len;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+
+	if (algo_mode == ICE_CRYPTO_ALGO_MODE_HW_AES_XTS && salt_ctxt) {
+		memzero_explicit(salt_ctxt, salt_ctxt_len);
+		dma_free_coherent(__scm->dev, salt_ctxt_len,
+				salt_ctxbuf, salt_context_phy);
+	}
+
+dma_unmap_data_ctxbuf:
+	memzero_explicit(data_ctxbuf, data_ctxt_len);
+	dma_free_coherent(__scm->dev, data_ctxt_len, data_ctxbuf, data_context_phy);
+	return ret ?  : res.result[0];
+
+}
+EXPORT_SYMBOL(qcom_context_ice_sec);
+
 int qcom_config_sec_ice(void *buf, int size)
 {
 	int ret;
@@ -304,7 +368,7 @@ int qcom_config_sec_ice(void *buf, int size)
 	struct qcom_scm_desc desc = {
 		.svc = QCOM_SVC_ICE,
 		.cmd = QCOM_SCM_ICE_CMD,
-		.arginfo = QCOM_SCM_ARGS(2),
+		.arginfo = QCOM_SCM_ARGS(2, QTI_SCM_PARAM_BUF_RO, QTI_SCM_PARAM_VAL),
 		.owner = ARM_SMCCC_OWNER_SIP,
 	};
 
@@ -314,7 +378,7 @@ int qcom_config_sec_ice(void *buf, int size)
 	desc.args[1] = size;
 
 	ret = qcom_scm_call(__scm->dev, &desc, &res);
-	return ret ? false : !!res.result[0];
+	return ret ?  : res.result[0];
 }
 EXPORT_SYMBOL(qcom_config_sec_ice);
 
diff --git a/drivers/firmware/qcom_scm.h b/drivers/firmware/qcom_scm.h
index cb9582f46fdb..525bd7ae7761 100644
--- a/drivers/firmware/qcom_scm.h
+++ b/drivers/firmware/qcom_scm.h
@@ -118,6 +118,11 @@ extern int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
 #define QCOM_SCM_IO_READ		0x01
 #define QCOM_SCM_IO_WRITE		0x02
 
+#define QTI_SCM_PARAM_BUF_RO	0x1
+#define QTI_SCM_PARAM_VAL		0x0
+#define QTI_SCM_ICE_CMD			0x1
+#define QTI_SCM_ICE_CONTEXT_CMD	0x3
+
 #define QCOM_SCM_SVC_INFO		0x06
 #define QCOM_SCM_INFO_IS_CALL_AVAIL	0x01
 #define QCOM_SCM_IS_FEATURE_AVAIL	0x03
diff --git a/drivers/md/dm-crypt.c b/drivers/md/dm-crypt.c
index 766a2f9b75d8..8cdf373121ee 100644
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@ -41,10 +41,13 @@
 #include <keys/trusted-type.h>
 #include <linux/blk-crypto.h>
 #include <linux/device-mapper.h>
+#include <linux/qcom_scm.h>
 
 #include "dm-audit.h"
 
 #define DM_MSG_PREFIX "crypt"
+#define DATA_COTEXT_LEN 128
+#define SALT_COTEXT_LEN 128
 
 /*
  * context holding the current state of a multi-part conversion
@@ -136,7 +139,7 @@ enum flags { DM_CRYPT_SUSPENDED, DM_CRYPT_KEY_VALID,
 	     DM_CRYPT_SAME_CPU, DM_CRYPT_NO_OFFLOAD,
 	     DM_CRYPT_NO_READ_WORKQUEUE, DM_CRYPT_NO_WRITE_WORKQUEUE,
 	     DM_CRYPT_WRITE_INLINE, DM_CRYPT_INLINE_ENCRYPTION,
-	     DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY };
+	     DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY, DM_CRYPT_INLINE_OEMSEED_CRBK };
 
 enum cipher_flags {
 	CRYPT_MODE_INTEGRITY_AEAD,	/* Use authenticated mode for cipher */
@@ -2691,26 +2694,26 @@ static int crypt_set_key(struct crypt_config *cc, char *key)
 	int key_string_len = strlen(key);
 
 	/* Hyphen (which gives a key_size of zero) means there is no key. */
-	if (!cc->key_size && strcmp(key, "-"))
-		goto out;
-
-	/* ':' means the key is in kernel keyring, short-circuit normal key processing */
-	if (key[0] == ':') {
-		r = crypt_set_keyring_key(cc, key + 1);
-		goto out;
-	}
-
-	/* clear the flag since following operations may invalidate previously valid key */
-	clear_bit(DM_CRYPT_KEY_VALID, &cc->flags);
+	if (!test_bit(DM_CRYPT_INLINE_OEMSEED_CRBK, &cc->flags)) {
+		if (!cc->key_size && strcmp(key, "-"))
+			goto out;
+		/* ':' means the key is in kernel keyring, short-circuit normal key processing */
+		if (key[0] == ':') {
+			r = crypt_set_keyring_key(cc, key + 1);
+			goto out;
+		}
 
-	/* wipe references to any kernel keyring key */
-	kfree_sensitive(cc->key_string);
-	cc->key_string = NULL;
+		/* clear the flag since following operations may invalidate previously valid key */
+		clear_bit(DM_CRYPT_KEY_VALID, &cc->flags);
 
-	/* Decode key from its hex representation. */
-	if (cc->key_size && hex2bin(cc->key, key, cc->key_size) < 0)
-		goto out;
+		/* wipe references to any kernel keyring key */
+		kfree_sensitive(cc->key_string);
+		cc->key_string = NULL;
 
+		/* Decode key from its hex representation. */
+		if (cc->key_size && hex2bin(cc->key, key, cc->key_size) < 0)
+			goto out;
+	}
 	r = crypt_setkey(cc);
 	if (!r)
 		set_bit(DM_CRYPT_KEY_VALID, &cc->flags);
@@ -3195,6 +3198,92 @@ static int crypt_ctr_cipher(struct dm_target *ti, char *cipher_in, char *key)
 	return ret;
 }
 
+#ifdef CONFIG_BLK_INLINE_ENCRYPTION
+static int qcom_set_ice_context(struct dm_target *ti, char **argv)
+{
+	struct crypt_config *cc = ti->private;
+	uint8_t *hex_data_context = NULL, *hex_salt_context = NULL;
+	uint32_t hex_salt_len = 0, hex_data_len = 0;
+	char *buf = NULL;
+	unsigned short algo_mode, key_size;
+	int i, ret = -1;
+
+	switch (cc->crypto_mode) {
+
+	case BLK_ENCRYPTION_MODE_AES_128_XTS:
+		algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_XTS;
+		key_size = ICE_CRYPTO_KEY_SIZE_HW_128;
+		break;
+	case BLK_ENCRYPTION_MODE_AES_256_XTS:
+		algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_XTS;
+		key_size = ICE_CRYPTO_KEY_SIZE_HW_256;
+		break;
+	case BLK_ENCRYPTION_MODE_AES_128_ECB:
+		algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_ECB;
+		key_size = ICE_CRYPTO_KEY_SIZE_HW_128;
+		break;
+	case BLK_ENCRYPTION_MODE_AES_256_ECB:
+		algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_ECB;
+		key_size = ICE_CRYPTO_KEY_SIZE_HW_256;
+		break;
+	default:
+		ti->error = "Unhandled crypto mode";
+		return -EINVAL;
+	}
+
+	hex_data_context  = kmalloc(DATA_COTEXT_LEN, GFP_KERNEL);
+	if (!hex_data_context) {
+		DMERR("%s: no memory allocated\n", __func__);
+		return -ENOMEM;
+	}
+
+	buf = argv[9];
+	hex_data_len = strlen(argv[9]) / 2;
+	if (hex_data_len != DATA_COTEXT_LEN || strlen(argv[9]) % 2 != 0) {
+		DMERR("%s: Invalid data context length. Context length \
+				must be %d\n", __func__, DATA_COTEXT_LEN * 2);
+		goto out;
+	}
+	for (i = 0; i < hex_data_len; i++) {
+		sscanf(buf, "%2hhx", &hex_data_context[i]);
+		buf += 2;
+	}
+
+
+	if (algo_mode == ICE_CRYPTO_ALGO_MODE_HW_AES_XTS) {
+		hex_salt_context = kmalloc(SALT_COTEXT_LEN, GFP_KERNEL);
+		if (!hex_salt_context) {
+			DMERR("%s: no memory allocated\n", __func__);
+			goto out;
+		}
+
+		buf = argv[10];
+		hex_salt_len = strlen(argv[10]) / 2;
+		if (hex_salt_len != SALT_COTEXT_LEN || strlen(argv[10]) % 2 != 0) {
+			DMERR("%s: Invalid salt context length. Context length \
+					must be %d\n", __func__, SALT_COTEXT_LEN * 2);
+			goto out;
+		}
+		for (i = 0; i < hex_salt_len; i++) {
+			sscanf(buf, "%2hhx", &hex_salt_context[i]);
+			buf += 2;
+		}
+		buf = NULL;
+	}
+
+	ret = qcom_context_ice_sec(1, key_size, algo_mode, hex_data_context, hex_data_len,
+			hex_salt_context, hex_salt_len);
+	if (ret)
+		DMERR("%s: ice context configuration fail\n", __func__);
+
+out:
+	kfree(hex_data_context);
+	if (hex_salt_context)
+		kfree(hex_salt_context);
+	return ret;
+}
+#endif
+
 static int crypt_ctr_optional(struct dm_target *ti, unsigned int argc, char **argv)
 {
 	struct crypt_config *cc = ti->private;
@@ -3239,6 +3328,9 @@ static int crypt_ctr_optional(struct dm_target *ti, unsigned int argc, char **ar
 			set_bit(DM_CRYPT_INLINE_ENCRYPTION, &cc->flags);
 		else if (!strcasecmp(opt_string, "hwkey"))
 			set_bit(DM_CRYPT_INLINE_ENCRYPTION_USE_HWKEY, &cc->flags);
+		else if (!strcasecmp(opt_string, "oemseed") ||
+				!strcasecmp(opt_string, "CRBK"))
+			set_bit(DM_CRYPT_INLINE_OEMSEED_CRBK, &cc->flags);
 #endif
 		else if (sscanf(opt_string, "integrity:%u:", &val) == 1) {
 			if (val == 0 || val > MAX_TAG_SIZE) {
@@ -3374,6 +3466,13 @@ static int crypt_ctr(struct dm_target *ti, unsigned int argc, char **argv)
 	if (ret < 0)
 		goto bad;
 
+#ifdef CONFIG_BLK_INLINE_ENCRYPTION
+	if (test_bit(DM_CRYPT_INLINE_OEMSEED_CRBK, &cc->flags)) {
+		ret = qcom_set_ice_context(ti, argv);
+		if (ret < 0)
+			goto bad;
+	}
+#endif
 	if (test_bit(DM_CRYPT_INLINE_ENCRYPTION, &cc->flags))
 		return 0;
 
diff --git a/drivers/mmc/host/sdhci-msm.c b/drivers/mmc/host/sdhci-msm.c
index 2af3c2e921e8..933adfc5c82a 100644
--- a/drivers/mmc/host/sdhci-msm.c
+++ b/drivers/mmc/host/sdhci-msm.c
@@ -288,16 +288,6 @@ struct sdhci_msm_host {
 	bool vqmmc_enabled;
 };
 
-enum ice_cryto_algo_mode {
-	ICE_CRYPTO_ALGO_MODE_HW_AES_ECB = 0x0,
-	ICE_CRYPTO_ALGO_MODE_HW_AES_XTS = 0x3,
-};
-
-enum ice_crpto_key_size {
-	ICE_CRYPTO_KEY_SIZE_HW_128 = 0x0,
-	ICE_CRYPTO_KEY_SIZE_HW_256 = 0x2,
-};
-
 enum ice_crpto_key_mode {
 	ICE_CRYPTO_USE_KEY0_HW_KEY = 0x0,
 	ICE_CRYPTO_USE_KEY1_HW_KEY = 0x1,
@@ -2076,6 +2066,7 @@ static int sdhci_msm_ice_set_hwkey_config(struct cqhci_host *cq_host,
 		ice->algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_ECB;
 		ice->key_size = ICE_CRYPTO_KEY_SIZE_HW_128;
 		ice->key_mode = ICE_CRYPTO_USE_KEY0_HW_KEY;
+		ice->index = 0;
 		break;
 	case QCOM_SCM_ICE_CIPHER_AES_256_ECB:
 		ice->algo_mode = ICE_CRYPTO_ALGO_MODE_HW_AES_ECB;
diff --git a/include/linux/qcom_scm.h b/include/linux/qcom_scm.h
index 6c7b52a4c221..84d1aecd928c 100644
--- a/include/linux/qcom_scm.h
+++ b/include/linux/qcom_scm.h
@@ -169,6 +169,16 @@ enum qcom_scm_ice_cipher {
 	QCOM_SCM_ICE_CIPHER_AES_256_ECB = 5,
 };
 
+enum ice_cryto_algo_mode {
+	ICE_CRYPTO_ALGO_MODE_HW_AES_ECB = 0x0,
+	ICE_CRYPTO_ALGO_MODE_HW_AES_XTS = 0x3,
+};
+
+enum ice_crpto_key_size {
+	ICE_CRYPTO_KEY_SIZE_HW_128 = 0x0,
+	ICE_CRYPTO_KEY_SIZE_HW_256 = 0x2,
+};
+
 #define QCOM_SCM_VMID_HLOS       0x3
 #define QCOM_SCM_VMID_MSS_MSA    0xF
 #define QCOM_SCM_VMID_WLAN       0x18
@@ -265,7 +275,8 @@ extern int qcom_scm_ocmem_lock(enum qcom_scm_ocmem_client id, u32 offset,
 			       u32 size, u32 mode);
 extern int qcom_scm_ocmem_unlock(enum qcom_scm_ocmem_client id, u32 offset,
 				 u32 size);
-
+extern int qcom_context_ice_sec(u32 type, u8 key_size, u8 algo_mode,
+				u8 *data_ctxt, u32 data_ctxt_len, u8 *salt_ctxt, u32 salt_ctxt_len);
 extern bool qcom_scm_ice_available(void);
 extern bool qcom_scm_ice_hwkey_available(void);
 extern int qcom_scm_ice_invalidate_key(u32 index);
-- 
2.34.1

