From df6e73a5d34135fd2967e7439db14076039d95c7 Mon Sep 17 00:00:00 2001
From: Timple Raj M <quic_timple@quicinc.com>
Date: Thu, 24 Aug 2023 20:47:17 +0530
Subject: [PATCH] samples: qmi: Move pvt_data members to qmi_sample struct

This patch moves pvt_data structure members to qmi_sample
structure so that the members can be used for all clients

Change-Id: I17198d588c478065c2418a9cad928e38b025fdfb
Signed-off-by: Timple Raj M <quic_timple@quicinc.com>
---
 samples/qmi/qmi_sample_client.c | 78 ++++++++++++++++-----------------
 1 file changed, 39 insertions(+), 39 deletions(-)

diff --git a/samples/qmi/qmi_sample_client.c b/samples/qmi/qmi_sample_client.c
index dd7e3ab427d9..d79b0f0935cf 100644
--- a/samples/qmi/qmi_sample_client.c
+++ b/samples/qmi/qmi_sample_client.c
@@ -511,14 +511,6 @@ static const struct qmi_elem_info test_data_resp_msg_v01_ei[] = {
 	{}
 };
 
-struct qmi_sample_pvt_data {
-	struct list_head data_list;
-	struct completion complete;
-	atomic_t cnt, pass, fail;
-};
-
-static struct qmi_sample_pvt_data *pvt_data;
-
 /*
  * ping_write() - ping_pong debugfs file write handler
  * @file:	debugfs file context
@@ -1096,6 +1088,10 @@ static const struct qmi_msg_handler qmi_sample_handlers[] = {
 struct qmi_sample {
 	struct qmi_handle qmi;
 
+	struct list_head data_list;
+	struct completion complete;
+	atomic_t cnt, pass, fail;
+
 	struct dentry *de_dir;
 	struct dentry *de_data;
 	struct dentry *de_ping;
@@ -1117,9 +1113,12 @@ static struct dentry *qmi_debug_dir;
 static void update_status(struct qmi_handle *qmi)
 {
 	unsigned int max = nthreads * niterations;
-	unsigned int count = atomic_read(&pvt_data->cnt);
+	unsigned int count;
 	unsigned int percent;
 	static unsigned int pre_percent;
+	struct qmi_sample *sample = container_of(qmi, struct qmi_sample, qmi);
+
+	count = atomic_read(&sample->cnt);
 
 	percent = (count * 100)/max;
 
@@ -1135,8 +1134,9 @@ static int test_qmi_ping_pong_send_msg(struct qmi_handle *qmi)
 	struct test_ping_req_msg_v01 req = {};
 	struct qmi_txn txn;
 	int ret;
+	struct qmi_sample *sample = container_of(qmi, struct qmi_sample, qmi);
 
-	atomic_inc(&pvt_data->cnt);
+	atomic_inc(&sample->cnt);
 
 	memcpy(req.ping, "ping", sizeof(req.ping));
 
@@ -1149,7 +1149,7 @@ static int test_qmi_ping_pong_send_msg(struct qmi_handle *qmi)
 			TEST_PING_REQ_MAX_MSG_LEN_V01,
 			test_ping_req_msg_v01_ei, &req);
 	if (ret < 0) {
-		atomic_inc(&pvt_data->fail);
+		atomic_inc(&sample->fail);
 		qmi_txn_cancel(&txn);
 		return ret;
 	}
@@ -1157,11 +1157,11 @@ static int test_qmi_ping_pong_send_msg(struct qmi_handle *qmi)
 	ret = qmi_txn_wait(&txn, 5 * HZ);
 	if (ret < 0) {
 		pr_err("Failed to get response on the txn\n");
-		atomic_inc(&pvt_data->fail);
+		atomic_inc(&sample->fail);
 		return ret;
 	}
 
-	atomic_inc(&pvt_data->pass);
+	atomic_inc(&sample->pass);
 	mutex_lock(&status_print_lock);
 	update_status(qmi);
 	mutex_unlock(&status_print_lock);
@@ -1175,19 +1175,20 @@ static int test_qmi_data_send_msg(struct qmi_handle *qmi, unsigned int data_len)
 	struct test_data_req_msg_v01 *req;
 	struct qmi_txn txn;
 	int ret, i;
+	struct qmi_sample *sample = container_of(qmi, struct qmi_sample, qmi);
 
-	atomic_inc(&pvt_data->cnt);
+	atomic_inc(&sample->cnt);
 
 	req = kzalloc(sizeof(*req), GFP_KERNEL);
 	if (!req) {
-		atomic_inc(&pvt_data->fail);
+		atomic_inc(&sample->fail);
 		return -ENOMEM;
 	}
 
 	resp = kzalloc(sizeof(*resp), GFP_KERNEL);
 	if (!resp) {
 		kfree(req);
-		atomic_inc(&pvt_data->fail);
+		atomic_inc(&sample->fail);
 		return -ENOMEM;
 	}
 
@@ -1198,7 +1199,7 @@ static int test_qmi_data_send_msg(struct qmi_handle *qmi, unsigned int data_len)
 
 	ret = qmi_txn_init(qmi, &txn, test_data_resp_msg_v01_ei, resp);
 	if (ret < 0) {
-		atomic_inc(&pvt_data->fail);
+		atomic_inc(&sample->fail);
 		goto out;
 	}
 
@@ -1208,14 +1209,14 @@ static int test_qmi_data_send_msg(struct qmi_handle *qmi, unsigned int data_len)
 			test_data_req_msg_v01_ei, req);
 	if (ret < 0) {
 		qmi_txn_cancel(&txn);
-		atomic_inc(&pvt_data->fail);
+		atomic_inc(&sample->fail);
 		goto out;
 	}
 
 	ret = qmi_txn_wait(&txn, 5 * HZ);
 
 	if (ret < 0) {
-		atomic_inc(&pvt_data->fail);
+		atomic_inc(&sample->fail);
 		goto out;
 	}
 
@@ -1223,12 +1224,12 @@ static int test_qmi_data_send_msg(struct qmi_handle *qmi, unsigned int data_len)
 			resp->data_len != req->data_len ||
 			memcmp(resp->data, req->data, req->data_len)) {
 		pr_err("response data doesn't match expectation\n");
-		atomic_inc(&pvt_data->fail);
+		atomic_inc(&sample->fail);
 		ret = -EINVAL;
 		goto out;
 	} else {
 		pr_debug("Data valid\n");
-		atomic_inc(&pvt_data->pass);
+		atomic_inc(&sample->pass);
 	}
 
 	mutex_lock(&status_print_lock);
@@ -1247,9 +1248,10 @@ int qmi_process_user_input(void *data)
 	struct test_qmi_data *qmi_data, *temp_qmi_data;
 	unsigned short index = 0;
 	struct qmi_handle *qmi = data;
-	struct list_head *data_list = &pvt_data->data_list;
+	struct qmi_sample *sample = container_of(qmi, struct qmi_sample, qmi);
+	struct list_head *data_list = &sample->data_list;
 
-	wait_for_completion_timeout(&pvt_data->complete, msecs_to_jiffies(1000));
+	wait_for_completion_timeout(&sample->complete, msecs_to_jiffies(1000));
 
 	list_for_each_entry_safe(qmi_data, temp_qmi_data, data_list, list) {
 		atomic_inc(&qmi_data->refs_count);
@@ -1271,7 +1273,7 @@ int qmi_process_user_input(void *data)
 
 		if (atomic_dec_and_test(&qmi_data->refs_count)) {
 			pr_info("Test Completed. Pass: %d Fail: %d\n",
-					atomic_read(&pvt_data->pass), atomic_read(&pvt_data->fail));
+					atomic_read(&sample->pass), atomic_read(&sample->fail));
 			list_del(&qmi_data->list);
 			kfree(qmi_data);
 			qmi_data = NULL;
@@ -1286,6 +1288,7 @@ static int test_qmi_open(struct inode *ip, struct file *fp)
 	struct task_struct *qmi_task;
 	int index = 0;
 	struct qmi_handle *qmi;
+	struct qmi_sample *sample;
 
 	for (index = 1; index < sizeof(qdentry) / sizeof(struct qmi_dir); index++) {
 		if (!strncmp(fp->f_path.dentry->d_iname, qdentry[index].string,
@@ -1299,14 +1302,15 @@ static int test_qmi_open(struct inode *ip, struct file *fp)
 	fp->private_data = ip->i_private;
 	qmi = fp->private_data;
 
+	sample = container_of(qmi, struct qmi_sample, qmi);
 	pr_info("Total commands: %lu (Threads: %lu Iteration: %lu)\n",
 			nthreads * niterations, nthreads, niterations);
 
-	atomic_set(&pvt_data->cnt, 0);
-	atomic_set(&pvt_data->pass, 0);
-	atomic_set(&pvt_data->fail, 0);
+	atomic_set(&sample->cnt, 0);
+	atomic_set(&sample->pass, 0);
+	atomic_set(&sample->fail, 0);
 
-	init_completion(&pvt_data->complete);
+	init_completion(&sample->complete);
 	for (index = 0; index < nthreads; index++) {
 		snprintf(thread_name, sizeof(thread_name), "qmi_""%s_%d",
 				fp->f_path.dentry->d_parent->d_iname, index);
@@ -1345,7 +1349,8 @@ static ssize_t test_qmi_write(struct file *fp, const char __user *buf,
 	int len;
 	int index = 0;
 	struct test_qmi_data *qmi_data;
-	struct qmi_handle *qmi;
+	struct qmi_handle *qmi = fp->private_data;
+	struct qmi_sample *sample = container_of(qmi, struct qmi_sample, qmi);
 
 	if (count < 1)
 		return 0;
@@ -1379,9 +1384,8 @@ static ssize_t test_qmi_write(struct file *fp, const char __user *buf,
 
 	atomic_set(&qmi_data->refs_count, 0);
 
-	qmi = fp->private_data;
-	list_add_tail(&qmi_data->list, &pvt_data->data_list);
-	complete_all(&pvt_data->complete);
+	list_add_tail(&qmi_data->list, &sample->data_list);
+	complete_all(&sample->complete);
 
 	return count;
 }
@@ -1400,10 +1404,6 @@ static int qmi_sample_probe(struct platform_device *pdev)
 	char path[20];
 	int ret;
 
-	pvt_data = devm_kzalloc(&pdev->dev, sizeof(*pvt_data), GFP_KERNEL);
-	if (!pvt_data)
-		return -ENOMEM;
-
 	sample = devm_kzalloc(&pdev->dev, sizeof(*sample), GFP_KERNEL);
 	if (!sample)
 		return -ENOMEM;
@@ -1424,7 +1424,7 @@ static int qmi_sample_probe(struct platform_device *pdev)
 
 	snprintf(path, sizeof(path), "%d:%d", sq->sq_node, sq->sq_port);
 
-	INIT_LIST_HEAD(&pvt_data->data_list);
+	INIT_LIST_HEAD(&sample->data_list);
 	sample->de_dir = debugfs_create_dir(path, qmi_debug_dir);
 	if (IS_ERR(sample->de_dir)) {
 		ret = PTR_ERR(sample->de_dir);
@@ -1589,12 +1589,12 @@ static int qmi_sample_remove(struct platform_device *pdev)
 
 	qmi_handle_release(&sample->qmi);
 
-	list_for_each_entry_safe(qmi_data, temp_qmi_data, &pvt_data->data_list, list) {
+	list_for_each_entry_safe(qmi_data, temp_qmi_data, &sample->data_list, list) {
 		list_del(&qmi_data->list);
 		kfree(qmi_data);
 		qmi_data = NULL;
 	}
-	list_del(&pvt_data->data_list);
+	list_del(&sample->data_list);
 
 	return 0;
 }
-- 
2.34.1

