From 516ccefeb18d4f89e66dfe55d35b0436d3487289 Mon Sep 17 00:00:00 2001
From: Timple Raj M <quic_timple@quicinc.com>
Date: Tue, 1 Aug 2023 10:41:24 +0530
Subject: [PATCH] soc: introduce config QTI_APSS_ACC

cpu_ops and cpu_pwr_ctl is required only for the stand alone boot
up of secondary cores. With the full boot chain, this driver is not
required since the PSCI is used. So put this driver under a config
and enable it only when required.

This change also fixes the compilation issues when the QTI_APSS_ACC
is enabled.

Reference Commit: I2d0c85e10c

Change-Id: I6faa4a979174c27cde1b39bd302dd8b7189bdb9c
Signed-off-by: Timple Raj M <quic_timple@quicinc.com>
---
 arch/arm64/include/asm/cpu_ops.h  | 11 +++++++++++
 arch/arm64/include/asm/smp.h      |  2 +-
 arch/arm64/include/asm/smp_plat.h |  4 ++++
 arch/arm64/kernel/cpu_ops.c       |  6 ++++++
 arch/arm64/kernel/smp.c           |  2 +-
 drivers/soc/qcom/Kconfig          | 10 ++++++++++
 drivers/soc/qcom/Makefile         |  1 +
 7 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/include/asm/cpu_ops.h b/arch/arm64/include/asm/cpu_ops.h
index a444c8915e88..70419098b524 100644
--- a/arch/arm64/include/asm/cpu_ops.h
+++ b/arch/arm64/include/asm/cpu_ops.h
@@ -54,4 +54,15 @@ static inline void __init init_bootcpu_ops(void)
 	init_cpu_ops(0);
 }
 
+#ifdef CONFIG_QTI_APSS_ACC
+struct of_cpu_method {
+	const char *method;
+	struct cpu_operations *ops;
+};
+
+#define CPU_METHOD_OF_DECLARE(name, _method, _ops)			\
+	static const struct of_cpu_method __cpu_method_of_table_##name	\
+	__used __section("__cpu_method_of_table")				\
+		= { .method = _method, .ops = _ops }
+#endif /* CONFIG_QTI_APSS_ACC */
 #endif /* ifndef __ASM_CPU_OPS_H */
diff --git a/arch/arm64/include/asm/smp.h b/arch/arm64/include/asm/smp.h
index fc55f5a57a06..03b206a18242 100644
--- a/arch/arm64/include/asm/smp.h
+++ b/arch/arm64/include/asm/smp.h
@@ -88,7 +88,7 @@ extern void secondary_entry(void);
 extern void arch_send_call_function_single_ipi(int cpu);
 extern void arch_send_call_function_ipi_mask(const struct cpumask *mask);
 
-#ifdef CONFIG_ARM64_ACPI_PARKING_PROTOCOL
+#if defined(CONFIG_ARM64_ACPI_PARKING_PROTOCOL) || defined(CONFIG_QTI_APSS_ACC)
 extern void arch_send_wakeup_ipi_mask(const struct cpumask *mask);
 #else
 static inline void arch_send_wakeup_ipi_mask(const struct cpumask *mask)
diff --git a/arch/arm64/include/asm/smp_plat.h b/arch/arm64/include/asm/smp_plat.h
index 97ddc6c203b7..bb70bffd09aa 100644
--- a/arch/arm64/include/asm/smp_plat.h
+++ b/arch/arm64/include/asm/smp_plat.h
@@ -26,6 +26,10 @@ static inline u32 mpidr_hash_size(void)
 	return 1 << mpidr_hash.bits;
 }
 
+#ifdef CONFIG_QTI_APSS_ACC
+extern void secondary_startup(void);
+#endif
+
 /*
  * Retrieve logical cpu index corresponding to a given MPIDR.Aff*
  *  - mpidr: MPIDR.Aff* bits to be used for the look-up
diff --git a/arch/arm64/kernel/cpu_ops.c b/arch/arm64/kernel/cpu_ops.c
index e133011f64b5..d31635f37d64 100644
--- a/arch/arm64/kernel/cpu_ops.c
+++ b/arch/arm64/kernel/cpu_ops.c
@@ -19,12 +19,18 @@ extern const struct cpu_operations smp_spin_table_ops;
 extern const struct cpu_operations acpi_parking_protocol_ops;
 #endif
 extern const struct cpu_operations cpu_psci_ops;
+#ifdef CONFIG_QTI_APSS_ACC
+extern const struct cpu_operations smp_a55ss_ops;
+#endif
 
 static const struct cpu_operations *cpu_ops[NR_CPUS] __ro_after_init;
 
 static const struct cpu_operations *const dt_supported_cpu_ops[] __initconst = {
 	&smp_spin_table_ops,
 	&cpu_psci_ops,
+#ifdef CONFIG_QTI_APSS_ACC
+	&smp_a55ss_ops,
+#endif
 	NULL,
 };
 
diff --git a/arch/arm64/kernel/smp.c b/arch/arm64/kernel/smp.c
index ffc5d76cf695..1289f1c0759b 100644
--- a/arch/arm64/kernel/smp.c
+++ b/arch/arm64/kernel/smp.c
@@ -802,7 +802,7 @@ void arch_send_call_function_single_ipi(int cpu)
 	smp_cross_call(cpumask_of(cpu), IPI_CALL_FUNC);
 }
 
-#ifdef CONFIG_ARM64_ACPI_PARKING_PROTOCOL
+#if defined(CONFIG_ARM64_ACPI_PARKING_PROTOCOL) || defined(CONFIG_QTI_APSS_ACC)
 void arch_send_wakeup_ipi_mask(const struct cpumask *mask)
 {
 	smp_cross_call(mask, IPI_WAKEUP);
diff --git a/drivers/soc/qcom/Kconfig b/drivers/soc/qcom/Kconfig
index e8f8618a7662..4b9c6c2e44b2 100644
--- a/drivers/soc/qcom/Kconfig
+++ b/drivers/soc/qcom/Kconfig
@@ -290,4 +290,14 @@ config QTI_LICENSE_MANAGER
 	  running to communicate the license termination mode and license
 	  files to the attached PCIe device.
 
+config QTI_APSS_ACC
+	bool "QTI APSS Application Clock Controller"
+	depends on ARM64 && QCOM_SCM
+	help
+	  The ACC provides clock, power domain, and reset control to a CPU.
+	  There is one ACC register region per CPU within the APSS remapped
+	  region as well as an alias register region that remaps accesses
+	  to the ACC associated with the CPU accessing the region.
+
+	  If unsure, say N.
 endmenu
diff --git a/drivers/soc/qcom/Makefile b/drivers/soc/qcom/Makefile
index 4a39b7ae2738..c6a6c3234f0b 100644
--- a/drivers/soc/qcom/Makefile
+++ b/drivers/soc/qcom/Makefile
@@ -35,3 +35,4 @@ obj-$(CONFIG_IPQ_DEBUG)	+= ipq-debug.o
 obj-$(CONFIG_MSM_RPM_LOG)	+= rpm_log.o
 obj-$(CONFIG_QTI_TZ_LOG) += tz_log.o
 obj-$(CONFIG_QTI_LICENSE_MANAGER) += license_manager.o
+obj-$(CONFIG_QTI_APSS_ACC) += cpu_ops.o cpu_pwr_ctl.o
-- 
2.34.1

