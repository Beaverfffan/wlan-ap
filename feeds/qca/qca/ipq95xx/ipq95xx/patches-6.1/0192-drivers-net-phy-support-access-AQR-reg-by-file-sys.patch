From e6a3325714f31a6fce631cc6fa00ca7c6d9c8c2c Mon Sep 17 00:00:00 2001
From: zhongjia <zhongjia@codeaurora.org>
Date: Mon, 20 Apr 2020 13:37:40 +0800
Subject: [PATCH 192/281] drivers: net: phy: support access AQR reg by file sys

Change-Id: I14330841c2a3fd0b14ac937c59f646e6ca0d7fa8
Signed-off-by: zhongjia <zhongjia@codeaurora.org>
Signed-off-by: zhongjia <quic_zhongjia@quicinc.com>
---
 drivers/net/phy/aquantia_main.c | 252 ++++++++++++++++++++++++++++++++
 1 file changed, 252 insertions(+)

diff --git a/drivers/net/phy/aquantia_main.c b/drivers/net/phy/aquantia_main.c
index a8b96570ce25..d7b2c6cca385 100755
--- a/drivers/net/phy/aquantia_main.c
+++ b/drivers/net/phy/aquantia_main.c
@@ -12,6 +12,7 @@
 #include <linux/delay.h>
 #include <linux/bitfield.h>
 #include <linux/phy.h>
+#include <linux/debugfs.h>
 
 #include "aquantia.h"
 
@@ -162,6 +163,243 @@
  */
 #define AQR107_OP_IN_PROG_SLEEP		1000
 #define AQR107_OP_IN_PROG_TIMEOUT	100000
+#define AQ_PHY_MAX_VALID_MMD_REG		0xff01
+#define AQ_PHY_MAX_INVALID_MMD_REG		0xffff
+#define AQ_PHY_MIN_VALID_REG			0x10000
+#define AQ_PHY_MAX_VALID_REG			0x1f0000
+
+/* Driver private data structure */
+struct aq_priv {
+	struct phy_device *phydev;	/* Pointer to PHY device */
+	struct dentry *top_dentry;	/* Top dentry for AQ107 PHY Driver */
+	struct dentry *write_dentry;	/* write-reg file dentry */
+	struct dentry *read_dentry;	/* read-reg file dentry */
+	u32 phy_addr;		/* AQ107 PHY Address */
+	u32 reg_addr;		/* register address */
+	u16 reg_val;		/* register value */
+
+};
+
+/* Check for a valid range of PHY register address */
+static bool aquantia_phy_check_valid_reg(unsigned int reg_addr)
+{
+	bool ret = false;
+	u8 mmd;
+
+	if (reg_addr < AQ_PHY_MIN_VALID_REG)
+		return false;
+
+	if ((reg_addr & AQ_PHY_MAX_INVALID_MMD_REG) > AQ_PHY_MAX_VALID_MMD_REG)
+		return false;
+
+	mmd = (reg_addr & AQ_PHY_MAX_VALID_REG) >> 16;
+
+	switch (mmd) {
+	case MDIO_MMD_PMAPMD:
+	case MDIO_MMD_PCS:
+	case MDIO_MMD_PHYXS:
+	case MDIO_MMD_AN:
+	case MDIO_MMD_C22EXT:
+	case MDIO_MMD_VEND1:
+		ret = true;
+		break;
+	default:
+		ret = false;
+	}
+
+	return ret;
+}
+
+static ssize_t aquantia_phy_read_reg_get(struct file *fp,
+					 char __user *ubuf, size_t sz,
+					 loff_t *ppos)
+{
+	struct aq_priv *priv = (struct aq_priv *)fp->private_data;
+	char lbuf[40];
+	int bytes_read;
+
+	if (!priv)
+		return -EFAULT;
+
+	snprintf(lbuf, sizeof(lbuf), "phy%x(0x%x): 0x%x\n",
+		 priv->phy_addr, priv->reg_addr, priv->reg_val);
+
+	bytes_read = simple_read_from_buffer(ubuf, sz, ppos,
+					     lbuf, strlen(lbuf));
+
+	return bytes_read;
+}
+
+static ssize_t aquantia_phy_read_reg_set(struct file *fp,
+					 const char __user *ubuf,
+					 size_t sz, loff_t *ppos)
+{
+	struct aq_priv *priv = (struct aq_priv *)fp->private_data;
+	char lbuf[32];
+	size_t lbuf_size;
+	char *options = lbuf;
+	char *this_opt;
+	unsigned int reg_addr, phy_addr;
+	bool is_reabable = false;
+
+	if (!priv)
+		return -EFAULT;
+
+	lbuf_size = min(sz, (sizeof(lbuf) - 1));
+
+	if (copy_from_user(lbuf, ubuf, lbuf_size))
+		return -EFAULT;
+
+	lbuf[lbuf_size] = 0;
+
+	this_opt = strsep(&options, " ");
+	if (!this_opt)
+		goto fail;
+
+	kstrtouint(this_opt, 0, &phy_addr);
+	if ((options - lbuf) >= (lbuf_size - 1))
+		goto fail;
+
+	this_opt = strsep(&options, " ");
+	if (!this_opt)
+		goto fail;
+
+	kstrtouint(this_opt, 0, &reg_addr);
+
+	is_reabable = aquantia_phy_check_valid_reg(reg_addr);
+	if (is_reabable) {
+		priv->phy_addr = (uint32_t)phy_addr;
+		priv->reg_addr = (uint32_t)reg_addr;
+		reg_addr = MII_ADDR_C45 | reg_addr;
+		priv->reg_val = phy_read(priv->phydev, reg_addr);
+	} else {
+		goto fail;
+	}
+
+	return lbuf_size;
+
+fail:
+	return -EINVAL;
+}
+
+static ssize_t aquantia_phy_write_reg_set(struct file *fp,
+					  const char __user *ubuf,
+					  size_t sz,
+					  loff_t *ppos)
+{
+	struct aq_priv *priv = (struct aq_priv *)fp->private_data;
+	char lbuf[32];
+	size_t lbuf_size;
+	char *options = lbuf;
+	char *this_opt;
+	unsigned int phy_addr = 0;
+	unsigned int reg_addr = 0;
+	unsigned int reg_value = 0;
+	bool is_writeable = false;
+	u32 check_16bit_boundary = 0xffff0000;
+
+	if (!priv)
+		return -EFAULT;
+
+	lbuf_size = min(sz, (sizeof(lbuf) - 1));
+
+	if (copy_from_user(lbuf, ubuf, lbuf_size))
+		return -EFAULT;
+
+	lbuf[lbuf_size] = 0;
+
+	this_opt = strsep(&options, " ");
+	if (!this_opt)
+		goto fail;
+
+	kstrtouint(this_opt, 0, &phy_addr);
+	if ((options - lbuf) >= (lbuf_size - 1))
+		goto fail;
+
+	this_opt = strsep(&options, " ");
+	if (!this_opt)
+		goto fail;
+
+	kstrtouint(this_opt, 0, &reg_addr);
+	if ((options - lbuf) >= (lbuf_size - 1))
+		goto fail;
+
+	this_opt = strsep(&options, " ");
+	if (!this_opt)
+		goto fail;
+
+	kstrtouint(this_opt, 0, &reg_value);
+
+	if (phy_addr > 7)
+		goto fail;
+
+	 /* Check 16BIT register value boundary */
+	if (check_16bit_boundary & reg_value)
+		goto fail;
+
+	 /* Check for a valid Range of register and write into Phy dev */
+	is_writeable = aquantia_phy_check_valid_reg(reg_addr);
+	if (is_writeable) {
+		reg_addr = MII_ADDR_C45 | reg_addr;
+		phy_write(priv->phydev, reg_addr, reg_value);
+
+	} else {
+		goto fail;
+	}
+
+	return lbuf_size;
+
+fail:
+	return -EINVAL;
+}
+
+static const struct file_operations aquantia_phy_read_reg_ops = {
+	.open = simple_open,
+	.read = aquantia_phy_read_reg_get,
+	.write = aquantia_phy_read_reg_set,
+	.llseek = no_llseek,
+};
+
+static const struct file_operations aquantia_phy_write_reg_ops = {
+	.open = simple_open,
+	.write = aquantia_phy_write_reg_set,
+	.llseek = no_llseek,
+};
+
+/* Create debug-fs aq-phy dir and files */
+static int aquantia_phy_init_debugfs_entries(struct aq_priv *priv)
+{
+	char name[16];
+
+	snprintf(name, 16, "aquantia-phy-%d", priv->phydev->mdio.addr);
+	priv->top_dentry = debugfs_create_dir(name, NULL);
+	if (!priv->top_dentry)
+		return -1;
+
+	priv->write_dentry = debugfs_create_file("phy-write-reg", 0600,
+						 priv->top_dentry,
+						 priv,
+						 &aquantia_phy_write_reg_ops);
+	if (!priv->write_dentry) {
+		debugfs_remove_recursive(priv->top_dentry);
+		return -1;
+	}
+
+	priv->read_dentry = debugfs_create_file("phy-read-reg", 0600,
+						priv->top_dentry,
+						priv,
+						&aquantia_phy_read_reg_ops);
+	if (!priv->read_dentry) {
+		debugfs_remove_recursive(priv->top_dentry);
+		return -1;
+	}
+
+	priv->phy_addr = 0;
+	priv->reg_addr = 0;
+	priv->reg_val = 0;
+
+	return 0;
+}
 
 /* registers in MDIO_MMD_VEND1 region */
 #define AQUANTIA_VND1_GLOBAL_SC			0x000
@@ -851,6 +1089,20 @@ static int aqr107_resume(struct phy_device *phydev)
 
 static int aqr107_probe(struct phy_device *phydev)
 {
+	struct aq_priv *priv;
+	int ret;
+
+	/* Initialize the debug-fs entries */
+	priv = vzalloc(sizeof(*priv));
+	if (!priv)
+		return -1;
+	priv->phydev = phydev;
+	ret = aquantia_phy_init_debugfs_entries(priv);
+	if (ret < 0) {
+		vfree(priv);
+		return ret;
+	}
+
 	phydev->priv = devm_kzalloc(&phydev->mdio.dev,
 				    sizeof(struct aqr107_priv), GFP_KERNEL);
 	if (!phydev->priv)
-- 
2.17.1

