From 3124a37902987a39fa83c1090d4448effcc32a9d Mon Sep 17 00:00:00 2001
From: Hariharan K <quic_harihk@quicinc.com>
Date: Thu, 24 Aug 2023 12:12:33 +0530
Subject: [PATCH] qcom : scm : Add scm call support for ECDSA blob fetch

Adding an scm call to get the ECDSA blob from TME-L
by passing NONCE buffer.

Change-Id: I5f05b9806df4f874a4c5adcdb0d7e13c1fa7fe1d
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
---
 drivers/firmware/qcom_scm.c | 62 +++++++++++++++++++++++++++++++++++++
 include/linux/qcom_scm.h    |  3 ++
 2 files changed, 65 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index dc6f609bf625..7b67e41d4c98 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -1865,6 +1865,68 @@ int __qti_scm_tz_hvc_log(struct device *dev, u32 svc_id, u32 cmd_id,
 	return ret ? : res.result[0];
 }
 
+/**
+ * __qti_scm_get_ecdsa_blob() - Get the ECDSA blob from TME-L by sending NONCE
+ *
+ * @svc_id: SCM service id
+ * @cmd_id: SCM command id
+ * nonce_buf: NONCE buffer which contains the NONCE recieved from Q6.
+ * nonce_buf_len: Variable for NONCE buffer length
+ * ecdsa_buf: ECDSA buffer, used to receive the ECDSA blob from TME
+ * ecdsa_buf_len: Variable which holds the total ECDSA buffer lenght
+ * *ecdsa_consumed_len: Pointer to get the consumed ECDSA buffer lenght from TME
+ *
+ * This function can be used to get the ECDSA blob from TME-L by passing the
+ * NONCE through nonce_buf. nonce_buf and ecdsa_buf should be DMA alloc
+ * coherent and caller should take care of it.
+ */
+int __qti_scm_get_ecdsa_blob(struct device *dev, u32 svc_id, u32 cmd_id,
+		dma_addr_t nonce_buf, u32 nonce_buf_len, dma_addr_t ecdsa_buf,
+		u32 ecdsa_buf_len, u32 *ecdsa_consumed_len)
+{
+	int ret;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = svc_id,
+		.cmd = cmd_id,
+		.owner = ARM_SMCCC_OWNER_SIP,
+		.arginfo = QCOM_SCM_ARGS(5, QCOM_SCM_VAL, QCOM_SCM_VAL,
+					QCOM_SCM_VAL, QCOM_SCM_VAL, QCOM_SCM_RW),
+	};
+
+	dma_addr_t dma_ecdsa_consumed_len;
+
+	dma_ecdsa_consumed_len = dma_map_single(dev, ecdsa_consumed_len,
+			sizeof(u32), DMA_FROM_DEVICE);
+	ret = dma_mapping_error(dev, dma_ecdsa_consumed_len);
+	if (ret != 0) {
+		pr_err("%s: DMA Mapping Error : %d\n", __func__, ret);
+		return ret;
+	}
+
+	desc.args[0] = nonce_buf;
+	desc.args[1] = nonce_buf_len;
+	desc.args[2] = ecdsa_buf;
+	desc.args[3] = ecdsa_buf_len;
+	desc.args[4] = dma_ecdsa_consumed_len;
+
+	ret = qcom_scm_call(dev, &desc, &res);
+	dma_unmap_single(dev, dma_ecdsa_consumed_len, sizeof(u32), DMA_FROM_DEVICE);
+
+	return ret ? : res.result[0];
+}
+
+int qti_scm_get_ecdsa_blob(u32 svc_id, u32 cmd_id, dma_addr_t nonce_buf,
+			u32 nonce_buf_len, dma_addr_t ecdsa_buf,
+			u32 ecdsa_buf_len, u32 *ecdsa_consumed_len)
+{
+	int ret;
+	ret = __qti_scm_get_ecdsa_blob(__scm->dev, svc_id, cmd_id, nonce_buf,
+			nonce_buf_len, ecdsa_buf, ecdsa_buf_len, ecdsa_consumed_len);
+	return ret;
+}
+EXPORT_SYMBOL(qti_scm_get_ecdsa_blob);
+
 /**
  * __qti_scm_get_smmustate () - Get SMMU state
  * @svc_id: SCM service id
diff --git a/include/linux/qcom_scm.h b/include/linux/qcom_scm.h
index 4178981613ff..e9d5eab33234 100644
--- a/include/linux/qcom_scm.h
+++ b/include/linux/qcom_scm.h
@@ -168,6 +168,9 @@ extern int qti_scm_tz_log(void *ker_buf, u32 buf_len);
 extern int qti_scm_hvc_log(void *ker_buf, u32 buf_len);
 extern int qti_qfprom_show_authenticate(void);
 extern int qti_scm_get_smmustate(void);
+extern int qti_scm_get_ecdsa_blob(u32 svc_id, u32 cmd_id, dma_addr_t nonce_buf,
+		u32 nonce_buf_len, dma_addr_t ecdsa_buf, u32 ecdsa_buf_len,
+		u32 *ecdsa_consumed_len);
 
 extern bool qcom_scm_sec_auth_available(unsigned int scm_cmd_id);
 extern int qcom_sec_upgrade_auth(unsigned int scm_cmd_id,
-- 
2.34.1

