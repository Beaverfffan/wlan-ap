From 094825f76df3c21cde27158e6f1989cc00693ff6 Mon Sep 17 00:00:00 2001
From: Kathiravan T <quic_kathirav@quicinc.com>
Date: Mon, 12 Jun 2023 16:02:17 +0530
Subject: [PATCH] clk: qcom: apss-ipq6018: add support for the switch between
 the safe source

Stromer Plus PLL found on IPQ53xx doesn't support the dynamic frequency
scaling. To achieve the same, we need to park the APPS PLL source to GPLL0,
re configure the PLL and then switch the source to APSS_PLL_EARLY.

To support this, register a clock notifier to get the PRE_RATE and POST_RATE
notification. Change the APSS PLL source to GPLL0 when PRE_RATE notification
is received, then configure the PLL and then change back the source to
APSS_PLL_EARLY.

Change-Id: I2fc8d169ac5b235431680d150992139cae5f214d
Signed-off-by: Kathiravan T <quic_kathirav@quicinc.com>
---
 drivers/clk/qcom/apss-ipq6018.c | 54 ++++++++++++++++++++++++++++++++-
 1 file changed, 53 insertions(+), 1 deletion(-)

diff --git a/drivers/clk/qcom/apss-ipq6018.c b/drivers/clk/qcom/apss-ipq6018.c
index f2f502e2d5a4..d40cd0454181 100644
--- a/drivers/clk/qcom/apss-ipq6018.c
+++ b/drivers/clk/qcom/apss-ipq6018.c
@@ -9,8 +9,11 @@
 #include <linux/clk-provider.h>
 #include <linux/regmap.h>
 #include <linux/module.h>
+#include <linux/clk.h>
+#include <linux/soc/qcom/smem.h>
 
 #include <dt-bindings/clock/qcom,apss-ipq.h>
+#include <dt-bindings/arm/qcom,ids.h>
 
 #include "common.h"
 #include "clk-regmap.h"
@@ -20,16 +23,19 @@
 
 enum {
 	P_XO,
+	P_GPLL0,
 	P_APSS_PLL_EARLY,
 };
 
 static const struct clk_parent_data parents_apcs_alias0_clk_src[] = {
 	{ .fw_name = "xo" },
+	{ .fw_name = "gpll0" },
 	{ .fw_name = "pll" },
 };
 
 static const struct parent_map parents_apcs_alias0_clk_src_map[] = {
 	{ P_XO, 0 },
+	{ P_GPLL0, 4 },
 	{ P_APSS_PLL_EARLY, 5 },
 };
 
@@ -81,15 +87,61 @@ static const struct qcom_cc_desc apss_ipq6018_desc = {
 	.num_clks = ARRAY_SIZE(apss_ipq6018_clks),
 };
 
+static int cpu_clk_notifier_fn(struct notifier_block *nb, unsigned long action,
+				void *data)
+{
+	int err;
+
+	if (action == PRE_RATE_CHANGE)
+		err = clk_rcg2_mux_closest_ops.set_parent(&apcs_alias0_clk_src.clkr.hw,
+						P_GPLL0);
+
+	if (action == POST_RATE_CHANGE)
+		err = clk_rcg2_mux_closest_ops.set_parent(&apcs_alias0_clk_src.clkr.hw,
+						P_APSS_PLL_EARLY);
+
+	return notifier_from_errno(err);
+}
+
+static struct notifier_block cpu_clk_notifier = {
+	.notifier_call = cpu_clk_notifier_fn,
+};
+
 static int apss_ipq6018_probe(struct platform_device *pdev)
 {
 	struct regmap *regmap;
+	int ret;
+	u32 soc_id;
+
+	ret = qcom_smem_get_soc_id(&soc_id);
+	if (ret)
+		return ret;
 
 	regmap = dev_get_regmap(pdev->dev.parent, NULL);
 	if (!regmap)
 		return -ENODEV;
 
-	return qcom_cc_really_probe(pdev, &apss_ipq6018_desc, regmap);
+	ret = qcom_cc_really_probe(pdev, &apss_ipq6018_desc, regmap);
+	if (ret)
+		return ret;
+
+	switch(soc_id) {
+		/*
+		 * Only below variants of IPQ53xx supports scaling
+		 */
+		case QCOM_ID_IPQ5332:
+		case QCOM_ID_IPQ5322:
+		case QCOM_ID_IPQ5300:
+			ret = clk_notifier_register(apcs_alias0_clk_src.clkr.hw.clk,
+							&cpu_clk_notifier);
+			if (ret)
+				return ret;
+			break;
+		default:
+			break;
+	}
+
+	return 0;
 }
 
 static struct platform_driver apss_ipq6018_driver = {
-- 
2.34.1

