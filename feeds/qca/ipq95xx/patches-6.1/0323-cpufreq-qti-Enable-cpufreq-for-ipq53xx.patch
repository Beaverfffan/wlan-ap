From bf2e7358e45756bd813fe3a0dbf8a3d559f3b2b6 Mon Sep 17 00:00:00 2001
From: Kathiravan T <quic_kathirav@quicinc.com>
Date: Wed, 31 May 2023 14:09:16 +0530
Subject: [PATCH] cpufreq: qti: Enable cpufreq for ipq53xx

IPQ53xx have different OPPs available for the CPU based on
SoC variant. This can be determined through use of an eFuse
register present in the silicon.

Added support for ipq53xx on nvmem driver which helps to
determine OPPs at runtime based on the eFuse register which
has the CPU frequency limits. opp-supported-hw dt binding
can be used to indicate the availabe OPPs for each limit.

nvmem driver also creates the "cpufreq-dt" platform_device after
passing the version matching data to the OPP framework so that the
cpufreq-dt handles the actual cpufreq implementation.

Change-Id: I0d5287efb46b563f168a9e09dd9cb14e1f4ac94f
Signed-off-by: Kathiravan T <quic_kathirav@quicinc.com>
---
 drivers/cpufreq/cpufreq-dt-platdev.c |  1 +
 drivers/cpufreq/qcom-cpufreq-nvmem.c | 25 +++++++++++++++++++++++++
 2 files changed, 26 insertions(+)

diff --git a/drivers/cpufreq/cpufreq-dt-platdev.c b/drivers/cpufreq/cpufreq-dt-platdev.c
index 3df1d5747ab7..87e028323c4b 100644
--- a/drivers/cpufreq/cpufreq-dt-platdev.c
+++ b/drivers/cpufreq/cpufreq-dt-platdev.c
@@ -163,6 +163,7 @@ static const struct of_device_id blocklist[] __initconst = {
 	{ .compatible = "ti,dra7", },
 	{ .compatible = "ti,omap3", },
 
+	{ .compatible = "qcom,ipq5332", },
 	{ .compatible = "qcom,ipq8064", },
 	{ .compatible = "qcom,ipq9574", },
 	{ .compatible = "qcom,apq8064", },
diff --git a/drivers/cpufreq/qcom-cpufreq-nvmem.c b/drivers/cpufreq/qcom-cpufreq-nvmem.c
index 8617737f300f..197fa0ad3acf 100644
--- a/drivers/cpufreq/qcom-cpufreq-nvmem.c
+++ b/drivers/cpufreq/qcom-cpufreq-nvmem.c
@@ -36,6 +36,11 @@ enum _msm_id {
 	APQ8096V3 = 0x123ul,
 	MSM8996SG = 0x131ul,
 	APQ8096SG = 0x138ul,
+	IPQ5332V1 = 0x250ul,
+	IPQ5322V1 = 0x251ul,
+	IPQ5312V1 = 0x252ul,
+	IPQ5302V1 = 0x253ul,
+	IPQ5300V1 = 0x270ul,
 	IPQ9574V1 = 0x202ul,
 	IPQ9570V1 = 0x201ul,
 	IPQ9554V1 = 0x200ul,
@@ -47,6 +52,7 @@ enum _msm_id {
 enum _msm8996_version {
 	MSM8996_V3,
 	MSM8996_SG,
+	IPQ53XX_V1,
 	IPQ95XX_V1,
 	NUM_OF_MSM8996_VERSIONS,
 };
@@ -169,6 +175,13 @@ static enum _msm8996_version qcom_cpufreq_get_msm_id(void)
 	case APQ8096SG:
 		version = MSM8996_SG;
 		break;
+	case IPQ5332V1:
+	case IPQ5322V1:
+	case IPQ5312V1:
+	case IPQ5302V1:
+	case IPQ5300V1:
+		version = IPQ53XX_V1;
+		break;
 	case IPQ9574V1:
 	case IPQ9570V1:
 	case IPQ9554V1:
@@ -211,6 +224,16 @@ static int qcom_cpufreq_kryo_name_version(struct device *cpu_dev,
 	case MSM8996_SG:
 		drv->versions = 1 << ((unsigned int)(*speedbin) + 4);
 		break;
+	case IPQ53XX_V1:
+		/* Fuse Value    Freq    BIT to set
+		 * ---------------------------------
+		 *   2’b00     No Limit     BIT(0)
+		 *   2’b01     1.5 GHz      BIT(1)
+		 *   2’b10     1.2 Ghz      BIT(2)
+		 *   2’b11     1.0 GHz      BIT(3)
+		 */
+		drv->versions = 1 << (unsigned int)(*speedbin);
+		break;
 	case IPQ95XX_V1:
 		/* Fuse Value    Freq    BIT to set
 		 * ---------------------------------
@@ -309,6 +332,7 @@ static int qcom_cpufreq_probe(struct platform_device *pdev)
 		return -ENOENT;
 
 	ret = of_device_is_compatible(np, "operating-points-v2-kryo-cpu") ||
+		of_device_is_compatible(np, "operating-points-v2-ipq5332") ||
 		of_device_is_compatible(np, "operating-points-v2-ipq9574");
 	if (!ret) {
 		of_node_put(np);
@@ -433,6 +457,7 @@ static const struct of_device_id qcom_cpufreq_match_list[] __initconst = {
 	{ .compatible = "qcom,apq8096", .data = &match_data_kryo },
 	{ .compatible = "qcom,msm8996", .data = &match_data_kryo },
 	{ .compatible = "qcom,qcs404", .data = &match_data_qcs404 },
+	{ .compatible = "qcom,ipq5332", .data = &match_data_kryo },
 	{ .compatible = "qcom,ipq8064", .data = &match_data_krait },
 	{ .compatible = "qcom,ipq9574", .data = &match_data_kryo },
 	{ .compatible = "qcom,apq8064", .data = &match_data_krait },
-- 
2.34.1

