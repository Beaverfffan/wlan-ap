From 88680ef40345f35b7af23aa8ae6e9431700f1202 Mon Sep 17 00:00:00 2001
From: Hariharan K <quic_harihk@quicinc.com>
Date: Thu, 2 Nov 2023 12:40:38 +0530
Subject: [PATCH] pcie: qcom: ipq9574: Forcing PCIE2/3 to single lane

For lane switching, as num-lanes property is not
supported in Alder. This patch enables the support
for switching PCIE2/3 to single lane. The function
is added in PCI_FINAL_FIXUP and can be enabled from
the DTS node by defining "force_to_single_lane" property.

NOTE: Do not change num-lanes to 1 for PCIE2/3.
Instead, "force_to_single_lane" property can be defined
in DTS for PCIE2/3 to switch the corresponding node to
single lane.

This is a snapshot of the commit
42f4e796a2bbae8c3d10962e8d36fb0526ecada2
from win.linuxopenwrt.2.1 branch and
oss/kernel/linux-ipq-5.4 project.

Change-Id: I8b7247c20dff1a926a597584da3ad34d11a3309f
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
---
 drivers/pci/controller/dwc/pcie-qcom.c | 74 ++++++++++++++++++++++++++
 1 file changed, 74 insertions(+)

diff --git a/drivers/pci/controller/dwc/pcie-qcom.c b/drivers/pci/controller/dwc/pcie-qcom.c
index 9c9b5aedbd3a..5a4c623dca45 100644
--- a/drivers/pci/controller/dwc/pcie-qcom.c
+++ b/drivers/pci/controller/dwc/pcie-qcom.c
@@ -114,6 +114,16 @@
 #define PCIE20_v3_PARF_SLV_ADDR_SPACE_SIZE	0x358
 #define SLV_ADDR_SPACE_SZ			0x10000000
 
+/* DBI registers */
+#define PCIE20_PORT_LINK_CTRL_OFF		0x710
+#define PCIE20_PORT_LINK_CTRL_OFF_MASK		0x3F0000
+#define LINK_CAPABLE_OFFSET(x)			((x) << 16)
+#define PCIE20_LANE_SKEW_OFF			0x714
+#define PCIE20_LANE_SKEW_OFF_MASK		0xFF000000
+#define PCIE20_MULTI_LANE_CONTROL_OFF		0x8C0
+#define PCIE20_LINK_CONTROL_LINK_STATUS_REG	0x80
+#define PCIE20_PARF_LTSSM_MASK			0x3F
+
 /* RATEADAPT_VAL = 256 / ((NOC frequency / PCIe AXI frequency) - 1) */
 /* RATEADAPT_VAL = 256 / ((342M / 240M) - 1) */
 #define AGGR_NOC_PCIE_1LANE_RATEADAPT_VAL	0x200
@@ -242,6 +252,7 @@ struct qcom_pcie {
 	const struct qcom_pcie_cfg *cfg;
 	uint32_t axi_wr_addr_halt;
 	uint32_t num_lanes;
+	uint32_t domain;
 };
 
 #define to_qcom_pcie(x)		dev_get_drvdata((x)->dev)
@@ -1878,6 +1889,8 @@ static int qcom_pcie_probe(struct platform_device *pdev)
 				&num_lanes);
 	pcie->num_lanes = num_lanes;
 
+	of_property_read_u32(pdev->dev.of_node, "linux,pci-domain",&pcie->domain);
+
 	pcie->phy = devm_phy_optional_get(dev, "pciephy");
 	if (IS_ERR(pcie->phy)) {
 		ret = PTR_ERR(pcie->phy);
@@ -1942,6 +1955,66 @@ static void qcom_fixup_class(struct pci_dev *dev)
 {
 	dev->class = PCI_CLASS_BRIDGE_PCI_NORMAL;
 }
+
+static void qcom_ipq_switch_lane(struct pci_dev *dev)
+{
+	struct dw_pcie_rp *pp;
+	struct dw_pcie *pci;
+	struct qcom_pcie *pcie;
+	struct device *devp;
+	struct device_node *np;
+	u32 val;
+	int size = 4;
+
+	pp = dev->bus->sysdata;
+	pci = to_dw_pcie_from_pp(pp);
+	pcie = to_qcom_pcie(pci);
+	devp = pci->dev;
+	np = devp->of_node;
+
+	/* Switching PCIE Nodes 2/3 to single lane if force_to_single_lane property is defined in dts */
+	if ((of_property_read_bool(np, "force_to_single_lane")) && (pcie->domain == 3 || pcie->domain == 4)) {
+
+		dev_info(devp,"Forcing PCIE to single lane\n");
+
+		/* check if Link is in L0 state */
+		dw_pcie_read(pcie->parf + PCIE20_PARF_LTSSM, size, &val);
+		if ((val & PCIE20_PARF_LTSSM_MASK) != 0x11)
+			dev_info(devp,"Before lane switch: Link is not in L0 state: %u\n",val);
+
+		/* set link width */
+		dw_pcie_read(pci->dbi_base + PCIE20_PORT_LINK_CTRL_OFF, size, &val);
+		val &= ~(PCIE20_PORT_LINK_CTRL_OFF_MASK);
+		val |= 0x10000;
+		dw_pcie_write(pci->dbi_base + PCIE20_PORT_LINK_CTRL_OFF, size, val);
+
+		/* config lane skew */
+		dw_pcie_read(pci->dbi_base + PCIE20_LANE_SKEW_OFF, size, &val);
+		val = (val & PCIE20_LANE_SKEW_OFF_MASK)|0x20;
+		dw_pcie_write(pci->dbi_base + PCIE20_LANE_SKEW_OFF, size, val);
+
+		/* set target lane width & direct link width change */
+		dw_pcie_read(pci->dbi_base + PCIE20_MULTI_LANE_CONTROL_OFF, size, &val);
+		val |= 0xc1;
+		dw_pcie_write(pci->dbi_base + PCIE20_MULTI_LANE_CONTROL_OFF, size, val);
+
+		/* wait until the link width change is complete */
+		dw_pcie_read(pci->dbi_base + PCIE20_MULTI_LANE_CONTROL_OFF, size, &val);
+		mdelay(50);
+		dw_pcie_read(pci->dbi_base + PCIE20_MULTI_LANE_CONTROL_OFF, size, &val);
+
+		/* check if Link is in L0 state */
+		dw_pcie_read(pcie->parf + PCIE20_PARF_LTSSM, size, &val);
+		if ((val & PCIE20_PARF_LTSSM_MASK) != 0x11)
+			dev_info(devp,"After lane switch: Link is not in L0 state: %u\n",val);
+
+		dw_pcie_read(pci->dbi_base + PCIE20_LINK_CONTROL_LINK_STATUS_REG, size, &val);
+
+		dev_info(devp,"Link width is: %u\n",(val&0x3F00000)>>20);
+	}
+
+}
+
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x0101, qcom_fixup_class);
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x0104, qcom_fixup_class);
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x0106, qcom_fixup_class);
@@ -1949,6 +2022,7 @@ DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x0107, qcom_fixup_class);
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x0302, qcom_fixup_class);
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x1000, qcom_fixup_class);
 DECLARE_PCI_FIXUP_EARLY(PCI_VENDOR_ID_QCOM, 0x1001, qcom_fixup_class);
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_QCOM, 0x1108, qcom_ipq_switch_lane);
 
 static struct platform_driver qcom_pcie_driver = {
 	.probe = qcom_pcie_probe,
-- 
2.34.1

