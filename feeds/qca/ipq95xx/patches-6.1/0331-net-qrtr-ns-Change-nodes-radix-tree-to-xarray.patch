From feb11937a5b5ad13c2115ea55079f2be4efb0df1 Mon Sep 17 00:00:00 2001
From: Saahil Tomar <quic_saahtoma@quicinc.com>
Date: Wed, 5 Jul 2023 16:56:00 +0530
Subject: [PATCH] net: qrtr: ns: Change nodes radix tree to xarray

There is a use after free scenario while iterating through the servers
radix tree despite the ns being a single threaded process. This can
happen when the radix tree APIs are not synchronized with the
rcu_read_lock() APIs.

Convert the radix tree for nodes to xarray to take advantage of the
built in rcu lock usage provided by xarray.

Signed-off-by: Chris Lew <clew@codeaurora.org>
Signed-off-by: Saahil Tomar <quic_saahtoma@quicinc.com>
Change-Id: Ia443eae33a5ae6b8857e2416d42dcd3a39ce4bab
---
 net/qrtr/ns.c | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/net/qrtr/ns.c b/net/qrtr/ns.c
index aa2454f30075..3138c245bb8a 100644
--- a/net/qrtr/ns.c
+++ b/net/qrtr/ns.c
@@ -10,13 +10,12 @@
 #include <linux/qrtr.h>
 #include <linux/workqueue.h>
 #include <net/sock.h>
-
 #include "qrtr.h"
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/qrtr.h>
 
-static RADIX_TREE(nodes, GFP_KERNEL);
+static DEFINE_XARRAY(nodes);
 
 static struct {
 	struct socket *sock;
@@ -73,7 +72,7 @@ static struct qrtr_node *node_get(unsigned int node_id)
 {
 	struct qrtr_node *node;
 
-	node = radix_tree_lookup(&nodes, node_id);
+	node = xa_load(&nodes, node_id);
 	if (node)
 		return node;
 
@@ -85,7 +84,7 @@ static struct qrtr_node *node_get(unsigned int node_id)
 	node->id = node_id;
 	xa_init(&node->servers);
 
-	if (radix_tree_insert(&nodes, node_id, node)) {
+	if (xa_store(&nodes, node_id, node, GFP_KERNEL)) {
 		kfree(node);
 		return NULL;
 	}
-- 
2.34.1

