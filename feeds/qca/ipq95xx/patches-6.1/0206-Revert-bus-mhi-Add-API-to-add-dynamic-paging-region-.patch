From 61a37a5d245fe2296925063629d6805164530dc1 Mon Sep 17 00:00:00 2001
From: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Date: Tue, 9 May 2023 02:54:03 -0700
Subject: [PATCH 206/281] Revert "bus: mhi: Add API to add dynamic paging
 region to mhi_buf table"

This reverts commit b71e291dd6e30a1e9462bda46ff7bf383e15b451.

Change-Id: Ie42e1758a160f9371c6c42877c1321f9bcfc8495
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
---
 drivers/bus/mhi/host/boot.c     | 96 ++++++---------------------------
 drivers/bus/mhi/host/init.c     |  9 ++--
 drivers/bus/mhi/host/internal.h |  5 +-
 include/linux/mhi.h             | 11 ----
 4 files changed, 21 insertions(+), 100 deletions(-)

diff --git a/drivers/bus/mhi/host/boot.c b/drivers/bus/mhi/host/boot.c
index 47faa6ab6a21..26d0eddb1477 100644
--- a/drivers/bus/mhi/host/boot.c
+++ b/drivers/bus/mhi/host/boot.c
@@ -299,72 +299,22 @@ static int mhi_fw_load_bhi(struct mhi_controller *mhi_cntrl,
 }
 
 void mhi_free_bhie_table(struct mhi_controller *mhi_cntrl,
-			 struct image_info *image_info, bool is_fbc)
+			 struct image_info *image_info)
 {
 	int i;
 	struct mhi_buf *mhi_buf = image_info->mhi_buf;
 
-	for (i = 0; i < image_info->entries; i++, mhi_buf++) {
-		/* For FBC image, element mhi_buf[img_info->entries - 2] points
-		 * to Dynamic paging region and it should not be freed.
-		 */
-		if (is_fbc && i == (image_info->entries - 2))
-			continue;
-
+	for (i = 0; i < image_info->entries; i++, mhi_buf++)
 		dma_free_coherent(mhi_cntrl->cntrl_dev, mhi_buf->len,
 				  mhi_buf->buf, mhi_buf->dma_addr);
-	}
 
 	kfree(image_info->mhi_buf);
 	kfree(image_info);
 }
 
-int mhi_update_bhie_table_for_dyn_paging(struct mhi_controller *mhi_cntrl,
-					 void *va, phys_addr_t pa,
-					 size_t size)
-{
-	struct image_info *image_info = mhi_cntrl->fbc_image;
-	int i, segments;
-	struct mhi_buf *mhi_buf;
-	struct bhi_vec_entry *bhi_vec;
-	struct device *dev = &mhi_cntrl->mhi_dev->dev;
-
-	if (!image_info) {
-		dev_err(dev, "FBC Image is NULL\n");
-		return -EINVAL;
-	}
-
-	segments = image_info->entries;
-
-	/* Find the free entry in bhi_vec table for dynamic paging region */
-	bhi_vec = &image_info->bhi_vec[0];
-	for (i = 0; (i < segments - 1); i++) {
-		if (!bhi_vec->dma_addr)
-			break;
-		bhi_vec++;
-	}
-
-	if (i == (segments - 1)) {
-		dev_err(dev, "No space in Vector Table\n");
-		return -ENOMEM;
-	}
-
-	bhi_vec->dma_addr = pa;
-	bhi_vec->size = size;
-
-	/* mhi_buf[segments - 2] is reserved Dynamic Paging region */
-	mhi_buf = &image_info->mhi_buf[segments - 2];
-	mhi_buf->buf = va;
-	mhi_buf->dma_addr = pa;
-	mhi_buf->len = size;
-
-	return 0;
-}
-EXPORT_SYMBOL_GPL(mhi_update_bhie_table_for_dyn_paging);
-
 int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
 			 struct image_info **image_info,
-			 size_t alloc_size, bool is_fbc)
+			 size_t alloc_size)
 {
 	size_t seg_size = mhi_cntrl->seg_len;
 	int segments = DIV_ROUND_UP(alloc_size, seg_size) + 1;
@@ -372,10 +322,6 @@ int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
 	struct image_info *img_info;
 	struct mhi_buf *mhi_buf;
 
-	/* Allocate one extra entry for Dynamic Pageable in FBC */
-	if (is_fbc)
-		segments++;
-
 	img_info = kzalloc(sizeof(*img_info), GFP_KERNEL);
 	if (!img_info)
 		return -ENOMEM;
@@ -391,28 +337,16 @@ int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
 	for (i = 0; i < segments; i++, mhi_buf++) {
 		size_t vec_size = seg_size;
 
-		if (is_fbc && (i == segments - 2)) {
-			/* Initialize an entry for Dynamic paging region which
-			 * would be updated later in
-			 * mhi_update_bhie_table_for_dyn_paging
-			 */
-			vec_size = 0;
-			mhi_buf->buf = NULL;
-			mhi_buf->dma_addr = 0;
-		} else {
-			/* Vector table is the last entry */
-			if (i == segments - 1)
-				vec_size = sizeof(struct bhi_vec_entry) * i;
-
-			mhi_buf->len = vec_size;
-			mhi_buf->buf = dma_alloc_coherent(mhi_cntrl->cntrl_dev,
-							  vec_size,
-							  &mhi_buf->dma_addr,
-							  GFP_KERNEL);
-			if (!mhi_buf->buf)
-				goto error_alloc_segment;
-		}
+		/* Vector table is the last entry */
+		if (i == segments - 1)
+			vec_size = sizeof(struct bhi_vec_entry) * i;
 
+		mhi_buf->len = vec_size;
+		mhi_buf->buf = dma_alloc_coherent(mhi_cntrl->cntrl_dev,
+						  vec_size, &mhi_buf->dma_addr,
+						  GFP_KERNEL);
+		if (!mhi_buf->buf)
+			goto error_alloc_segment;
 	}
 
 	img_info->bhi_vec = img_info->mhi_buf[segments - 1].buf;
@@ -446,7 +380,7 @@ static void mhi_firmware_copy(struct mhi_controller *mhi_cntrl,
 		to_cpy = min(remainder, mhi_buf->len);
 		memcpy(mhi_buf->buf, buf, to_cpy);
 		bhi_vec->dma_addr = mhi_buf->dma_addr;
-		bhi_vec->size = mhi_buf->len;
+		bhi_vec->size = to_cpy;
 
 		buf += to_cpy;
 		remainder -= to_cpy;
@@ -546,7 +480,7 @@ void mhi_fw_load_handler(struct mhi_controller *mhi_cntrl)
 	 */
 	if (mhi_cntrl->fbc_download) {
 		ret = mhi_alloc_bhie_table(mhi_cntrl, &mhi_cntrl->fbc_image,
-					   firmware->size, true);
+					   firmware->size);
 		if (ret) {
 			release_firmware(firmware);
 			goto error_fw_load;
@@ -571,7 +505,7 @@ void mhi_fw_load_handler(struct mhi_controller *mhi_cntrl)
 
 error_ready_state:
 	if (mhi_cntrl->fbc_download) {
-		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->fbc_image, true);
+		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->fbc_image);
 		mhi_cntrl->fbc_image = NULL;
 	}
 
diff --git a/drivers/bus/mhi/host/init.c b/drivers/bus/mhi/host/init.c
index 4accbb468549..bf672de35131 100644
--- a/drivers/bus/mhi/host/init.c
+++ b/drivers/bus/mhi/host/init.c
@@ -1135,14 +1135,13 @@ int mhi_prepare_for_power_up(struct mhi_controller *mhi_cntrl)
 		 * Allocate RDDM table for debugging purpose if specified
 		 */
 		mhi_alloc_bhie_table(mhi_cntrl, &mhi_cntrl->rddm_image,
-				     mhi_cntrl->rddm_size, false);
+				     mhi_cntrl->rddm_size);
 		if (mhi_cntrl->rddm_image) {
 			ret = mhi_rddm_prepare(mhi_cntrl,
 					       mhi_cntrl->rddm_image);
 			if (ret) {
 				mhi_free_bhie_table(mhi_cntrl,
-						    mhi_cntrl->rddm_image,
-						    false);
+						    mhi_cntrl->rddm_image);
 				goto error_reg_offset;
 			}
 		}
@@ -1165,12 +1164,12 @@ EXPORT_SYMBOL_GPL(mhi_prepare_for_power_up);
 void mhi_unprepare_after_power_down(struct mhi_controller *mhi_cntrl)
 {
 	if (mhi_cntrl->fbc_image) {
-		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->fbc_image, true);
+		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->fbc_image);
 		mhi_cntrl->fbc_image = NULL;
 	}
 
 	if (mhi_cntrl->rddm_image) {
-		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->rddm_image, false);
+		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->rddm_image);
 		mhi_cntrl->rddm_image = NULL;
 	}
 
diff --git a/drivers/bus/mhi/host/internal.h b/drivers/bus/mhi/host/internal.h
index 1eacabeb898e..01fd10a399b6 100644
--- a/drivers/bus/mhi/host/internal.h
+++ b/drivers/bus/mhi/host/internal.h
@@ -274,10 +274,9 @@ int mhi_destroy_device(struct device *dev, void *data);
 void mhi_create_devices(struct mhi_controller *mhi_cntrl);
 
 int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
-			 struct image_info **image_info, size_t alloc_size,
-			 bool is_fbc);
+			 struct image_info **image_info, size_t alloc_size);
 void mhi_free_bhie_table(struct mhi_controller *mhi_cntrl,
-			 struct image_info *image_info, bool is_fbc);
+			 struct image_info *image_info);
 
 /* Power management APIs */
 enum mhi_pm_state __must_check mhi_tryset_pm_state(
diff --git a/include/linux/mhi.h b/include/linux/mhi.h
index e7e4da6b7313..a5441ad33c74 100644
--- a/include/linux/mhi.h
+++ b/include/linux/mhi.h
@@ -772,17 +772,6 @@ void mhi_unprepare_from_transfer(struct mhi_device *mhi_dev);
  */
 int mhi_poll(struct mhi_device *mhi_dev, u32 budget);
 
-/**
- * mhi_update_bhie_table_for_dyn_paging - Add the dynamic paging memory region
- * into the mhi_buf table.
- * @mhi_cntrl: MHI controller
- * @va: Virtual Address of the memory region
- * @pa: Physical Address of the memory region
- * @size: Size of the memory region
- */
-int mhi_update_bhie_table_for_dyn_paging(struct mhi_controller *mhi_cntrl,
-					 void *va, phys_addr_t pa,
-					 size_t size);
 /**
  * mhi_queue_dma - Send or receive DMA mapped buffers from client device
  *                 over MHI channel
-- 
2.17.1

