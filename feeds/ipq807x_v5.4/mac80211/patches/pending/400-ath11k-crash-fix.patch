--- a/drivers/net/wireless/ath/ath11k/peer.c
+++ b/drivers/net/wireless/ath/ath11k/peer.c
@@ -799,6 +799,12 @@ int ath11k_peer_delete(struct ath11k *ar
 	spin_lock_bh(&ar->ab->base_lock);
 
 	peer = ath11k_peer_find_by_addr(ar->ab, addr);
+	if (peer && peer-> pdev_idx == ar-> pdev_idx)
+		ath11k_peer_rhash_delete(ar->ab, peer);
+
+	if (!peer)
+		peer = ath11k_peer_find(ar->ab, vdev_id, addr);
+
 	if (peer) {
 #ifdef CPTCFG_ATH11K_NSS_SUPPORT
 		peer->delete_in_progress = true;
@@ -819,7 +825,6 @@ int ath11k_peer_delete(struct ath11k *ar
 				}
 			}
 #endif
-		ath11k_peer_rhash_delete(ar->ab, peer);
 	}
 	spin_unlock_bh(&ar->ab->base_lock);
 	mutex_unlock(&ar->ab->tbl_mtx_lock);
@@ -867,13 +872,19 @@ int ath11k_peer_create(struct ath11k *ar
 		return -ENOBUFS;
 	}
 
+	mutex_lock(&ar->ab->tbl_mtx_lock);
 	spin_lock_bh(&ar->ab->base_lock);
 	peer = ath11k_peer_find_by_addr(ar->ab, param->peer_addr);
 	if (peer) {
-		spin_unlock_bh(&ar->ab->base_lock);
-		return -EINVAL;
+		if (peer->vdev_id == param->vdev_id) {
+			spin_unlock_bh(&ar->ab->base_lock);
+			mutex_unlock(&ar->ab->tbl_mtx_lock);
+			return -EINVAL;
+		}
+		ath11k_peer_rhash_delete(ar->ab, peer);
 	}
 	spin_unlock_bh(&ar->ab->base_lock);
+	mutex_unlock(&ar->ab->tbl_mtx_lock);
 
 	ret = ath11k_wmi_send_peer_create_cmd(ar, param);
 	if (ret) {
