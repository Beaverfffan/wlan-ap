From dab3dac67d6f4304cbba80a57510e0f90a5c05ba Mon Sep 17 00:00:00 2001
From: Sridharan S N <quic_sridsn@quicinc.com>
Date: Thu, 23 Nov 2023 15:46:50 +0530
Subject: [PATCH] drivers: mtd: qcom_nandc: Add switch layout support

In ipq9574 platform, PBL doesn't have 4K nand support.

In order to support 4K QSPI nand in such a platform,
we have introduced this layout switch mechanism. In this,
the SBL will be in 2K and all other partitions would be
in 4K. Therefore, this change is required to make sure
during sysupgrade the layout is switched as needed
accordingly for SBL and for other partitions.

Change-Id: Ied559e9881fdc04ae0fdaaddf6fcaff0712d0ecd
Signed-off-by: Sridharan S N <quic_sridsn@quicinc.com>
---
 drivers/mtd/nand/raw/qcom_nandc.c | 113 +++++++++++++++++++++++++++---
 1 file changed, 105 insertions(+), 8 deletions(-)

diff --git a/drivers/mtd/nand/raw/qcom_nandc.c b/drivers/mtd/nand/raw/qcom_nandc.c
index 85b311aa906c..dcd1ab53e1f3 100644
--- a/drivers/mtd/nand/raw/qcom_nandc.c
+++ b/drivers/mtd/nand/raw/qcom_nandc.c
@@ -320,6 +320,13 @@ static const u32 qspi_training_block_64[] = {
 	0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F, 0x0F0F0F0F,
 };
 
+struct nand_flash_dev qspinand_flash_ids_2k[] = {
+	{"MX35UF4GE4AD-Z4I SPI NAND 1G 1.8V",
+			{ .id = {0xc2, 0xb7} },
+		SZ_2K, SZ_256, SZ_128K, 0, 2, 128, NAND_ECC_INFO(8, SZ_512), 0},
+	{NULL}
+};
+
 /*
  * This data type corresponds to the BAM transaction which will be used for all
  * NAND transfers.
@@ -464,6 +471,8 @@ struct nandc_regs {
  * @data_buffer:		our local DMA buffer for page read/writes,
  *				used when we can't use the buffer provided
  *				by upper layers directly
+ * @boot_layout:		flag to tell whether current layout is boot
+ *				layout
  * @reg_read_buf:		local buffer for reading back registers via DMA
  *
  * @base_phys:			physical base address of controller registers
@@ -516,6 +525,7 @@ struct qcom_nand_controller {
 	struct list_head desc_list;
 
 	u8		*data_buffer;
+	bool		boot_layout;
 	__le32		*reg_read_buf;
 
 	phys_addr_t base_phys;
@@ -625,6 +635,7 @@ struct qcom_nand_host {
  * @is_qpic - whether NAND CTRL is part of qpic IP
  * @qpic_v2 - flag to indicate QPIC IP version 2
  * @use_codeword_fixup - whether NAND has different layout for boot partitions
+ * @switch_layout - flag to enable or disable switching of nand page size
  */
 struct qcom_nandc_props {
 	u32 ecc_modes;
@@ -637,6 +648,7 @@ struct qcom_nandc_props {
 	bool is_serial_training;
 	bool quad_mode;
 	bool page_scope;
+	bool switch_layout;
 };
 
 /* Frees the BAM transaction memory */
@@ -3105,7 +3117,7 @@ static int qcom_nand_attach_chip(struct nand_chip *chip)
 	nandc->regs->erased_cw_detect_cfg_set =
 		cpu_to_le32(SET_ERASED_PAGE_DET);
 
-	dev_dbg(nandc->dev,
+	dev_info(nandc->dev,
 		"cfg0 %x cfg1 %x ecc_buf_cfg %x ecc_bch cfg %x cw_size %d cw_data %d strength %d parity_bytes %d steps %d\n",
 		host->cfg0, host->cfg1, host->ecc_buf_cfg, host->ecc_bch_cfg,
 		host->cw_size, host->cw_data, ecc->strength, ecc->bytes,
@@ -3999,12 +4011,19 @@ static int qcom_nand_host_init_and_register(struct qcom_nand_controller *nandc,
 	/* set up initial status value */
 	host->status = NAND_STATUS_READY | NAND_STATUS_WP;
 
-	if (nandc->props->is_serial_nand)
+	if (nandc->props->is_serial_nand) {
 		qspi_nand_init(chip);
-
-	ret = nand_scan(chip, 1);
-	if (ret)
+		if (nandc->boot_layout)
+			ret = nand_scan_with_ids(chip, 1, qspinand_flash_ids_2k);
+		else
+			ret = nand_scan(chip, 1);
+	} else {
+		ret = nand_scan(chip, 1);
+	}
+	if (ret) {
+		dev_err(nandc->dev, "nand scan returned error\n");
 		return ret;
+	}
 
 	if (nandc->props->qpic_v2 && nandc->props->page_scope) {
 		nandc->sts_buf_size = (mtd->writesize / NANDC_STEP_SIZE) *
@@ -4026,9 +4045,15 @@ static int qcom_nand_host_init_and_register(struct qcom_nand_controller *nandc,
 		if (ret)
 			dev_err(nandc->dev, "qspi_nand device config failed\n");
 		if (nandc->props->is_serial_training) {
-			ret = qspi_execute_training(nandc, host, mtd);
-			if (ret)
-				dev_err(nandc->dev, "failed to enable serial training\n");
+			if (nandc->boot_layout) {
+				dev_info(nandc->dev,
+				"Skip serial training in boot layout\n");
+			} else {
+				ret = qspi_execute_training(nandc, host, mtd);
+				if (ret)
+					dev_err(nandc->dev,
+					"failed to enable serial training\n");
+			}
 		}
 	}
 
@@ -4101,9 +4126,63 @@ static int qcom_nandc_parse_dt(struct platform_device *pdev)
 	return 0;
 }
 
+static ssize_t boot_layout_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	struct qcom_nand_controller *nandc = dev_get_drvdata(dev);
+
+	return snprintf(buf, PAGE_SIZE, "%u\n", nandc->boot_layout);
+}
+
+static ssize_t boot_layout_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t n)
+{
+	struct qcom_nand_controller *nandc = dev_get_drvdata(dev);
+	struct qcom_nand_host *host, *tmp;
+	int ret;
+
+	ret = kstrtobool(buf, &nandc->boot_layout);
+	if (ret) {
+		dev_err(dev, "invalid boot_layout\n");
+		return ret;
+	}
+
+	list_for_each_entry_safe_reverse(host, tmp, &nandc->host_list, node) {
+		struct nand_chip *chip = &host->chip;
+		struct mtd_info *mtd = nand_to_mtd(chip);
+
+		ret = mtd_device_unregister(mtd);
+		if (ret) {
+			dev_err(dev, "device unregister failed\n");
+			return ret;
+		}
+		memset(mtd, 0, sizeof(struct mtd_info));
+		list_del(&host->node);
+		devm_kfree(nandc->dev, host);
+	}
+
+	if (nandc->props->qpic_v2 && nandc->props->page_scope) {
+		devm_kfree(nandc->dev, nandc->status_buf);
+	}
+
+	ret = qcom_probe_nand_devices(nandc);
+	if (ret) {
+		dev_err(dev, "nand device probe failed\n");
+		return ret;
+	}
+
+	return n;
+}
+
+static const DEVICE_ATTR(boot_layout, 0644, boot_layout_show,
+			boot_layout_store);
+
 static int qcom_nandc_probe(struct platform_device *pdev)
 {
 	struct qcom_nand_controller *nandc;
+	struct qcom_nand_host *host;
 	const void *dev_data;
 	struct device *dev = &pdev->dev;
 	struct resource *res;
@@ -4184,6 +4263,20 @@ static int qcom_nandc_probe(struct platform_device *pdev)
 	if (ret)
 		goto err_setup;
 
+	if (nandc->props->is_serial_nand && nandc->props->switch_layout) {
+		list_for_each_entry(host, &nandc->host_list, node) {
+			struct nand_chip *chip = &host->chip;
+			struct mtd_info *mtd = nand_to_mtd(chip);
+
+			if (mtd->writesize == SZ_4K) {
+				ret = sysfs_create_file(&pdev->dev.kobj,
+							&dev_attr_boot_layout.attr);
+				if (ret)
+					goto err_setup;
+			}
+		}
+	}
+
 	return 0;
 
 err_setup:
@@ -4213,6 +4306,9 @@ static int qcom_nandc_remove(struct platform_device *pdev)
 		nand_cleanup(chip);
 	}
 
+	if (nandc->props->switch_layout)
+		sysfs_remove_file(&pdev->dev.kobj, &dev_attr_boot_layout.attr);
+
 	qcom_nandc_unalloc(nandc);
 
 	clk_disable_unprepare(nandc->aon_clk);
@@ -4282,6 +4378,7 @@ static const struct qcom_nandc_props ipq9574_nandc_props = {
 	.is_serial_training = true,
 	.quad_mode = true,
 	.page_scope = true,
+	.switch_layout = true,
 	.dev_cmd_reg_start = 0x7000,
 };
 
-- 
2.34.1

