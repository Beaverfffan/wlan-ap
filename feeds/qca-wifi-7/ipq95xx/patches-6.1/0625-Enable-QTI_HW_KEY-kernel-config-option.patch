From 7201d37ebceab26e9a6031e561fbf36b20ac4aee Mon Sep 17 00:00:00 2001
From: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
Date: Tue, 30 Jan 2024 15:54:36 +0530
Subject: [PATCH] Enable QTI_HW_KEY kernel config option

Enable QTI_HW_KEY kernel config option for IPQ53xx platforms

Change-Id: Ife19bc05e08a2a47143ef82f78cdca6486732646
Signed-off-by: Poovendhan Selvaraj <quic_poovendh@quicinc.com>
(cherry picked from commit 5142e17314dbb3f0f2919bfe9d31c2a5ef5e2d4e)
---
 drivers/firmware/qcom_scm.c | 58 +++++++++++++++++++++++++++++++++++++
 drivers/soc/qcom/Kconfig    |  7 +++++
 drivers/soc/qcom/Makefile   |  1 +
 include/linux/qcom_scm.h    |  6 ++++
 4 files changed, 72 insertions(+)

diff --git a/drivers/firmware/qcom_scm.c b/drivers/firmware/qcom_scm.c
index 9d67c5762603..582f3107f461 100644
--- a/drivers/firmware/qcom_scm.c
+++ b/drivers/firmware/qcom_scm.c
@@ -382,6 +382,64 @@ int qcom_config_sec_ice(void *buf, int size)
 }
 EXPORT_SYMBOL(qcom_config_sec_ice);
 
+int qcom_scm_derive_and_share_key(u32 key_len, uint8_t *sw_context,
+		u32 sw_context_len, uint8_t *derived_key, uint32_t derived_key_len)
+{
+	dma_addr_t dma_sw_context_buf = 0;
+	dma_addr_t dma_derived_key_buf;
+	char *sw_context_buf = NULL, *derived_key_buf = NULL;
+	int ret = -ENOMEM;
+	struct qcom_scm_res res;
+	struct qcom_scm_desc desc = {
+		.svc = QTI_SCM_DERIVE_KEY,
+		.cmd = QTI_SCM_DERIVE_KEY_PARAM_ID,
+		.arginfo = QCOM_SCM_ARGS(5, QCOM_SCM_VAL, QCOM_SCM_RO,
+								QCOM_SCM_VAL, QCOM_SCM_RW, QCOM_SCM_VAL),
+		.owner = ARM_SMCCC_OWNER_SIP,
+	};
+
+	if (sw_context_len != 0) {
+		sw_context_buf = dma_alloc_coherent(__scm->dev, PAGE_SIZE,
+				&dma_sw_context_buf, GFP_KERNEL);
+		if (sw_context_buf == NULL) {
+			pr_err("DMA Allocation failed for sw_context_buf\n");
+			return ret;
+		}
+		memcpy(sw_context_buf, sw_context, sw_context_len);
+	}
+
+	derived_key_buf = dma_alloc_coherent(__scm->dev, PAGE_SIZE,
+					     &dma_derived_key_buf, GFP_KERNEL);
+	if (derived_key_buf == NULL) {
+		pr_err("DMA Allocation failed for derived_key_buf\n");
+		goto dma_unmap_sw_context_buf;
+	}
+
+	desc.args[0] = key_len;
+	desc.args[1] = dma_sw_context_buf;
+	desc.args[2] = sw_context_len;
+	desc.args[3] = dma_derived_key_buf;
+	desc.args[4] = derived_key_len;
+
+	ret = qcom_scm_call(__scm->dev, &desc, &res);
+	if(ret != 0) {
+		pr_err("%s: Response error code is : 0x%x\n", __func__,
+				(unsigned int)res.result[0]);
+	}
+
+	memcpy(derived_key, derived_key_buf, derived_key_len);
+	dma_free_coherent(__scm->dev, PAGE_SIZE, derived_key_buf,
+			  dma_derived_key_buf);
+
+dma_unmap_sw_context_buf:
+	if (sw_context_len != 0) {
+		dma_free_coherent(__scm->dev, PAGE_SIZE, sw_context_buf,
+				  dma_sw_context_buf);
+	}
+
+	return ret ?  : res.result[0];
+}
+
 static int qcom_scm_set_boot_addr(void *entry, const u8 *cpu_bits)
 {
 	int cpu;
diff --git a/drivers/soc/qcom/Kconfig b/drivers/soc/qcom/Kconfig
index c05ea36491d0..ad1c2ea7e8ed 100644
--- a/drivers/soc/qcom/Kconfig
+++ b/drivers/soc/qcom/Kconfig
@@ -329,6 +329,13 @@ config QTI_LICENSE_MANAGER
 	  running to communicate the license termination mode and license
 	  files to the attached PCIe device.
 
+config QTI_HW_KEY
+	bool "QTI HW Key driver"
+	depends on QCOM_SCM
+	select KEYS
+	help
+	  This driver requests HW Key and stores in kernel keyring.
+
 config QTI_APSS_ACC
 	bool "QTI APSS Application Clock Controller"
 	depends on ARM64 && QCOM_SCM
diff --git a/drivers/soc/qcom/Makefile b/drivers/soc/qcom/Makefile
index 4f7268260fbf..639b27d653b6 100644
--- a/drivers/soc/qcom/Makefile
+++ b/drivers/soc/qcom/Makefile
@@ -37,6 +37,7 @@ obj-$(CONFIG_QCOM_SOC_NETSTANDBY) += netstandby.o
 obj-$(CONFIG_IPQ_DEBUG)	+= ipq-debug.o
 obj-$(CONFIG_MSM_RPM_LOG)	+= rpm_log.o
 obj-$(CONFIG_QTI_TZ_LOG) += tz_log.o
+obj-$(CONFIG_QTI_HW_KEY) += hw_key.o
 obj-$(CONFIG_QTI_LICENSE_MANAGER) += license_manager.o
 obj-$(CONFIG_QTI_LICENSE_MANAGER)	+= qwes.o
 obj-$(CONFIG_QTI_APSS_ACC) += cpu_ops.o cpu_pwr_ctl.o
diff --git a/include/linux/qcom_scm.h b/include/linux/qcom_scm.h
index 84d1aecd928c..fbdd26dd7343 100644
--- a/include/linux/qcom_scm.h
+++ b/include/linux/qcom_scm.h
@@ -15,6 +15,9 @@
 #define QCOM_SCM_CPU_PWR_DOWN_L2_OFF	0x1
 #define QCOM_SCM_HDCP_MAX_REQ_CNT	5
 
+#define QTI_SCM_DERIVE_KEY				0xA
+#define QTI_SCM_DERIVE_KEY_PARAM_ID		0xD
+
 #define QTI_TZ_DIAG_LOG_ENCR_ID		0x0
 #define QTI_TZ_QSEE_LOG_ENCR_ID		0x1
 #define QTI_TZ_LOG_NO_UPDATE		-6
@@ -231,6 +234,9 @@ extern int qcom_scm_set_cold_boot_addr(void *entry);
 extern int qcom_scm_set_warm_boot_addr(void *entry);
 extern void qcom_scm_cpu_power_down(u32 flags);
 extern int qcom_scm_set_remote_state(u32 state, u32 id);
+extern int qcom_scm_derive_and_share_key(uint32_t key_len, uint8_t *sw_context,
+				u32 sw_context_len, uint8_t *derived_key,
+				u32 derived_key_len);
 
 struct qcom_scm_pas_metadata {
 	void *ptr;
-- 
2.34.1

