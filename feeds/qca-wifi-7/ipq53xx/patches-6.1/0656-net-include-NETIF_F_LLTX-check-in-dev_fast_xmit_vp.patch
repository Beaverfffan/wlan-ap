From 779c6725754b9bd5d3bac5c899bff93d3ea4ba76 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Fri, 20 Sep 2024 10:47:59 +0530
Subject: [PATCH] net : include NETIF_F_LLTX check in dev_fast_xmit_vp()

Add support to include NETIF_F_LLTX check and
avoid txq->_xmit_lock in dev_fast_xmit_vp().

This helps in throughput improvement.

Change-Id: Ie7e63a7c42470c80374dd1b55638f2070daa4016
Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 net/core/dev.c | 21 +++++++++++++++------
 1 file changed, 15 insertions(+), 6 deletions(-)

diff --git a/net/core/dev.c b/net/core/dev.c
index 5a9092cac1e5..4deba228ba2d 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -4491,26 +4491,35 @@ bool dev_fast_xmit_vp(struct sk_buff *skb,
 	txq = netdev_core_pick_tx(dev, skb, NULL);
 
 	if (likely(txq->xmit_lock_owner != cpu)) {
-#define FAST_VP_HARD_TX_LOCK(txq, cpu) {	\
+
+#define FAST_VP_HARD_TX_LOCK(features, txq, cpu) {		\
+	if ((features & NETIF_F_LLTX) == 0) {		\
 		__netif_tx_lock(txq, cpu);		\
+	} else {					\
+		__netif_tx_acquire(txq);		\
+	}						\
 }
 
-#define FAST_VP_HARD_TX_UNLOCK(txq) {		\
+#define FAST_VP_HARD_TX_UNLOCK(features, txq) {		\
+	if ((features & NETIF_F_LLTX) == 0) {		\
 		__netif_tx_unlock(txq);			\
+	} else {					\
+		__netif_tx_release(txq);		\
+	}						\
 }
 		skb->fast_xmit = 1;
-		FAST_VP_HARD_TX_LOCK(txq, cpu);
+		FAST_VP_HARD_TX_LOCK(dev->features, txq, cpu);
 		if (likely(!netif_xmit_stopped(txq))) {
 			rc = netdev_start_xmit(skb, dev, txq, 0);
 			if (unlikely(!dev_xmit_complete(rc))) {
-				FAST_VP_HARD_TX_UNLOCK(txq);
+				FAST_VP_HARD_TX_UNLOCK(dev->features, txq);
 				goto q_xmit;
 			}
-			FAST_VP_HARD_TX_UNLOCK(txq);
+			FAST_VP_HARD_TX_UNLOCK(dev->features, txq);
 			rcu_read_unlock_bh();
 			return true;
 		}
-		FAST_VP_HARD_TX_UNLOCK(txq);
+		FAST_VP_HARD_TX_UNLOCK(dev->features, txq);
 	}
 q_xmit:
 	skb->fast_xmit = 0;
-- 
2.34.1

