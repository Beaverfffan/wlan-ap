From 9b396775995a21862761a0b520b8926705083e86 Mon Sep 17 00:00:00 2001
From: qiangqiang cheng <quic_qiangqia@quicinc.com>
Date: Tue, 17 Oct 2023 10:45:18 +0800
Subject: [PATCH] qca8k: enable MHT DSA on kernel6.1

mht DSA needs to work with HOLB which uses/adds 4 bytes ath header by
PPE, add 4 bytes process and parameter to control adding ath header in
DSA drivers.

Change-Id: I88a7c694fa1fff89be331491bf9f832799238463
Signed-off-by: qiangqiang cheng <quic_qiangqia@quicinc.com>
---
 drivers/net/dsa/qca/qca8k-8xxx.c   | 257 ++++++++++++++++++++++++++++-
 drivers/net/dsa/qca/qca8k-common.c |  32 +++-
 drivers/net/dsa/qca/qca8k.h        |  16 +-
 include/linux/dsa/tag_qca.h        |  11 ++
 include/net/dsa.h                  |   2 +
 net/dsa/port.c                     |   3 +
 net/dsa/tag_qca.c                  |  92 +++++++++--
 7 files changed, 383 insertions(+), 30 deletions(-)

diff --git a/drivers/net/dsa/qca/qca8k-8xxx.c b/drivers/net/dsa/qca/qca8k-8xxx.c
index 7a6166a0c9bc..fb66d7e6fc7e 100644
--- a/drivers/net/dsa/qca/qca8k-8xxx.c
+++ b/drivers/net/dsa/qca/qca8k-8xxx.c
@@ -23,6 +23,10 @@
 
 #include "qca8k.h"
 
+bool tx_hdr_offload = false;
+module_param(tx_hdr_offload, bool, S_IRUGO);
+MODULE_PARM_DESC(tx_hdr_offload, "Offload adding ath hdr process in Tx direction");
+
 static void
 qca8k_split_addr(u32 regaddr, u16 *r1, u16 *r2, u16 *page)
 {
@@ -36,6 +40,22 @@ qca8k_split_addr(u32 regaddr, u16 *r1, u16 *r2, u16 *page)
 	*page = regaddr & 0x3ff;
 }
 
+static void
+mht_split_addr(uint32_t regaddr, uint16_t *r1, uint16_t *r2, uint16_t *page,
+		uint16_t *switch_phy_id)
+{
+	*r1 = regaddr & 0x1c;
+
+	regaddr >>= 5;
+	*r2 = regaddr & 0x7;
+
+	regaddr >>= 3;
+	*page = regaddr & 0xffff;
+
+	regaddr >>= 16;
+	*switch_phy_id = regaddr & 0xff;
+}
+
 static int
 qca8k_mii_read32(struct mii_bus *bus, int phy_id, u32 regnum, u32 *val)
 {
@@ -370,6 +390,20 @@ qca8k_regmap_read(void *ctx, uint32_t reg, uint32_t *val)
 	u16 r1, r2, page;
 	int ret;
 
+	if (priv->switch_id == QCA8K_ID_QCA8386) {
+		u16 switch_phy_id, lo, hi;
+		mht_split_addr(reg, &r1, &r2, &page, &switch_phy_id);
+
+		mutex_lock_nested(&bus->mdio_lock, MDIO_MUTEX_NESTED);
+		bus->write(bus, 0x18 | (switch_phy_id >> 5), switch_phy_id & 0x1f, page);
+		udelay(100);
+		lo = bus->read(bus, 0x10 | r2, r1);
+		hi = bus->read(bus, 0x10 | r2, r1 + 2);
+		mutex_unlock(&bus->mdio_lock);
+
+		return (hi << 16) | lo;
+	}
+
 	if (!qca8k_read_eth(priv, reg, val, sizeof(*val)))
 		return 0;
 
@@ -396,6 +430,22 @@ qca8k_regmap_write(void *ctx, uint32_t reg, uint32_t val)
 	u16 r1, r2, page;
 	int ret;
 
+	if (priv->switch_id == QCA8K_ID_QCA8386) {
+		u16 switch_phy_id, lo, hi;
+		mht_split_addr(reg, &r1, &r2, &page, &switch_phy_id);
+		lo = val & 0xffff;
+		hi = (u16) (val >> 16);
+
+		mutex_lock_nested(&bus->mdio_lock, MDIO_MUTEX_NESTED);
+		bus->write(bus, 0x18 | (switch_phy_id >> 5), switch_phy_id & 0x1f, page);
+		udelay(100);
+		bus->write(bus, 0x10 | r2, r1, lo);
+		bus->write(bus, 0x10 | r2, r1 + 2, hi);
+		mutex_unlock(&bus->mdio_lock);
+
+		return 0;
+	}
+
 	if (!qca8k_write_eth(priv, reg, &val, sizeof(val)))
 		return 0;
 
@@ -423,6 +473,32 @@ qca8k_regmap_update_bits(void *ctx, uint32_t reg, uint32_t mask, uint32_t write_
 	u32 val;
 	int ret;
 
+	if (priv->switch_id == QCA8K_ID_QCA8386) {
+		u16 switch_phy_id, lo, hi;
+		mht_split_addr(reg, &r1, &r2, &page, &switch_phy_id);
+
+		mutex_lock_nested(&bus->mdio_lock, MDIO_MUTEX_NESTED);
+		bus->write(bus, 0x18 | (switch_phy_id >> 5), switch_phy_id & 0x1f, page);
+		udelay(100);
+		lo = bus->read(bus, 0x10 | r2, r1);
+		hi = bus->read(bus, 0x10 | r2, r1 + 2);
+		val = (hi << 16) | lo;
+
+		val &= ~mask;
+		val |= write_val;
+
+		lo = val & 0xffff;
+		hi = (u16) (val >> 16);
+
+		bus->write(bus, 0x18 | (switch_phy_id >> 5), switch_phy_id & 0x1f, page);
+		udelay(100);
+		bus->write(bus, 0x10 | r2, r1, lo);
+		bus->write(bus, 0x10 | r2, r1 + 2, hi);
+		mutex_unlock(&bus->mdio_lock);
+
+		return 0;
+	}
+
 	if (!qca8k_regmap_update_bits_eth(priv, reg, mask, write_val))
 		return 0;
 
@@ -669,6 +745,36 @@ qca8k_port_to_phy(int port)
 	return port - 1;
 }
 
+static u16
+qca8k_phy_external_mdio_read(struct qca8k_priv *priv, int port, int regnum)
+{
+	u16 phy, val;
+
+	phy = qca8k_port_to_phy(port) % PHY_MAX_ADDR;
+
+	mutex_lock_nested(&priv->bus->mdio_lock, MDIO_MUTEX_NESTED);
+
+	val = priv->bus->read(priv->bus, phy, regnum);
+
+	mutex_unlock(&priv->bus->mdio_lock);
+
+	return val;
+}
+
+static void
+qca8k_phy_external_mdio_write(struct qca8k_priv *priv, int port, int regnum, u16 data)
+{
+	u16 phy, val;
+
+	phy = qca8k_port_to_phy(port) % PHY_MAX_ADDR;
+
+	mutex_lock_nested(&priv->bus->mdio_lock, MDIO_MUTEX_NESTED);
+
+	val = priv->bus->write(priv->bus, phy, regnum, data);
+
+	mutex_unlock(&priv->bus->mdio_lock);
+}
+
 static int
 qca8k_mdio_busy_wait(struct mii_bus *bus, u32 reg, u32 mask)
 {
@@ -1260,6 +1366,8 @@ qca8k_phylink_mac_config(struct dsa_switch *ds, int port, unsigned int mode,
 static void qca8k_phylink_get_caps(struct dsa_switch *ds, int port,
 				   struct phylink_config *config)
 {
+	struct qca8k_priv *priv = ds->priv;
+
 	switch (port) {
 	case 0: /* 1st CPU port */
 		phy_interface_set_rgmii(config->supported_interfaces);
@@ -1291,6 +1399,13 @@ static void qca8k_phylink_get_caps(struct dsa_switch *ds, int port,
 	config->mac_capabilities = MAC_ASYM_PAUSE | MAC_SYM_PAUSE |
 		MAC_10 | MAC_100 | MAC_1000FD;
 
+	if (priv->switch_id == QCA8K_ID_QCA8386) {
+		__set_bit(PHY_INTERFACE_MODE_USXGMII,
+			  config->supported_interfaces);
+
+		config->mac_capabilities |= MAC_2500FD;
+	}
+
 	config->legacy_pre_march2020 = false;
 }
 
@@ -1322,6 +1437,7 @@ qca8k_phylink_mac_link_up(struct dsa_switch *ds, int port, unsigned int mode,
 			reg = QCA8K_PORT_STATUS_SPEED_100;
 			break;
 		case SPEED_1000:
+		case SPEED_2500:
 			reg = QCA8K_PORT_STATUS_SPEED_1000;
 			break;
 		default:
@@ -1329,6 +1445,9 @@ qca8k_phylink_mac_link_up(struct dsa_switch *ds, int port, unsigned int mode,
 			break;
 		}
 
+		if (dsa_is_cpu_port(ds, port))
+			reg = QCA8K_PORT_STATUS_SPEED_1000;
+
 		if (duplex == DUPLEX_FULL)
 			reg |= QCA8K_PORT_STATUS_DUPLEX;
 
@@ -1609,6 +1728,37 @@ qca8k_get_tag_protocol(struct dsa_switch *ds, int port,
 	return DSA_TAG_PROTO_QCA;
 }
 
+static int qca8k_change_tag_protocol(struct dsa_switch *ds,
+					 enum dsa_tag_protocol proto)
+{
+	struct qca8k_priv *priv = ds->priv;
+
+	switch (proto) {
+	case DSA_TAG_PROTO_QCA:
+		/* using 2 bytes ath header */
+		if (qca8k_write(priv, QCA8K_HEADER_CTL,
+			QCA8K_HEADER_LENGTH_SEL_VAL(0) |
+			QCA8K_HEADER_TYPE_VAL_VAL(0)))
+			goto fail;
+		break;
+	case DSA_TAG_PROTO_4B_QCA:
+		/* using 4 bytes ath header */
+		if (qca8k_write(priv, QCA8K_HEADER_CTL,
+			QCA8K_HEADER_LENGTH_SEL_VAL(1) |
+			QCA8K_HEADER_TYPE_VAL_VAL(QCA_HDR_TYPE_VALUE)))
+			goto fail;
+		break;
+	default:
+		return -EPROTONOSUPPORT;
+	}
+
+	return 0;
+
+fail:
+	dev_err(priv->dev, "failed setting HEADER_CTL, tag driver: %d\n", proto);
+	return -EPROTO;
+}
+
 static void
 qca8k_master_change(struct dsa_switch *ds, const struct net_device *master,
 		    bool operational)
@@ -1640,6 +1790,12 @@ static int qca8k_connect_tag_protocol(struct dsa_switch *ds,
 
 		tagger_data->rw_reg_ack_handler = qca8k_rw_reg_ack_handler;
 		tagger_data->mib_autocast_handler = qca8k_mib_autocast_handler;
+		tagger_data->tx_hdr_offload = tx_hdr_offload;
+
+		break;
+	case DSA_TAG_PROTO_4B_QCA:
+		tagger_data = ds->tagger_data;
+		tagger_data->tx_hdr_offload = tx_hdr_offload;
 
 		break;
 	default:
@@ -1715,7 +1871,7 @@ qca8k_setup(struct dsa_switch *ds)
 		if (dsa_is_cpu_port(ds, i)) {
 			ret = qca8k_write(priv, QCA8K_REG_PORT_HDR_CTRL(i),
 					  FIELD_PREP(QCA8K_PORT_HDR_CTRL_TX_MASK, QCA8K_PORT_HDR_CTRL_ALL) |
-					  FIELD_PREP(QCA8K_PORT_HDR_CTRL_RX_MASK, QCA8K_PORT_HDR_CTRL_ALL));
+					  FIELD_PREP(QCA8K_PORT_HDR_CTRL_RX_MASK, QCA8K_PORT_HDR_CTRL_MGMT));
 			if (ret) {
 				dev_err(priv->dev, "failed enabling QCA header mode");
 				return ret;
@@ -1732,10 +1888,10 @@ qca8k_setup(struct dsa_switch *ds)
 	 * for igmp, unknown, multicast and broadcast packet
 	 */
 	ret = qca8k_write(priv, QCA8K_REG_GLOBAL_FW_CTRL1,
-			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_IGMP_DP_MASK, BIT(cpu_port)) |
-			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_BC_DP_MASK, BIT(cpu_port)) |
-			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_MC_DP_MASK, BIT(cpu_port)) |
-			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_UC_DP_MASK, BIT(cpu_port)));
+			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_IGMP_DP_MASK, dsa_cpu_ports(ds)|dsa_user_ports(ds)) |
+			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_BC_DP_MASK, dsa_cpu_ports(ds)|dsa_user_ports(ds)) |
+			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_MC_DP_MASK, dsa_cpu_ports(ds)|dsa_user_ports(ds)) |
+			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_UC_DP_MASK, dsa_cpu_ports(ds)|dsa_user_ports(ds)));
 	if (ret)
 		return ret;
 
@@ -1823,6 +1979,16 @@ qca8k_setup(struct dsa_switch *ds)
 				  QCA8K_PORT_HOL_CTRL1_WRED_EN,
 				  mask);
 		}
+
+		/* For port based vlans to work we need to set the
+		 * default egress vlan mode as untouched
+		 */
+		qca8k_rmw(priv, QCA8K_REG_PORT_VLAN_CTRL1(i),
+			QCA8K_PORT_VLAN_EGMODE_MASK, QCA8K_PORT_VLAN_EGMODE(0x3));
+		qca8k_rmw(priv, QCA8K_ROUTE_EGRESS_VLAN,
+			QCA8K_ROUTE_EGRESS_VLAN_MASK(i),
+			QCA8K_ROUTE_EGRESS_VLAN_VAL(i, 0x3));
+
 	}
 
 	/* Special GLOBAL_FC_THRESH value are needed for ar8327 switch */
@@ -1840,6 +2006,12 @@ qca8k_setup(struct dsa_switch *ds)
 	if (ret)
 		dev_warn(priv->dev, "failed setting MTU settings");
 
+	/* using 2 bytes ath header */
+	ret = qca8k_write(priv, QCA8K_HEADER_CTL,
+		QCA8K_HEADER_LENGTH_SEL_VAL(0) | QCA8K_HEADER_TYPE_VAL_VAL(0));
+	if (ret)
+		dev_warn(priv->dev, "failed setting HEADER_CTL settings\n");
+
 	/* Flush the FDB table */
 	qca8k_fdb_flush(priv);
 
@@ -1853,9 +2025,78 @@ qca8k_setup(struct dsa_switch *ds)
 	return 0;
 }
 
+static void
+qca8k_teardown(struct dsa_switch *ds)
+{
+	struct qca8k_priv *priv = ds->priv;
+	int i = 0, shift = 0, port_mask = 0;
+	u16 reg = 0;
+
+	for (i = 0; i < QCA8K_NUM_PORTS; i++) {
+		/* resume stp status */
+		qca8k_rmw(priv, QCA8K_PORT_LOOKUP_CTRL(i),
+	  		QCA8K_PORT_LOOKUP_STATE_MASK, QCA8K_PORT_LOOKUP_STATE_FORWARD);
+
+		/* resume port status */
+		qca8k_port_set_status(priv, i, 1);
+
+		if (dsa_is_cpu_port(ds, i)) {
+			/* resume cpu port flowctrl */
+			qca8k_rmw(priv, QCA8K_REG_PORT_STATUS(i),
+				QCA8K_PORT_STATUS_TXFLOW, 0);
+			qca8k_rmw(priv, QCA8K_REG_PORT_STATUS(i),
+				QCA8K_PORT_STATUS_RXFLOW, 0);
+
+			/* resume cpu portvlan member */
+			qca8k_rmw(priv, QCA8K_PORT_LOOKUP_CTRL(i),
+				  QCA8K_PORT_LOOKUP_MEMBER, dsa_user_ports(ds));
+
+			/* dsiable QCA header mode on the cpu port */
+			qca8k_write(priv, QCA8K_REG_PORT_HDR_CTRL(i),
+				FIELD_PREP(QCA8K_PORT_HDR_CTRL_TX_MASK, QCA8K_PORT_HDR_CTRL_NONE)|
+				FIELD_PREP(QCA8K_PORT_HDR_CTRL_RX_MASK, QCA8K_PORT_HDR_CTRL_NONE));
+
+			/* Recover unknown frames forwarding config */
+			port_mask = BIT(i) | dsa_user_ports(ds);
+			qca8k_write(priv, QCA8K_REG_GLOBAL_FW_CTRL1,
+			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_IGMP_DP_MASK, port_mask) |
+			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_BC_DP_MASK, port_mask) |
+			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_MC_DP_MASK, port_mask) |
+			  FIELD_PREP(QCA8K_GLOBAL_FW_CTRL1_UC_DP_MASK, port_mask));
+		}
+
+		if (dsa_is_user_port(ds, i)) {
+			/* resume slave portvlan member */
+			port_mask = dsa_user_ports(ds);
+			port_mask &= ~BIT(i);
+			port_mask |= dsa_cpu_ports(ds);
+			qca8k_rmw(priv, QCA8K_PORT_LOOKUP_CTRL(i),
+				  QCA8K_PORT_LOOKUP_MEMBER, port_mask);
+
+			/* resume slave portvlan default vid */
+			shift = 16 * (i % 2);
+			qca8k_rmw(priv, QCA8K_EGRESS_VLAN(i),
+				  0xffff << shift, 0 << shift);
+			qca8k_write(priv, QCA8K_REG_PORT_VLAN_CTRL0(i),
+				    QCA8K_PORT_VLAN_CVID(0) |
+				    QCA8K_PORT_VLAN_SVID(0));
+
+			/* resume phy status by external mdio */
+			reg = qca8k_phy_external_mdio_read(priv, i, MII_BMCR);
+			reg &= ~BMCR_PDOWN;
+			qca8k_phy_external_mdio_write(priv, i, MII_BMCR, reg);
+		}
+	}
+
+	/* Flush the FDB table */
+	qca8k_fdb_flush(priv);
+}
+
 static const struct dsa_switch_ops qca8k_switch_ops = {
 	.get_tag_protocol	= qca8k_get_tag_protocol,
+	.change_tag_protocol	= qca8k_change_tag_protocol,
 	.setup			= qca8k_setup,
+	.teardown		= qca8k_teardown,
 	.get_strings		= qca8k_get_strings,
 	.get_ethtool_stats	= qca8k_get_ethtool_stats,
 	.get_sset_count		= qca8k_get_sset_count,
@@ -2049,11 +2290,17 @@ static const struct qca8k_match_data qca833x = {
 	.ops = &qca8xxx_ops,
 };
 
+static const struct qca8k_match_data qca838x = {
+	.id = QCA8K_ID_QCA8386,
+	.mib_count = QCA8K_QCA833X_MIB_COUNT,
+	.ops = &qca8xxx_ops,
+};
 static const struct of_device_id qca8k_of_match[] = {
 	{ .compatible = "qca,qca8327", .data = &qca8327 },
 	{ .compatible = "qca,qca8328", .data = &qca8328 },
 	{ .compatible = "qca,qca8334", .data = &qca833x },
 	{ .compatible = "qca,qca8337", .data = &qca833x },
+	{ .compatible = "qca,qca8386", .data = &qca838x },
 	{ /* sentinel */ },
 };
 
diff --git a/drivers/net/dsa/qca/qca8k-common.c b/drivers/net/dsa/qca/qca8k-common.c
index fb45b598847b..85e5c42cc09f 100644
--- a/drivers/net/dsa/qca/qca8k-common.c
+++ b/drivers/net/dsa/qca/qca8k-common.c
@@ -142,21 +142,35 @@ static int qca8k_bulk_write(struct qca8k_priv *priv, u32 reg, u32 *val, int len)
 
 static int qca8k_busy_wait(struct qca8k_priv *priv, u32 reg, u32 mask)
 {
-	u32 val;
+	unsigned long timeout;
+	u32 val = 0;
+
+	timeout = jiffies + msecs_to_jiffies(20);
+
+	/* loop until the busy flag has cleared */
+	do {
+		qca8k_read(priv, reg, &val);
+		int busy = val & mask;
 
-	return regmap_read_poll_timeout(priv->regmap, reg, val, !(val & mask), 0,
-				       QCA8K_BUSY_WAIT_TIMEOUT * USEC_PER_MSEC);
+		if (!busy)
+			break;
+		cond_resched();
+	} while (!time_after_eq(jiffies, timeout));
+
+	return time_after_eq(jiffies, timeout);
 }
 
 static int qca8k_fdb_read(struct qca8k_priv *priv, struct qca8k_fdb *fdb)
 {
 	u32 reg[3];
-	int ret;
+	int ret = 0, i = 0;
 
 	/* load the ARL table into an array */
-	ret = qca8k_bulk_read(priv, QCA8K_REG_ATU_DATA0, reg, sizeof(reg));
-	if (ret)
-		return ret;
+	for (i = 0; i < 3; i++) {
+		ret = qca8k_read(priv, QCA8K_REG_ATU_DATA0 + (i * 4), &reg[i]);
+		if (ret)
+			return ret;
+	}
 
 	/* vid - 83:72 */
 	fdb->vid = FIELD_GET(QCA8K_ATU_VID_MASK, reg[2]);
@@ -179,6 +193,7 @@ static void qca8k_fdb_write(struct qca8k_priv *priv, u16 vid, u8 port_mask,
 			    const u8 *mac, u8 aging)
 {
 	u32 reg[3] = { 0 };
+	int i = 0;
 
 	/* vid - 83:72 */
 	reg[2] = FIELD_PREP(QCA8K_ATU_VID_MASK, vid);
@@ -195,7 +210,8 @@ static void qca8k_fdb_write(struct qca8k_priv *priv, u16 vid, u8 port_mask,
 	reg[0] |= FIELD_PREP(QCA8K_ATU_ADDR5_MASK, mac[5]);
 
 	/* load the array into the ARL table */
-	qca8k_bulk_write(priv, QCA8K_REG_ATU_DATA0, reg, sizeof(reg));
+	for (i = 0; i < 3; i++)
+		qca8k_write(priv, QCA8K_REG_ATU_DATA0 + (i * 4), reg[i]);
 }
 
 static int qca8k_fdb_access(struct qca8k_priv *priv, enum qca8k_fdb_cmd cmd,
diff --git a/drivers/net/dsa/qca/qca8k.h b/drivers/net/dsa/qca/qca8k.h
index 03514f7a20be..60fbaef0f66a 100644
--- a/drivers/net/dsa/qca/qca8k.h
+++ b/drivers/net/dsa/qca/qca8k.h
@@ -27,6 +27,8 @@
 #define QCA8K_ID_QCA8327				0x12
 #define PHY_ID_QCA8337					0x004dd036
 #define QCA8K_ID_QCA8337				0x13
+#define PHY_ID_QCA8386					0x004dd180
+#define QCA8K_ID_QCA8386				0x17
 
 #define QCA8K_QCA832X_MIB_COUNT				39
 #define QCA8K_QCA833X_MIB_COUNT				41
@@ -35,7 +37,7 @@
 
 #define QCA8K_NUM_FDB_RECORDS				2048
 
-#define QCA8K_PORT_VID_DEF				1
+#define QCA8K_PORT_VID_DEF				0
 
 /* Global control registers */
 #define QCA8K_REG_MASK_CTRL				0x000
@@ -102,6 +104,11 @@
 #define   QCA8K_PORT_STATUS_LINK_AUTO			BIT(9)
 #define   QCA8K_PORT_STATUS_LINK_PAUSE			BIT(10)
 #define   QCA8K_PORT_STATUS_FLOW_AUTO			BIT(12)
+#define QCA8K_HEADER_CTL				0x98
+#define   QCA8K_HEADER_LENGTH_SEL_BIT			BIT(16)
+#define   QCA8K_HEADER_LENGTH_SEL_VAL(x)		FIELD_PREP(QCA8K_HEADER_LENGTH_SEL_BIT, x)
+#define   QCA8K_HEADER_TYPE_VAL_MASK			GENMASK(15, 0)
+#define   QCA8K_HEADER_TYPE_VAL_VAL(x) 			FIELD_PREP(QCA8K_HEADER_TYPE_VAL_MASK, x)
 #define QCA8K_REG_PORT_HDR_CTRL(_i)			(0x9c + (_i * 4))
 #define   QCA8K_PORT_HDR_CTRL_RX_MASK			GENMASK(3, 2)
 #define   QCA8K_PORT_HDR_CTRL_TX_MASK			GENMASK(1, 0)
@@ -144,6 +151,8 @@
 #define   QCA8K_PORT_VLAN_SVID_MASK			GENMASK(11, 0)
 #define   QCA8K_PORT_VLAN_SVID(x)			FIELD_PREP(QCA8K_PORT_VLAN_SVID_MASK, x)
 #define QCA8K_REG_PORT_VLAN_CTRL1(_i)			(0x424 + (_i * 8))
+#define   QCA8K_PORT_VLAN_EGMODE(x)			((x & 0x3) << 12)
+#define   QCA8K_PORT_VLAN_EGMODE_MASK			GENMASK(13, 12)
 #define QCA8K_REG_IPV4_PRI_BASE_ADDR			0x470
 #define QCA8K_REG_IPV4_PRI_ADDR_MASK			0x474
 
@@ -277,6 +286,11 @@
 #define QCA8K_EGREES_VLAN_PORT(_i, x)			((x) << QCA8K_EGREES_VLAN_PORT_SHIFT(_i))
 #define QCA8K_EGRESS_VLAN(x)				(0x0c70 + (4 * (x / 2)))
 
+/* Route Egress VLAN Mode Register */
+#define QCA8K_ROUTE_EGRESS_VLAN				0x0c80
+#define   QCA8K_ROUTE_EGRESS_VLAN_MASK(port)		(0x3 << (port << 2))
+#define   QCA8K_ROUTE_EGRESS_VLAN_VAL(port, val)	(val << (port << 2))
+
 /* L3 registers */
 #define QCA8K_HROUTER_CONTROL				0xe00
 #define   QCA8K_HROUTER_CONTROL_GLB_LOCKTIME_M		GENMASK(17, 16)
diff --git a/include/linux/dsa/tag_qca.h b/include/linux/dsa/tag_qca.h
index ee657452f122..76687293f1d6 100644
--- a/include/linux/dsa/tag_qca.h
+++ b/include/linux/dsa/tag_qca.h
@@ -9,8 +9,18 @@ struct dsa_switch;
 struct sk_buff;
 
 #define QCA_HDR_LEN	2
+#define QCA_4B_HDR_LEN	4
 #define QCA_HDR_VERSION	0x2
 
+/* 4bytes HDR type value, need sync with reg 0x0098 low 16 bits */
+#define QCA_HDR_TYPE_VALUE	0xAAAA
+
+/**
+ * MHT port information placement in mark field.
+ */
+#define HOLB_MHT_VALID_TAG		0xBB
+#define HOLB_MHT_TAG_SHIFT		24
+
 #define QCA_HDR_RECV_VERSION		GENMASK(15, 14)
 #define QCA_HDR_RECV_PRIORITY		GENMASK(13, 11)
 #define QCA_HDR_RECV_TYPE		GENMASK(10, 6)
@@ -82,6 +92,7 @@ struct qca_tagger_data {
 				   struct sk_buff *skb);
 	void (*mib_autocast_handler)(struct dsa_switch *ds,
 				     struct sk_buff *skb);
+	bool tx_hdr_offload;
 };
 
 #endif /* __TAG_QCA_H */
diff --git a/include/net/dsa.h b/include/net/dsa.h
index ee369670e20e..9517df9f8d08 100644
--- a/include/net/dsa.h
+++ b/include/net/dsa.h
@@ -55,6 +55,7 @@ struct phylink_link_state;
 #define DSA_TAG_PROTO_RTL8_4T_VALUE		25
 #define DSA_TAG_PROTO_RZN1_A5PSW_VALUE		26
 #define DSA_TAG_PROTO_LAN937X_VALUE		27
+#define DSA_TAG_PROTO_QCA_4B_VALUE		28
 
 enum dsa_tag_protocol {
 	DSA_TAG_PROTO_NONE		= DSA_TAG_PROTO_NONE_VALUE,
@@ -85,6 +86,7 @@ enum dsa_tag_protocol {
 	DSA_TAG_PROTO_RTL8_4T		= DSA_TAG_PROTO_RTL8_4T_VALUE,
 	DSA_TAG_PROTO_RZN1_A5PSW	= DSA_TAG_PROTO_RZN1_A5PSW_VALUE,
 	DSA_TAG_PROTO_LAN937X		= DSA_TAG_PROTO_LAN937X_VALUE,
+	DSA_TAG_PROTO_4B_QCA		= DSA_TAG_PROTO_QCA_4B_VALUE,
 };
 
 struct dsa_switch;
diff --git a/net/dsa/port.c b/net/dsa/port.c
index 750fe68d9b2a..c091d61d125e 100644
--- a/net/dsa/port.c
+++ b/net/dsa/port.c
@@ -1920,6 +1920,9 @@ static const char * const dsa_switches_apply_workarounds[] = {
 #endif
 #if IS_ENABLED(CONFIG_NET_DSA_SMSC_LAN9303_I2C)
 	"smsc,lan9303-i2c",
+#endif
+#if IS_ENABLED(CONFIG_NET_DSA_QCA8K)
+	"qca,qca8386",
 #endif
 	NULL,
 };
diff --git a/net/dsa/tag_qca.c b/net/dsa/tag_qca.c
index 57d2e00f1e5d..425fccc59868 100644
--- a/net/dsa/tag_qca.c
+++ b/net/dsa/tag_qca.c
@@ -10,28 +10,47 @@
 
 #include "dsa_priv.h"
 
-static struct sk_buff *qca_tag_xmit(struct sk_buff *skb, struct net_device *dev)
+static struct sk_buff *_qca_tag_xmit(struct sk_buff *skb, struct net_device *dev,
+	uint32_t hdr_len)
 {
 	struct dsa_port *dp = dsa_slave_to_port(dev);
+	struct dsa_switch *ds = dp->ds;
+	struct qca_tagger_data *tagger_data;
 	__be16 *phdr;
-	u16 hdr;
 
-	skb_push(skb, QCA_HDR_LEN);
+	tagger_data = ds->tagger_data;
 
-	dsa_alloc_etype_header(skb, QCA_HDR_LEN);
+	/* when holb enable, allow hw add hdr. 
+	 * also need set skb mark for holb.
+	 */
+	if (tagger_data->tx_hdr_offload == true) {
+		skb->mark = ((HOLB_MHT_VALID_TAG << HOLB_MHT_TAG_SHIFT) | dp->index);
+		return skb;
+	}
+
+	skb_push(skb, hdr_len);
+
+	dsa_alloc_etype_header(skb, hdr_len);
 	phdr = dsa_etype_header_pos_tx(skb);
 
+	/* if 4 bytes len, need add hdr type value */
+	if (hdr_len == QCA_4B_HDR_LEN) {
+		*phdr = QCA_HDR_TYPE_VALUE;
+		phdr = phdr + 1;
+	}
+
 	/* Set the version field, and set destination port information */
-	hdr = FIELD_PREP(QCA_HDR_XMIT_VERSION, QCA_HDR_VERSION);
-	hdr |= QCA_HDR_XMIT_FROM_CPU;
-	hdr |= FIELD_PREP(QCA_HDR_XMIT_DP_BIT, BIT(dp->index));
+	*phdr = FIELD_PREP(QCA_HDR_XMIT_VERSION, QCA_HDR_VERSION);
+	*phdr |= QCA_HDR_XMIT_FROM_CPU;
+	*phdr |= FIELD_PREP(QCA_HDR_XMIT_DP_BIT, BIT(dp->index));
 
-	*phdr = htons(hdr);
+	*phdr = htons(*phdr);
 
 	return skb;
 }
 
-static struct sk_buff *qca_tag_rcv(struct sk_buff *skb, struct net_device *dev)
+static struct sk_buff *_qca_tag_rcv(struct sk_buff *skb, struct net_device *dev,
+	uint32_t hdr_len)
 {
 	struct qca_tagger_data *tagger_data;
 	struct dsa_port *dp = dev->dsa_ptr;
@@ -41,14 +60,17 @@ static struct sk_buff *qca_tag_rcv(struct sk_buff *skb, struct net_device *dev)
 	int port;
 	u16 hdr;
 
-	BUILD_BUG_ON(sizeof(struct qca_mgmt_ethhdr) != QCA_HDR_MGMT_HEADER_LEN + QCA_HDR_LEN);
+	//BUILD_BUG_ON(sizeof(struct qca_mgmt_ethhdr) != QCA_HDR_MGMT_HEADER_LEN + hdr_len);
 
 	tagger_data = ds->tagger_data;
 
-	if (unlikely(!pskb_may_pull(skb, QCA_HDR_LEN)))
+	if (unlikely(!pskb_may_pull(skb, hdr_len)))
 		return NULL;
 
 	phdr = dsa_etype_header_pos_rx(skb);
+	if (hdr_len == QCA_4B_HDR_LEN)
+		phdr = phdr + 1;
+
 	hdr = ntohs(*phdr);
 
 	/* Make sure the version is correct */
@@ -74,8 +96,8 @@ static struct sk_buff *qca_tag_rcv(struct sk_buff *skb, struct net_device *dev)
 	}
 
 	/* Remove QCA tag and recalculate checksum */
-	skb_pull_rcsum(skb, QCA_HDR_LEN);
-	dsa_strip_etype_header(skb, QCA_HDR_LEN);
+	skb_pull_rcsum(skb, hdr_len);
+	dsa_strip_etype_header(skb, hdr_len);
 
 	/* Get source port information */
 	port = FIELD_GET(QCA_HDR_RECV_SOURCE_PORT, hdr);
@@ -87,6 +109,26 @@ static struct sk_buff *qca_tag_rcv(struct sk_buff *skb, struct net_device *dev)
 	return skb;
 }
 
+static struct sk_buff *qca_tag_xmit(struct sk_buff *skb, struct net_device *dev)
+{
+	return _qca_tag_xmit(skb, dev, QCA_HDR_LEN);
+}
+
+static struct sk_buff *qca_tag_rcv(struct sk_buff *skb, struct net_device *dev)
+{
+	return _qca_tag_rcv(skb, dev, QCA_HDR_LEN);
+}
+
+static struct sk_buff *qca_4b_tag_xmit(struct sk_buff *skb, struct net_device *dev)
+{
+	return _qca_tag_xmit(skb, dev, QCA_4B_HDR_LEN);
+}
+
+static struct sk_buff *qca_4b_tag_rcv(struct sk_buff *skb, struct net_device *dev)
+{
+	return _qca_tag_rcv(skb, dev, QCA_4B_HDR_LEN);
+}
+
 static int qca_tag_connect(struct dsa_switch *ds)
 {
 	struct qca_tagger_data *tagger_data;
@@ -116,8 +158,26 @@ static const struct dsa_device_ops qca_netdev_ops = {
 	.needed_headroom = QCA_HDR_LEN,
 	.promisc_on_master = true,
 };
-
-MODULE_LICENSE("GPL");
 MODULE_ALIAS_DSA_TAG_DRIVER(DSA_TAG_PROTO_QCA);
+DSA_TAG_DRIVER(qca_netdev_ops);
 
-module_dsa_tag_driver(qca_netdev_ops);
+static const struct dsa_device_ops qca_4b_netdev_ops = {
+	.name	= "qca_4b",
+	.proto	= DSA_TAG_PROTO_4B_QCA,
+	.connect = qca_tag_connect,
+	.disconnect = qca_tag_disconnect,
+	.xmit	= qca_4b_tag_xmit,
+	.rcv	= qca_4b_tag_rcv,
+	.needed_headroom = QCA_4B_HDR_LEN,
+	.promisc_on_master = true,
+};
+MODULE_ALIAS_DSA_TAG_DRIVER(DSA_TAG_PROTO_4B_QCA);
+DSA_TAG_DRIVER(qca_4b_netdev_ops);
+
+static struct dsa_tag_driver *qca_tag_drivers[] = {
+	&DSA_TAG_DRIVER_NAME(qca_netdev_ops),
+	&DSA_TAG_DRIVER_NAME(qca_4b_netdev_ops),
+};
+module_dsa_tag_drivers(qca_tag_drivers);
+
+MODULE_LICENSE("GPL");
-- 
2.34.1

