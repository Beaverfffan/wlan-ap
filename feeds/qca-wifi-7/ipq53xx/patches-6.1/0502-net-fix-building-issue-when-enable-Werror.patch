From 67afc0318656707f594c08e0568d5b162f04f7e9 Mon Sep 17 00:00:00 2001
From: zhongjia <quic_zhongjia@quicinc.com>
Date: Wed, 18 Oct 2023 20:09:55 +0800
Subject: [PATCH] net: fix building issue when enable Werror

Change-Id: Iad6aeab34c81989874228ed0abf111c7b48788f8
Signed-off-by: zhongjia <quic_zhongjia@quicinc.com>
---
 include/linux/if_bridge.h | 2 +-
 include/linux/netdevice.h | 2 +-
 net/Makefile              | 1 -
 net/bridge/br_if.c        | 2 ++
 net/bridge/br_vlan.c      | 2 +-
 net/core/dev.c            | 2 +-
 6 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/include/linux/if_bridge.h b/include/linux/if_bridge.h
index f353a549b75b..562cbeebb4a4 100644
--- a/include/linux/if_bridge.h
+++ b/include/linux/if_bridge.h
@@ -142,7 +142,7 @@ int br_mst_get_state(const struct net_device *dev, u16 msti, u8 *state);
 
 extern struct net_device *br_fdb_find_vid_by_mac(struct net_device *dev, u8 *mac, u16 *vid);
 extern int br_vlan_get_tag_skb(const struct sk_buff *skb, u16 *vid);
-extern int br_dev_is_vlan_filter_enabled(const struct net_device *dev);
+extern int br_dev_is_vlan_filter_enabled(struct net_device *dev);
 extern int br_vlan_update_stats(struct net_device* dev, u32 vid, u64 rx_bytes, u64 rx_packets, u64 tx_bytes, u64 tx_packets);
 extern int br_vlan_get_info_rcu(const struct net_device *dev, u16 vid, struct bridge_vlan_info *p_vinfo);
 #else
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 7912a2a984a3..81d56ffb70dc 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -4807,7 +4807,7 @@ int netdev_walk_all_lower_dev_rcu(struct net_device *dev,
 void *netdev_adjacent_get_private(struct list_head *adj_list);
 void *netdev_lower_get_first_private_rcu(struct net_device *dev);
 struct net_device *netdev_master_upper_dev_get(struct net_device *dev);
-struct net_device *netdev_master_upper_dev_get_rcu(const struct net_device *dev);
+struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *dev);
 int netdev_upper_dev_link(struct net_device *dev, struct net_device *upper_dev,
 			  struct netlink_ext_ack *extack);
 int netdev_master_upper_dev_link(struct net_device *dev,
diff --git a/net/Makefile b/net/Makefile
index 1ae605f20203..57ddb1744ea3 100644
--- a/net/Makefile
+++ b/net/Makefile
@@ -6,7 +6,6 @@
 # Rewritten to use lists instead of if-statements.
 #
 
-KBUILD_CFLAGS := $(filter-out -Werror, $(KBUILD_CFLAGS))
 obj-y				:= devres.o socket.o core/
 
 obj-$(CONFIG_COMPAT)		+= compat.o
diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index bef6d8cc81bf..5a2c8fd7bef4 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -796,8 +796,10 @@ struct net_device *br_port_dev_get(struct net_device *dev, unsigned char *addr,
 				   struct sk_buff *skb,
 				   unsigned int cookie)
 {
+#if !IS_ENABLED(CONFIG_BRIDGE_VLAN_FILTERING)
 	struct net_bridge_fdb_entry *fdbe;
 	struct net_bridge *br;
+#endif
 	struct net_device *netdev = NULL;
 	u16 __maybe_unused vid;
 
diff --git a/net/bridge/br_vlan.c b/net/bridge/br_vlan.c
index 4a958b2a8ab1..14c7c6687943 100644
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@ -950,7 +950,7 @@ EXPORT_SYMBOL_GPL(br_vlan_get_tag_skb);
  * 	Returns 0, when device(port or bridge device) has a valid bridge
  * 	vlan filter configuration and returns error otherwise.
  */
-int br_dev_is_vlan_filter_enabled(const struct net_device *dev)
+int br_dev_is_vlan_filter_enabled(struct net_device *dev)
 {
 	struct net_bridge_port *p;
 	struct net_bridge_vlan_group *vg = NULL;
diff --git a/net/core/dev.c b/net/core/dev.c
index 5b87204a1ea8..8a273ecb96e6 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -8006,7 +8006,7 @@ EXPORT_SYMBOL(netdev_lower_get_first_private_rcu);
  * Find a master upper device and return pointer to it or NULL in case
  * it's not there. The caller must hold the RCU read lock.
  */
-struct net_device *netdev_master_upper_dev_get_rcu(const struct net_device *dev)
+struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *dev)
 {
 	struct netdev_adjacent *upper;
 
-- 
2.34.1

