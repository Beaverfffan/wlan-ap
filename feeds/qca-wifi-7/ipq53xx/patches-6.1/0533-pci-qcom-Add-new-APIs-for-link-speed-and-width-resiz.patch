From dd8ef83c92b70c8bcacde611055992e3d3b7a16a Mon Sep 17 00:00:00 2001
From: Hariharan K <quic_harihk@quicinc.com>
Date: Mon, 6 Nov 2023 10:47:15 +0530
Subject: [PATCH] pci: qcom: Add new APIs for link speed and width resize

New APIs will support link speed and width resize in runtime.
These API's are supported in IPQ9574 and IPQ5332 targets.

This is a snapshot of the commit
884c04c9f6e6d045ef40e3ead2dff9d79ecd0f4b
from win.linuxopenwrt.2.1 branch and
oss/kernel/linux-ipq-5.4 project.

Change-Id: Ifb77dd3890f32f2ba41f42bca558a98f1fbc1b57
Signed-off-by: Hariharan K <quic_harihk@quicinc.com>
---
 drivers/pci/controller/dwc/pcie-qcom.c | 103 +++++++++++++++++++++++++
 include/linux/pci.h                    |  14 ++++
 2 files changed, 117 insertions(+)

diff --git a/drivers/pci/controller/dwc/pcie-qcom.c b/drivers/pci/controller/dwc/pcie-qcom.c
index 9c9b5aedbd3a..7c5f0fd69827 100644
--- a/drivers/pci/controller/dwc/pcie-qcom.c
+++ b/drivers/pci/controller/dwc/pcie-qcom.c
@@ -129,6 +129,16 @@
 
 #define QCOM_PCIE_CRC8_POLYNOMIAL (BIT(2) | BIT(1) | BIT(0))
 
+#define PCIE_CAP_LINK_SPEED_MASK		GENMASK(19, 16)
+#define PCIE_CAP_NEGO_LINK_WIDTH_MASK		GENMASK(25, 20)
+#define PCIE_CAP_RETRAIN_LINK_MASK		GENMASK(5, 5)
+#define PCIE_CAP_LINK_SPEED_SHIFT(x)		((x) >> 16)
+#define PCIE_CAP_NEGO_LINK_WIDTH_SHIFT(x)	((x) >> 20)
+#define PCIE_CAP_RETRAIN_LINK_OFFSET(x)		((x) << 5)
+#define PCIE_CAP_TARGET_LINK_SPD_MASK		GENMASK(3, 0)
+#define QCOM_IPQ9574_DEVICE_ID			0x1108
+#define QCOM_IPQ5332_DEVICE_ID			0x1005
+
 struct qcom_pcie_resources_2_1_0 {
 	struct clk_bulk_data clks[QCOM_PCIE_2_1_0_MAX_CLOCKS];
 	struct reset_control *pci_reset;
@@ -1661,6 +1671,99 @@ static int qcom_pcie_host_init(struct dw_pcie_rp *pp)
 	return ret;
 }
 
+int pcie_set_link_speed(struct pci_dev *dev, u16 target_link_speed)
+{
+	struct dw_pcie_rp *pp;
+	struct dw_pcie *pci;
+	u32 val;
+
+	if (dev->device != QCOM_IPQ9574_DEVICE_ID && dev->device != QCOM_IPQ5332_DEVICE_ID)
+		return -EINVAL;
+
+	if (target_link_speed < 1 || target_link_speed > 3)
+		return -EINVAL;
+
+	pp = dev->bus->sysdata;
+	pci = to_dw_pcie_from_pp(pp);
+
+	val = readl(pci->dbi_base + PCIE20_LNK_CONTROL2_LINK_STATUS2);
+	val &= ~PCIE_CAP_TARGET_LINK_SPD_MASK;
+	val |= target_link_speed;
+	writel(val, pci->dbi_base + PCIE20_LNK_CONTROL2_LINK_STATUS2);
+
+	val = readl(pci->dbi_base + PCIE20_LINK_CONTROL_LINK_STATUS_REG);
+	val &= ~PCIE_CAP_RETRAIN_LINK_MASK;
+	val |= PCIE_CAP_RETRAIN_LINK_OFFSET(0x1);
+	writel(val, pci->dbi_base + PCIE20_LINK_CONTROL_LINK_STATUS_REG);
+
+	msleep(1);
+
+	val = readl(pci->dbi_base + PCIE20_LINK_CONTROL_LINK_STATUS_REG);
+	val &= PCIE_CAP_LINK_SPEED_MASK;
+	if (PCIE_CAP_LINK_SPEED_SHIFT(val) != target_link_speed) {
+		dev_err(pci->dev, "Speed change failed. Current speed 0x%x\n",
+			PCIE_CAP_LINK_SPEED_SHIFT(val));
+		return -EAGAIN;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(pcie_set_link_speed);
+
+int pcie_set_link_width(struct pci_dev *dev, u16 target_link_width)
+{
+	struct dw_pcie_rp *pp;
+	struct dw_pcie *pci;
+	struct qcom_pcie *pcie;
+	u32 val;
+
+	if (dev->device != QCOM_IPQ9574_DEVICE_ID && dev->device != QCOM_IPQ5332_DEVICE_ID)
+		return -EINVAL;
+
+	if (target_link_width < 1 || target_link_width > 2)
+		return -EINVAL;
+
+	pp = dev->bus->sysdata;
+	pci = to_dw_pcie_from_pp(pp);
+	pcie = to_qcom_pcie(pci);
+
+	dw_pcie_read(pci->dbi_base + PCIE20_PORT_LINK_CTRL_OFF, 4, &val);
+	val &= ~PCIE20_PORT_LINK_CTRL_OFF_MASK;
+	val |= LINK_CAPABLE_OFFSET(target_link_width);
+	dw_pcie_write(pci->dbi_base + PCIE20_PORT_LINK_CTRL_OFF, 4, val);
+
+	dw_pcie_read(pci->dbi_base + PCIE20_LANE_SKEW_OFF, 4, &val);
+	val = (val & PCIE20_LANE_SKEW_OFF_MASK) | 0x20;
+	dw_pcie_write(pci->dbi_base + PCIE20_LANE_SKEW_OFF, 4, val);
+
+	val = 0xc0 | target_link_width;
+	dw_pcie_write(pci->dbi_base + PCIE20_MULTI_LANE_CONTROL_OFF, 4, val);
+
+	msleep(50);
+
+	dw_pcie_read(pci->dbi_base + PCIE20_MULTI_LANE_CONTROL_OFF, 4, &val);
+	if((val & 0x40) != 0) {
+		dev_err(pci->dev, "LANE_CONTROL_OFF failed: val 0x%x\n", val);
+		return -EAGAIN;
+	}
+
+	dw_pcie_read(pcie->parf + PCIE20_PARF_LTSSM, 4, &val);
+	if ((val & PCIE20_PARF_LTSSM_MASK) != 0x11) {
+		dev_err(pci->dev, "After lane switch, link is not in L0: val 0x%x\n", val);
+		return -EAGAIN;
+	}
+
+	val = readl(pci->dbi_base + PCIE20_LINK_CONTROL_LINK_STATUS_REG);
+	val &= PCIE_CAP_NEGO_LINK_WIDTH_MASK;
+	if (PCIE_CAP_NEGO_LINK_WIDTH_SHIFT(val) != target_link_width) {
+		dev_err(pci->dev, "Lane switch failed: 0x%x\n", val);
+		return -EAGAIN;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(pcie_set_link_width);
+
 static void qcom_pcie_host_deinit(struct dw_pcie_rp *pp)
 {
 	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
diff --git a/include/linux/pci.h b/include/linux/pci.h
index d20695184e0b..2a2bfc4ed14e 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1147,6 +1147,20 @@ void pci_sort_breadthfirst(void);
 #define dev_is_pci(d) ((d)->bus == &pci_bus_type)
 #define dev_is_pf(d) ((dev_is_pci(d) ? to_pci_dev(d)->is_physfn : false))
 
+#ifdef CONFIG_PCIE_QCOM
+int pcie_set_link_speed(struct pci_dev *dev, u16 target_link_speed);
+int pcie_set_link_width(struct pci_dev *dev, u16 target_link_width);
+#else
+static inline int pcie_set_link_speed(struct pci_dev *dev, u16 target_link_speed)
+{
+	return -ENODEV;
+}
+static inline int pcie_set_link_width(struct pci_dev *dev, u16 target_link_width)
+{
+	return -ENODEV;
+}
+#endif
+
 /* Generic PCI functions exported to card drivers */
 
 u8 pci_bus_find_capability(struct pci_bus *bus, unsigned int devfn, int cap);
-- 
2.34.1

