From f5348b7077a1e3bd385a8f69032f1826df7a2d5d Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Wed, 23 Nov 2022 14:26:46 +0530
Subject: [PATCH 1/2] ath12k: use link conf for all bss config operations

replace use of default bss_conf in vif with link conf

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 229 +++++++++++++++++++++-----
 1 file changed, 191 insertions(+), 38 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -719,6 +719,22 @@ static u8 ath12k_mac_bitrate_to_rate(int
 	       (ath12k_mac_bitrate_is_cck(bitrate) ? BIT(7) : 0);
 }
 
+static struct
+ieee80211_bss_conf *ath12k_get_link_bss_conf(struct ath12k_link_vif *arvif)
+{
+	struct ieee80211_vif *vif = arvif->ahvif->vif;
+	struct ieee80211_bss_conf *link_conf = NULL;
+
+	WARN_ON(!rcu_read_lock_held());
+
+	if (arvif->link_id > IEEE80211_MLD_MAX_NUM_LINKS)
+		return NULL;
+
+	link_conf = rcu_dereference(vif->link_conf[arvif->link_id]);
+
+	return link_conf;
+}
+
 static void ath12k_get_arvif_iter(void *data, u8 *mac,
 				  struct ieee80211_vif *vif)
 {
@@ -1690,11 +1706,19 @@ void ath12k_mac_bcn_tx_event(struct ath1
 {
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct ath12k *ar = arvif->ar;
+	struct ieee80211_bss_conf* link_conf;
+
+	link_conf = ath12k_get_link_bss_conf(arvif);
+
+	if (!link_conf) {
+		ath12k_warn(ar->ab, "unable to access bss link conf in bcn tx event\n");
+		return;
+	}
 
-	if (!vif->bss_conf.color_change_active && !arvif->bcca_zero_sent)
+	if (!link_conf->color_change_active && !arvif->bcca_zero_sent)
 		return;
 
-	if (vif->bss_conf.color_change_active && ieee80211_beacon_cntdwn_is_complete(vif)) {
+	if (link_conf->color_change_active && ieee80211_beacon_cntdwn_is_complete(vif)) {
 		arvif->bcca_zero_sent = true;
 		ieee80211_color_change_finish(vif);
 		return;
@@ -1702,7 +1726,7 @@ void ath12k_mac_bcn_tx_event(struct ath1
 
 	arvif->bcca_zero_sent = false;
 
-	if (vif->bss_conf.color_change_active)
+	if (link_conf->color_change_active)
 		ieee80211_beacon_update_cntdwn(vif);
 	ieee80211_queue_work(ar->ah->hw, &arvif->update_bcn_template_work);
 }
@@ -1809,8 +1833,8 @@ static void ath12k_peer_assoc_h_crypto(s
 				       struct ath12k_wmi_peer_assoc_arg *arg)
 {
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
-	struct ieee80211_bss_conf *info = &vif->bss_conf;
 	struct ath12k_vif *ahvif = arvif->ahvif;
+	struct ieee80211_bss_conf *info;
 	struct cfg80211_chan_def def;
 	struct cfg80211_bss *bss;
 	const u8 *rsnie = NULL;
@@ -1824,8 +1848,19 @@ static void ath12k_peer_assoc_h_crypto(s
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	rcu_read_lock();
+	info = ath12k_get_link_bss_conf(arvif);
+
+	if (!info) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf for peer assoc send\n");
+		return;
+	}
+
+	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id))) {
+		rcu_read_unlock();
 		return;
+	}
 
 	hw = ar->ah->hw;
 	bss = cfg80211_get_bss(hw->wiphy, def.chan, info->bssid, NULL, 0,
@@ -1870,6 +1905,7 @@ static void ath12k_peer_assoc_h_crypto(s
 	}
 
 	/* TODO: safe_mode_enabled (bypass 4-way handshake) flag req? */
+	rcu_read_unlock();
 }
 
 static void ath12k_peer_assoc_h_rates(struct ath12k *ar,
@@ -2304,6 +2340,22 @@ static void ath12k_peer_assoc_h_he(struc
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_bss_conf* link_conf;
+	u32 peer_he_ops;
+
+	rcu_read_lock();
+
+	link_conf = ath12k_get_link_bss_conf(arvif);
+
+	if (!link_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in peer assoc\n");
+		return;
+	}
+
+	peer_he_ops = link_conf->he_oper.params;
+
+	rcu_read_unlock();
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 	he_cap = &sta->deflink.he_cap;
@@ -2360,7 +2412,9 @@ static void ath12k_peer_assoc_h_he(struc
 	       sizeof(arg->peer_he_cap_macinfo));
 	memcpy(&arg->peer_he_cap_phyinfo, he_cap->he_cap_elem.phy_cap_info,
 	       sizeof(arg->peer_he_cap_phyinfo));
-	arg->peer_he_ops = vif->bss_conf.he_oper.params;
+
+	arg->peer_he_ops = peer_he_ops;
+
 
 	/* the top most byte is used to indicate BSS color info */
 	arg->peer_he_ops &= 0xffffff;
@@ -2733,6 +2787,19 @@ static void ath12k_peer_assoc_h_eht(stru
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_bss_conf* link_conf;
+
+	rcu_read_lock();
+
+	link_conf = ath12k_get_link_bss_conf(arvif);
+
+	if (!link_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in peer assoc\n");
+		return;
+	}
+
+	rcu_read_unlock();
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
@@ -3318,13 +3385,26 @@ static bool ath12k_mac_set_he_txbf_conf(
 	u32 param = WMI_VDEV_PARAM_SET_HEMU_MODE;
 	u32 value = 0;
 	int ret;
+	struct ieee80211_bss_conf* link_conf;
+
+	rcu_read_lock();
+
+	link_conf = ath12k_get_link_bss_conf(arvif);
 
-	if (!ahvif->vif->bss_conf.he_support)
+	if (!link_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in txbf conf\n");
+		return false;
+	}
+
+	if (!link_conf->he_support) {
+		rcu_read_unlock();
 		return true;
+	}
 
-	if (ahvif->vif->bss_conf.he_su_beamformer) {
+	if (link_conf->he_su_beamformer) {
 		value |= FIELD_PREP(HE_MODE_SU_TX_BFER, HE_SU_BFER_ENABLE);
-		if (ahvif->vif->bss_conf.he_mu_beamformer &&
+		if (link_conf->he_mu_beamformer &&
 		    ahvif->vdev_type == WMI_VDEV_TYPE_AP)
 			value |= FIELD_PREP(HE_MODE_MU_TX_BFER, HE_MU_BFER_ENABLE);
 	}
@@ -3333,13 +3413,14 @@ static bool ath12k_mac_set_he_txbf_conf(
 		value |= FIELD_PREP(HE_MODE_DL_OFDMA, HE_DL_MUOFDMA_ENABLE) |
 			 FIELD_PREP(HE_MODE_UL_OFDMA, HE_UL_MUOFDMA_ENABLE);
 
-		if (ahvif->vif->bss_conf.he_full_ul_mumimo)
+		if (link_conf->he_full_ul_mumimo)
 			value |= FIELD_PREP(HE_MODE_UL_MUMIMO, HE_UL_MUMIMO_ENABLE);
 
-		if (ahvif->vif->bss_conf.he_su_beamformee)
+		if (link_conf->he_su_beamformee)
 			value |= FIELD_PREP(HE_MODE_SU_TX_BFEE, HE_SU_BFEE_ENABLE);
 	}
 
+	rcu_read_unlock();
 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id, param, value);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to set vdev %d HE MU mode: %d\n",
@@ -3374,9 +3455,24 @@ static bool ath12k_mac_vif_recalc_sta_he
 	u32 hemode = 0;
 	int ret;
 	u8 link_id = arvif->link_id;
+	struct ieee80211_bss_conf* link_conf;
+
+	rcu_read_lock();
+
+	link_conf = ath12k_get_link_bss_conf(arvif);
 
-	if (!vif->bss_conf.he_support)
+	if (!link_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in recalc txbf conf\n");
+		return false;
+	}
+
+	if (!link_conf->he_support) {
+		rcu_read_unlock();
 		return true;
+	}
+
+	rcu_read_unlock();
 
 	if (vif->type != NL80211_IFTYPE_STATION)
 		return false;
@@ -3436,13 +3532,26 @@ static bool ath12k_mac_set_eht_txbf_conf
 	u32 param = WMI_VDEV_PARAM_SET_EHT_MU_MODE;
 	u32 value = 0;
 	int ret;
+	struct ieee80211_bss_conf* link_conf;
+
+	rcu_read_lock();
 
-	if (!ahvif->vif->bss_conf.eht_support)
+	link_conf = ath12k_get_link_bss_conf(arvif);
+
+	if (!link_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in eht txbf conf\n");
+		return false;
+	}
+
+	if (!link_conf->eht_support) {
+		rcu_read_unlock();
 		return true;
+	}
 
-	if (ahvif->vif->bss_conf.eht_su_beamformer) {
+	if (link_conf->eht_su_beamformer) {
 		value |= FIELD_PREP(EHT_MODE_SU_TX_BFER, EHT_SU_BFER_ENABLE);
-		if (ahvif->vif->bss_conf.eht_mu_beamformer &&
+		if (link_conf->eht_mu_beamformer &&
 		    ahvif->vdev_type == WMI_VDEV_TYPE_AP)
 			value |= FIELD_PREP(EHT_MODE_MU_TX_BFER, EHT_MU_BFER_ENABLE) |
 				 FIELD_PREP(EHT_MODE_DL_OFDMA_MUMIMO, EHT_DL_MUOFDMA_ENABLE) |
@@ -3453,13 +3562,15 @@ static bool ath12k_mac_set_eht_txbf_conf
 		value |= FIELD_PREP(EHT_MODE_DL_OFDMA, EHT_DL_MUOFDMA_ENABLE) |
 			 FIELD_PREP(EHT_MODE_UL_OFDMA, EHT_UL_MUOFDMA_ENABLE);
 
-		if (ahvif->vif->bss_conf.eht_80mhz_full_bw_ul_mumimo)
+		if (link_conf->eht_80mhz_full_bw_ul_mumimo)
 			value |= FIELD_PREP(EHT_MODE_MUMIMO, EHT_UL_MUMIMO_ENABLE);
 
-		if (ahvif->vif->bss_conf.eht_su_beamformee)
+		if (link_conf->eht_su_beamformee)
 			value |= FIELD_PREP(EHT_MODE_SU_TX_BFEE, EHT_SU_BFEE_ENABLE);
 	}
 
+	rcu_read_unlock();
+
 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id, param, value);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to set vdev %d EHT MU mode: %d\n",
@@ -3971,10 +4082,10 @@ static void ath12k_mac_bss_info_changed(
 		else
 			arvif->do_not_send_tmpl = false;
 
-		if (arvif->is_up && vif->bss_conf.he_support) {
+		if (arvif->is_up && info->he_support) {
 			param_id = WMI_VDEV_PARAM_BA_MODE;
 
-			if (vif->bss_conf.eht_support)
+			if (info->eht_support)
 				param_value = WMI_BA_MODE_BUFFER_SIZE_1024;
 			else
 				param_value = WMI_BA_MODE_BUFFER_SIZE_256;
@@ -4026,10 +4137,10 @@ static void ath12k_mac_bss_info_changed(
 		}
 		ath12k_control_beaconing(arvif, info);
 
-		if (arvif->is_up && vif->bss_conf.he_support) {
-			if (vif->bss_conf.he_oper.params) {
+		if (arvif->is_up && info->he_support) {
+			if (info->he_oper.params) {
 				param_id = WMI_VDEV_PARAM_HEOPS_0_31;
-				param_value = vif->bss_conf.he_oper.params;
+				param_value = info->he_oper.params;
 				ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
 								    param_id,
 								    param_value);
@@ -4134,12 +4245,12 @@ static void ath12k_mac_bss_info_changed(
 	if (changed & BSS_CHANGED_MCAST_RATE &&
 	    !ath12k_mac_vif_chan(ahvif->vif, &def, link_id)) {
 		band = def.chan->band;
-		mcast_rate = vif->bss_conf.mcast_rate[band];
+		mcast_rate = info->mcast_rate[band];
 
 		if (mcast_rate > 0)
 			rateidx = mcast_rate - 1;
 		else
-			rateidx = ffs(vif->bss_conf.basic_rates) - 1;
+			rateidx = ffs(info->basic_rates) - 1;
 
 		if (ar->pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP)
 			rateidx += ATH12K_MAC_FIRST_OFDM_RATE_IDX;
@@ -4197,7 +4308,7 @@ static void ath12k_mac_bss_info_changed(
 							    arvif->vdev_id,
 							    info->he_bss_color.color,
 							    ATH12K_BSS_COLOR_AP_PERIODS,
-							    ahvif->vif->bss_conf.nontransmitted ?
+							    info->nontransmitted ?
 							    0 : color_collision_detect);
 			if (ret)
 				ath12k_warn(ar->ab, "failed to set bss color collision on vdev %i: %d\n",
@@ -8445,33 +8556,48 @@ static int ath12k_mac_setup_vdev_args_mb
 	struct ath12k *ar = arvif->ar;
 	struct ath12k_link_vif *tx_arvif;
 	struct ieee80211_vif *tx_vif;
-	struct ath12k_vif *ahvif = arvif->ahvif;
+	struct ieee80211_bss_conf *link_conf;
+
+	rcu_read_lock();
+
+	link_conf = ath12k_get_link_bss_conf(arvif);
+
+	if (!link_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in mbssid params setup\n");
+		return -EINVAL;
+	}
 
 	*tx_vdev_id = 0;
 	/* FIXME MBSSID with MLO */
 	tx_vif = arvif->ahvif->vif->mbssid_tx_vif;
 	if (!tx_vif) {
 		*flags = WMI_HOST_VDEV_FLAGS_NON_MBSSID_AP;
+		rcu_read_unlock();
 		return 0;
 	}
 
 	tx_arvif = &ath12k_vif_to_ahvif(tx_vif)->deflink;
 
-	if (ahvif->vif->bss_conf.nontransmitted) {
-		if (ar->ah->hw->wiphy != ieee80211_vif_to_wdev(tx_vif)->wiphy)
+	if (link_conf->nontransmitted) {
+		if (ar->ah->hw->wiphy != ieee80211_vif_to_wdev(tx_vif)->wiphy) {
+			rcu_read_unlock();
 			return -EINVAL;
+		}
 
 		*flags = WMI_HOST_VDEV_FLAGS_NON_TRANSMIT_AP;
 		*tx_vdev_id = tx_arvif->vdev_id;
 	} else if (tx_arvif == arvif) {
 		*flags = WMI_HOST_VDEV_FLAGS_TRANSMIT_AP;
 	} else {
+		rcu_read_unlock();
 		return -EINVAL;
 	}
 
-	if (ahvif->vif->bss_conf.ema_ap)
+	if (link_conf->ema_ap)
 		*flags |= WMI_HOST_VDEV_FLAGS_EMA_MODE;
 
+	rcu_read_unlock();
 	return 0;
 }
 
@@ -9409,6 +9535,7 @@ static int ath12k_mac_set_6g_nonht_dup_c
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ieee80211_bss_conf *link_conf;
 	u8 link_addr[ETH_ALEN];
+	bool nontransmitted;
 
 	rcu_read_lock();
 
@@ -9420,10 +9547,11 @@ static int ath12k_mac_set_6g_nonht_dup_c
 	}
 
 	memcpy(link_addr, link_conf->addr, ETH_ALEN);
+	nontransmitted = link_conf->nontransmitted;
 	rcu_read_unlock();
 
 	if ((ahvif->vdev_type == WMI_VDEV_TYPE_AP) &&
-	    !ahvif->vif->bss_conf.nontransmitted &&
+	    !nontransmitted &&
 	    (chandef->chan->band == NL80211_BAND_6GHZ)) {
 		param_id = WMI_VDEV_PARAM_6GHZ_PARAMS;
 		if (mode > MODE_11AX_HE20 && !is_psc) {
@@ -10445,7 +10573,7 @@ void ath12k_mac_fill_reg_tpc_info(struct
         struct ath12k_base *ab = ar->ab;
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ieee80211_vif *vif = ahvif->vif;
-        struct ieee80211_bss_conf *bss_conf = &vif->bss_conf;
+        struct ieee80211_bss_conf *bss_conf;
         struct ath12k_reg_tpc_power_info *reg_tpc_info = &arvif->reg_tpc_info;
         struct ieee80211_channel *chan, *temp_chan;
         u8 pwr_lvl_idx, num_pwr_levels, pwr_reduction;
@@ -10455,12 +10583,22 @@ void ath12k_mac_fill_reg_tpc_info(struct
         u16 oper_freq = 0, start_freq = 0, center_freq = 0;
 	u8 reg_6g_power_mode;
 
+	rcu_read_lock();
+
+	bss_conf = ath12k_get_link_bss_conf(arvif);
+
+	if (!bss_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in tpc reg fill\n");
+		return;
+	}
+
        /* For STA, 6g power mode will be present in the beacon, but for AP,
         * AP cant parse its own beacon. Hence, we get the 6g power mode
         * from the wdev corresponding to the struct ieee80211_vif
         */
        if (ahvif->vdev_type == WMI_VDEV_TYPE_STA)
-               reg_6g_power_mode = vif->bss_conf.power_type;
+               reg_6g_power_mode = bss_conf->power_type;
        else if (ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
                struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
                /* With respect to ieee80211, the 6G AP power mode starts from index
@@ -10479,6 +10617,8 @@ void ath12k_mac_fill_reg_tpc_info(struct
         start_freq = ath12k_mac_get_6g_start_frequency(&ctx->def);
         pwr_reduction = bss_conf->pwr_reduction;
 
+	rcu_read_unlock();
+
         if (ahvif->vdev_type == WMI_VDEV_TYPE_STA &&
 	    arvif->reg_tpc_info.num_pwr_levels) {
                 is_tpe_present = true;
@@ -10639,7 +10779,7 @@ static void ath12k_mac_parse_tx_pwr_env(
         struct ath12k_base *ab = ar->ab;
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ieee80211_vif *vif = ahvif->vif;
-        struct ieee80211_bss_conf *bss_conf = &vif->bss_conf;
+        struct ieee80211_bss_conf *bss_conf;
         struct ieee80211_tx_pwr_env *single_tpe;
         enum wmi_reg_6g_client_type client_type;
         int i;
@@ -10648,6 +10788,16 @@ static void ath12k_mac_parse_tx_pwr_env(
         bool use_local_tpe, non_psd_set = false, psd_set = false;
 	struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
 
+	rcu_read_lock();
+
+	bss_conf = ath12k_get_link_bss_conf(arvif);
+
+	if (!bss_conf) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access bss link conf in tpc reg fill\n");
+		return;
+	}
+
         if (wdev)
                 client_type = wdev->reg_6g_power_mode;
         else
@@ -10671,6 +10821,7 @@ static void ath12k_mac_parse_tx_pwr_env(
         }
 
         if (!reg_tpe_count && !local_tpe_count) {
+		rcu_read_unlock();
                 ath12k_warn(ab,
                             "no transmit power envelope match client power type %d\n",
                             client_type);
@@ -10755,6 +10906,7 @@ static void ath12k_mac_parse_tx_pwr_env(
                         }
                 }
         }
+	rcu_read_unlock();
 }
 
 static int
@@ -10849,7 +11001,7 @@ ath12k_mac_op_assign_vif_chanctx(struct
 	if (ar->supports_6ghz && ctx->def.chan->band == NL80211_BAND_6GHZ &&
             (ahvif->vdev_type == WMI_VDEV_TYPE_STA ||
              ahvif->vdev_type == WMI_VDEV_TYPE_AP)) {
-                power_type = vif->bss_conf.power_type;
+                power_type = link_conf->power_type;
                 ath12k_dbg(ab, ATH12K_DBG_MAC, "mac chanctx power type %d\n",
                            power_type);
                 if (power_type == IEEE80211_REG_UNSET_AP)
