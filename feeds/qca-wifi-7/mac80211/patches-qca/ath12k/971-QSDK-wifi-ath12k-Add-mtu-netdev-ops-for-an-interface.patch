From 9d33632e89612fc2928b7b3f295637adad8a9e39 Mon Sep 17 00:00:00 2001
From: Parikshit Gune <quic_pgune@quicinc.com>
Date: Wed, 21 Aug 2024 14:20:22 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Add mtu netdev ops for an interface.

Add a change_mtu ops in ath12k driver to change the mtu
of an interface.

Patch-dependency: None
Patch-work: None

Signed-off-by: Parikshit Gune <quic_pgune@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 33 +++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/ppe.c | 19 +++++++++++++++
 drivers/net/wireless/ath/ath12k/ppe.h |  3 +++
 3 files changed, 55 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index b4d948a..c3e2ad7 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -12335,6 +12335,36 @@ out:
 	return arvif->ar;
 }
 
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+static int ath12k_mac_op_set_mtu(struct ieee80211_hw *hw,
+				 struct ieee80211_vif *vif,
+				 int mtu)
+{
+	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
+	struct ath12k_hw *ah = hw->priv;
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(vif);
+	int ret = 0;
+
+	if (!wdev)
+		return -ENODEV;
+
+	mutex_lock(&ah->conf_mutex);
+	if ((ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR) || (!wdev->netdev)) {
+		mutex_unlock(&ah->conf_mutex);
+		return 0;
+	}
+
+	if ((ahvif->ppe_vp_type != ATH12K_INVALID_PPE_VP_TYPE) &&
+			(ahvif->ppe_vp_num != ATH12K_INVALID_PPE_VP_NUM)) {
+		ret = ath12k_vif_set_mtu(ahvif, mtu);
+	}
+
+	mutex_unlock(&ah->conf_mutex);
+
+	return ret;
+}
+#endif
+
 static int ath12k_mac_op_add_interface(struct ieee80211_hw *hw,
 				       struct ieee80211_vif *vif)
 {
@@ -18027,6 +18057,9 @@ static const struct ieee80211_ops ath12k_ops = {
 	.cancel_remain_on_channel       = ath12k_mac_op_cancel_remain_on_channel,
 	.get_txpower			= ath12k_mac_op_get_txpower,
 	.set_radar_background		= ath12k_mac_op_set_radar_background,
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+	.change_mtu			= ath12k_mac_op_set_mtu,
+#endif
 };
 
 static void ath12k_mac_update_ch_list(struct ath12k *ar,
diff --git a/drivers/net/wireless/ath/ath12k/ppe.c b/drivers/net/wireless/ath/ath12k/ppe.c
index 2408659..12496fb 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.c
+++ b/drivers/net/wireless/ath/ath12k/ppe.c
@@ -1646,6 +1646,25 @@ exit:
 	return ret;
 }
 
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+int ath12k_vif_set_mtu(struct ath12k_vif *ahvif, int mtu)
+{
+	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
+	int ppe_vp_num = ahvif->ppe_vp_num;
+
+	if (!wdev)
+		return -ENODEV;
+
+	if (ppe_vp_mtu_set(ppe_vp_num, mtu) != PPE_VP_STATUS_SUCCESS) {
+		ath12k_err("\ndev:%p, dev->name:%s mtu %d vp num = %d set failed ",
+			wdev->netdev, wdev->netdev->name, mtu, ppe_vp_num);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+#endif
+
 int ath12k_vif_alloc_vp(struct ath12k_vif *ahvif, int ppe_vp_type, int *core_mask)
 {
 	struct wireless_dev *wdev = ieee80211_vif_to_wdev(ahvif->vif);
diff --git a/drivers/net/wireless/ath/ath12k/ppe.h b/drivers/net/wireless/ath/ath12k/ppe.h
index 030a4e3..0925c5e 100644
--- a/drivers/net/wireless/ath/ath12k/ppe.h
+++ b/drivers/net/wireless/ath/ath12k/ppe.h
@@ -35,6 +35,9 @@ int ath12k_change_core_mask_for_ppe_rfs(struct ath12k_base *ab,
 int ath12k_vif_update_vp_config(struct ath12k_vif *ahvif, int vp_type);
 int ath12k_vif_alloc_vp(struct ath12k_vif *ahvif, int vp_type, int *core_mask);
 void ath12k_vif_free_vp(struct ath12k_vif *ahvif);
+#ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
+int ath12k_vif_set_mtu(struct ath12k_vif *ahvif, int mtu);
+#endif
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 struct ath12k_ppeds_stats {
-- 
2.45.2

