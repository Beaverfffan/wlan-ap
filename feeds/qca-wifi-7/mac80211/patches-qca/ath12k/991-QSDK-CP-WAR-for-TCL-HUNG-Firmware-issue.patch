From 20e93a087e946247ed117cf07cd165cdb635a7f3 Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Date: Thu, 24 Oct 2024 22:15:54 +0530
Subject: [PATCH] QSDK:CP:WAR for TCL HUNG Firmware issue

During PDT stress test, while executing wifi restart firmware is not
able to send peer unmap/peer delete response for the peer delete sent
from the host. This is due to TCL hung where in firmware is not able to
respond to peer delete.

Firmware suggested workaround is to send a boolean flag to indicate
whether the peer delete is triggered due to wifi down for taking
respective actions in their side. Below is the changes done for
informing the firmware about the same.

        * Reused existing wdev flags for gettting interface down state from mac80211.
In driver, from arvif, wdev is accessed hence passing arvif to peer delete routine.
        * Last byte of memory allocated for peer mac address is used for sending
the information to the firmware.

Patch-dependency: 691-0001-cfg80211-mac80211-add-support-for-channel-switch-wit.patch
Patch-work: none

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c |  4 +--
 drivers/net/wireless/ath/ath12k/mac.c     | 16 +++++------
 drivers/net/wireless/ath/ath12k/peer.c    | 35 +++++++++++++++++------
 drivers/net/wireless/ath/ath12k/peer.h    |  5 ++--
 drivers/net/wireless/ath/ath12k/wmi.c     |  7 +++--
 drivers/net/wireless/ath/ath12k/wmi.h     |  4 ++-
 6 files changed, 47 insertions(+), 24 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1517,11 +1517,11 @@ static ssize_t ath12k_read_nrp_rssi(stru
 			len += scnprintf(buf + len, sizeof(buf) - len, "%pM\t\t%u\t\t%lld\n",
 					 nrp->addr, nrp->rssi, nrp->timestamp);
 		} else {
-			ath12k_peer_delete(ar, vdev_id, macaddr);
+			ath12k_peer_delete(ar, vdev_id, macaddr, NULL);
 			ath12k_warn(ab, "%pM not found in nrp list\n", macaddr);
 			return -EINVAL;
 		}
-		ath12k_peer_delete(ar, vdev_id, macaddr);
+		ath12k_peer_delete(ar, vdev_id, macaddr, NULL);
 	} else {
 		ath12k_warn(ab, "unable to create peer for nrp[%pM]\n", macaddr);
 		return -EINVAL;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1384,7 +1384,7 @@ int ath12k_mac_partner_peer_cleanup(stru
 				continue;
 			spin_unlock_bh(&partner_ab->base_lock);
 			mutex_lock(&ar->conf_mutex);
-			ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr);
+			ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr, NULL);
 			if (ret) {
 				mutex_unlock(&ar->conf_mutex);
 				spin_lock_bh(&partner_ab->base_lock);
@@ -8084,7 +8084,7 @@ static int ath12k_mac_station_add(struct
 		spin_unlock_bh(&ab->base_lock);
 
 		if (del_nrp) {
-			ath12k_peer_delete(ar, nvdev_id, arsta->addr);
+			ath12k_peer_delete(ar, nvdev_id, arsta->addr, NULL);
 			ath12k_debugfs_nrp_clean(ar, arsta->addr);
 		}
 	}
@@ -8147,7 +8147,7 @@ free_tx_stats:
 	kfree(arsta->wbm_tx_stats);
 	arsta->wbm_tx_stats = NULL;
 free_peer:
-	ath12k_peer_delete(ar, arvif->vdev_id, arsta->addr);
+	ath12k_peer_delete(ar, arvif->vdev_id, arsta->addr, NULL);
 free_rx_stats:
 	kfree(arsta->rx_stats);
 	arsta->rx_stats = NULL;
@@ -8642,7 +8642,7 @@ static int ath12k_mac_station_remove(str
 			   vif->type == NL80211_IFTYPE_STATION;
 
 	if (!skip_peer_delete) {
-		ret = ath12k_peer_delete(ar, arvif->vdev_id, arsta->addr);
+		ret = ath12k_peer_delete(ar, arvif->vdev_id, arsta->addr, arvif);
 		if (ret)
 			ath12k_warn(ar->ab, "Failed to delete peer: %pM for VDEV: %d\n",
 				    arsta->addr, arvif->vdev_id);
@@ -12587,7 +12587,7 @@ int ath12k_mac_vdev_create(struct ath12k
 
 err_peer_del:
 	if (ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
-		fbret = ath12k_peer_delete(ar, arvif->vdev_id, link_addr);
+		fbret = ath12k_peer_delete(ar, arvif->vdev_id, link_addr, NULL);
 		if (fbret) {
 			ath12k_warn(ar->ab, "failed to delete peer %pM vdev_id %d ret %d\n",
 				    link_addr, arvif->vdev_id, fbret);
@@ -13064,7 +13064,7 @@ static void ath12k_mac_remove_link_inter
 			    arvif->vdev_id, ret);
 
 	if (ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
-		ret = ath12k_peer_delete(ar, arvif->vdev_id, arvif->addr);
+		ret = ath12k_peer_delete(ar, arvif->vdev_id, arvif->addr, NULL);
 		if (ret)
 			ath12k_warn(ab, "failed to submit AP self-peer removal on vdev %d: %d"
 				    " num_peer : %d\n", arvif->vdev_id, ret, ar->num_peers);
@@ -15995,7 +15995,7 @@ ath12k_mac_unassign_vif_chanctx_handle(s
 	if (ab->hw_params->vdev_start_delay &&
 	    ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR &&
 	    ath12k_peer_find_by_addr(ab, ar->mac_addr))
-		ath12k_peer_delete(ar, arvif->vdev_id, ar->mac_addr);
+		ath12k_peer_delete(ar, arvif->vdev_id, ar->mac_addr, NULL);
 
 	if (ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR) {
 		ret = ath12k_mac_monitor_stop(ar);
@@ -16071,7 +16071,7 @@ stop_primary:
 
 		if ((ab->hw_params->vdev_start_delay && !sta && !peer->sta) ||
 		     !ab->hw_params->vdev_start_delay) {
-			ret = ath12k_peer_delete(ar, arvif->vdev_id, arvif->bssid);
+			ret = ath12k_peer_delete(ar, arvif->vdev_id, arvif->bssid, arvif);
 			if (ret) {
 				ath12k_warn(ar->ab,
 					    "failed to delete peer %pM for vdev %d: %d\n",
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -547,12 +547,16 @@ int ath12k_wait_for_peer_delete_done(str
 	return 0;
 }
 
-int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, const u8 *addr)
+int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, const u8 *addr,
+			    struct ath12k_link_vif *arvif)
 {
 	struct ath12k_peer *peer;
 	struct ath12k_base *ab = ar->ab;
+	struct wireless_dev *wdev;
+	bool is_network_down = false;
 	int ret;
 	u16 ml_peer_id;
+	unsigned long link_id;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -603,7 +607,18 @@ int ath12k_peer_delete_send(struct ath12
 		return -EHOSTDOWN;
 	}
 
-	ret = ath12k_wmi_send_peer_delete_cmd(ar, addr, vdev_id);
+	if (arvif) {
+		wdev = ieee80211_vif_to_wdev(arvif->ahvif->vif);
+		for_each_set_bit(link_id, &arvif->ahvif->links_map,
+				 IEEE80211_MLD_MAX_NUM_LINKS) {
+			if (wdev && wdev->links[link_id].ap.is_going_down) {
+				is_network_down = true;
+				break;
+			}
+		}
+	}
+
+	ret = ath12k_wmi_send_peer_delete_cmd(ar, addr, vdev_id, is_network_down);
 	if (ret) {
 		ath12k_warn(ab,
 			    "failed to delete peer vdev_id %d addr %pM ret %d\n",
@@ -614,18 +629,19 @@ int ath12k_peer_delete_send(struct ath12
 	return 0;
 }
 
-static int __ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr)
+static int __ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr,
+				struct ath12k_link_vif *arvif)
 {
 	int ret = 0;
-	struct ath12k_link_vif *arvif = NULL;
 	struct ath12k_base *ab = ar->ab;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	ret = ath12k_peer_delete_send(ar, vdev_id, addr);
+	ret = ath12k_peer_delete_send(ar, vdev_id, addr, arvif);
 	if (ret)
 		return ret;
 
+	arvif = NULL;
 	arvif = ath12k_mac_get_arvif(ar, vdev_id);
 	if (!arvif) {
 		ath12k_warn(ab,
@@ -643,13 +659,14 @@ static int __ath12k_peer_delete(struct a
 	return 0;
 }
 
-int ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr)
+int ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr,
+		       struct ath12k_link_vif *arvif)
 {
 	int ret;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	ret = __ath12k_peer_delete(ar, vdev_id, addr);
+	ret = __ath12k_peer_delete(ar, vdev_id, addr, arvif);
 	if (ret)
 		return ret;
 
@@ -696,7 +713,7 @@ int ath12k_ml_link_peers_delete(struct a
 		mutex_lock(&ar->conf_mutex);
 		ath12k_dp_peer_cleanup(ar, arvif->vdev_id, arsta->addr);
 
-		ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr);
+		ret = ath12k_peer_delete_send(ar, arvif->vdev_id, arsta->addr, arvif);
 		if (ret) {
 			mutex_unlock(&ar->conf_mutex);
 			ath12k_warn(ar->ab,
@@ -945,7 +962,7 @@ int ath12k_peer_create(struct ath12k *ar
 	return 0;
 
 cleanup:
-	fbret = __ath12k_peer_delete(ar, arg->vdev_id, arg->peer_addr);
+	fbret = __ath12k_peer_delete(ar, arg->vdev_id, arg->peer_addr, NULL);
 	if (fbret)
 		ath12k_warn(ab, "failed peer %pM delete vdev_id %d fallback ret %d\n",
 			    arg->peer_addr, arg->vdev_id, fbret);
--- a/drivers/net/wireless/ath/ath12k/peer.h
+++ b/drivers/net/wireless/ath/ath12k/peer.h
@@ -118,7 +118,7 @@ struct ath12k_peer *ath12k_peer_find_by_
 struct ath12k_peer *ath12k_peer_find_pri_by_id(struct ath12k_base *ab, int peer_id);
 #endif
 void ath12k_peer_cleanup(struct ath12k *ar, u32 vdev_id);
-int ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr);
+int ath12k_peer_delete(struct ath12k *ar, u32 vdev_id, const u8 *addr, struct ath12k_link_vif *arvif);
 int ath12k_ml_link_peers_delete(struct ath12k_vif *ahvif, struct ath12k_sta *ahsta);
 int ath12k_ml_peer_create(struct ath12k_hw *ah, struct ieee80211_sta *sta);
 int ath12k_ml_peer_delete(struct ath12k_hw *ah, struct ieee80211_sta *sta);
@@ -133,7 +133,8 @@ void ath12k_peer_rhash_tbl_destroy(struc
 int ath12k_peer_rhash_delete(struct ath12k_base *ab, struct ath12k_peer *peer);
 void ath12k_peer_mlo_map_event(struct ath12k_base *ab, struct sk_buff *skb);
 void ath12k_peer_mlo_unmap_event(struct ath12k_base *ab, struct sk_buff *skb);
-int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, const u8 *addr);
+int ath12k_peer_delete_send(struct ath12k *ar, u32 vdev_id, const u8 *addr,
+			    struct ath12k_link_vif *arvif);
 struct ath12k_peer *ath12k_peer_find_by_vdev_id(struct ath12k_base *ab,
 		                        int vdev_id);
 void ath12k_mac_peer_disassoc(struct ath12k_base *ab, struct ieee80211_sta *sta,
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -2057,10 +2057,11 @@ int ath12k_wmi_send_peer_create_cmd(stru
 }
 
 int ath12k_wmi_send_peer_delete_cmd(struct ath12k *ar,
-				    const u8 *peer_addr, u8 vdev_id)
+				    const u8 *peer_addr, u8 vdev_id,
+				    bool is_network_down)
 {
 	struct ath12k_wmi_pdev *wmi = ar->wmi;
-	struct wmi_peer_delete_cmd *cmd;
+	struct wmi_peer_delete_cmd *cmd = {0};
 	struct sk_buff *skb;
 	int ret;
 
@@ -2073,6 +2074,8 @@ int ath12k_wmi_send_peer_delete_cmd(stru
 						 sizeof(*cmd));
 
 	ether_addr_copy(cmd->peer_macaddr.addr, peer_addr);
+	cmd->peer_macaddr.padding[1] = is_network_down;
+
 	cmd->vdev_id = cpu_to_le32(vdev_id);
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_PEER,
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3237,6 +3237,7 @@ struct wmi_mac_phy_caps_ext {
 /* 2 word representation of MAC addr */
 struct ath12k_wmi_mac_addr_params {
 	u8 addr[ETH_ALEN];
+	/* Last byte of below member is used to indicate interface down in peer_del */
 	u8 padding[2];
 } __packed;
 
@@ -8882,7 +8883,8 @@ int ath12k_wmi_set_sta_ps_param(struct a
 int ath12k_wmi_force_fw_hang_cmd(struct ath12k *ar, u32 type, u32 delay_time_ms,
 				 bool nowait);
 int ath12k_wmi_send_peer_delete_cmd(struct ath12k *ar,
-				    const u8 *peer_addr, u8 vdev_id);
+				    const u8 *peer_addr, u8 vdev_id,
+				    bool is_network_down);
 int ath12k_wmi_vdev_delete(struct ath12k *ar, u8 vdev_id);
 void ath12k_wmi_start_scan_init(struct ath12k *ar,
 				struct ath12k_wmi_scan_req_arg *arg);
