From c0c32d8403638358e1a97db16dee9cd3fe6d9f7a Mon Sep 17 00:00:00 2001
From: Adwait Nayak <quic_adwaitn@quicinc.com>
Date: Tue, 8 Oct 2024 17:56:20 +0530
Subject: [PATCH] UPSTREAM: CP: wifi: ath12k: Add module param control for CFR

Usually CFR feature requires below memory allocations:
DBR allocation :
Number of buffers * Max buf size
In case of WKK, it is 103 * 64KB = 6.5 MB per radio
cfr_test_app : Allocating 8MB file per radio in /tmp/
relayfs: Allocates approax. 1MB file per radio

Out of which, cfr_test_app and relayfs memories are allocated
during runtime, whereas the DBR allocation is done even if
CFR is disabled; which is an overhead.

Fix:
- Introduction of new module param named cfr_enable_bmap.
- By default cfr_enable_bmap would be set to 0, indicating that
  CFR feature is not enabled by default. It's a bitmap.
  User can set the bitmap in /etc/modules.d/ath12k in order
  to enable/ disable CFR per radio.
  Ex: If ath12k cfr_enable_bmap = 0x7, CFR would be enabled for
  chip_id 0/1/2. If ath12k cfr_enable_bmap = 0x3, CFR would be
  enabled for chip_id 0 and 1 etc.

- Skip CFR SRNG allocations
- Skip WMI handler registrations for DBR/TX completion events
- Skip relay write (cfr_capture will not be created)
- If CFR is disabled, it will not allow user to start
  cfr_test_app as well.

Patch-dependency: 890-ath12k-add-CFR-single-shot-periodic-capture-support.patch
Patch-work: None
Fixes: None

Signed-off-by: Adwait Nayak <quic_adwaitn@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c | 20 +++++++++++++++-----
 1 file changed, 15 insertions(+), 5 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index de1ddc0..53401dd 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -104,6 +104,10 @@ module_param_named(rx_nwifi_err_dump, ath12k_rx_nwifi_err_dump, bool, 0644);
 MODULE_PARM_DESC(rx_nwifi_err_dump,
                  "rx nwifi err dump: 0-disable, 1-enable");
 
+unsigned int ath12k_cfr_enable_bmap = 0;
+module_param_named(cfr_enable_bmap, ath12k_cfr_enable_bmap, uint, 0644);
+MODULE_PARM_DESC(cfr_enable_bmap, "cfr_enable_bmap: 0-disable, enable-(0x7 for 3 chipsets)");
+
 static DEFINE_MUTEX(ath12k_hw_lock);
 static struct list_head ath12k_hw_groups = LIST_HEAD_INIT(ath12k_hw_groups);
 
@@ -1372,10 +1376,14 @@ static int ath12k_core_pdev_init(struct ath12k_base *ab)
 		goto err_spectral_deinit;
 	}
 
-	ret = ath12k_cfr_init(ab);
-	if (ret) {
-		ath12k_err(ab, "failed to init cfr %d\n", ret);
-		goto err_spectral_deinit;
+	/* Check if cfr_enable_bmap is set for the corresponding HW */
+	if (ath12k_cfr_enable_bmap & (1 << ab->chip_id)) {
+		ath12k_info(ab, "Enabling CFR for chip id:%d\n", ab->chip_id);
+		ret = ath12k_cfr_init(ab);
+		if (ret) {
+			ath12k_err(ab, "failed to init cfr %d\n", ret);
+			goto err_spectral_deinit;
+		}
 	}
 
 	ath12k_sawf_init(ab);
@@ -1403,7 +1411,9 @@ err_thermal_unregister:
 static void ath12k_core_pdev_deinit(struct ath12k_base *ab)
 {
 	ath12k_dp_ppeds_stop(ab);
-	ath12k_cfr_deinit(ab);
+	if (ath12k_cfr_enable_bmap & (1 << ab->chip_id))
+		ath12k_cfr_deinit(ab);
+
 	ath12k_spectral_deinit(ab);
 	ath12k_thermal_unregister(ab);
 	ath12k_dp_accel_cfg_deinit(ab);
-- 
2.34.1

