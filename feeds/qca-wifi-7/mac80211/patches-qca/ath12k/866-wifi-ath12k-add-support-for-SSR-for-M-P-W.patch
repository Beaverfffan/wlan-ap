From 55d344e2e63cde1915ebe988d74349d8955f26e3 Mon Sep 17 00:00:00 2001
From: Narendhar Reddy <quic_nare@quicinc.com>
Date: Wed, 3 Jan 2024 15:15:17 +0530
Subject: [PATCH] wifi: ath12k: add support for SSR for
 IPQ5332+QCN6432+QCN9274.

Currently when an assert is happened with recovery set,
rootpd is stopped once all the radios are stopped.
This has a problem if the number of userpds is not equal
to the number of radios.

Make changes to stop the rootpd once all the userpds are
stopped.
Remove ath12k_core_rproc_boot_recovery api as it handles
only one userpd and one rootpd scenario. Make
ath12k_core_rpd_rproc_boot_recovery api as generic to handle
 'n' number of userpd scenario.

Signed-off-by: Narendhar Reddy <quic_nare@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c | 74 +++++++-------------------
 drivers/net/wireless/ath/ath12k/core.h | 15 ++----
 2 files changed, 21 insertions(+), 68 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 1198f62..fc5a2c2 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -155,10 +155,8 @@ static void ath12k_core_hw_group_reset(struct work_struct *work)
 
 	for (i = 0; i < ag->num_chip; i++) {
 		ab = ag->ab[i];
-		if (ab->hif.bus == ATH12K_BUS_PCI) {
-			ag->crash_type = ATH12K_RPROC_ROOTPD_AHB_CRASH;
+		if (ab->hif.bus == ATH12K_BUS_PCI)
 			continue;
-		}
 
 		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))) {
 			set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
@@ -1416,6 +1414,10 @@ static int ath12k_core_start(struct ath12k_base *ab,
 		goto err_reo_cleanup;
 	}
 
+	/* Indicate the userpd count for the group */
+	if (ab->multi_pd_arch)
+		ab->ag->num_userpd_started++;
+
 	/* Indicate the core start in the appropriate group */
 	ab->ag->num_started++;
 
@@ -1972,7 +1974,7 @@ static int ath12k_core_atomic_ssr_notifier_cb(struct notifier_block *nb,
 		return NOTIFY_DONE;
 
 	if (strcmp(ssr_pdev->name, ab_ahb->tgt_rproc->name) == 0) {
-		ab->ag->crash_type = ATH12K_RPROC_USERPD_HYBRID_CRASH;
+		ab->ag->crash_type = ATH12K_RPROC_USERPD_CRASH;
 		ab_ahb->tgt_rproc->state = RPROC_CRASHED;
 	}
 
@@ -2005,7 +2007,6 @@ static int ath12k_core_rpd_atomic_ssr_notifier_cb(struct notifier_block *nb,
 		return NOTIFY_DONE;
 
 	ab->collect_dump = true;
-
 	ret = ath12k_core_check_ssr_notifier_as_expected(ab, data, "qcom,rproc_rpd");
 	if (ret)
 		return NOTIFY_DONE;
@@ -2015,7 +2016,7 @@ static int ath12k_core_rpd_atomic_ssr_notifier_cb(struct notifier_block *nb,
 	 * This module will take care of the rrproc recovery process.
 	 */
 	if (strcmp(ssr_pdev->name, ab_ahb->tgt_rrproc->name) == 0) {
-		ag->crash_type = ATH12K_RPROC_ROOTPD_HYBRID_CRASH;
+		ag->crash_type = ATH12K_RPROC_ROOTPD_CRASH;
 		ab_ahb->tgt_rrproc->state = RPROC_CRASHED;
 	}
 
@@ -3199,49 +3200,13 @@ static void ath12k_core_rproc_coredump(struct ath12k_base *ab,
 	}
 }
 
-/* Asserted target's reboot handling for crash type ATH12K_RPROC_ROOTPD_AHB_CRASH */
-static void ath12k_core_rproc_boot_recovery(struct ath12k_base *ab)
-{
-	struct ath12k_hw_group *ag = ab->ag;
-	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-
-	if (ag->crash_type != ATH12K_RPROC_ROOTPD_AHB_CRASH)
-		return;
-
-	/*
-	 * Stop user pd
-	 * Collect coredump using user pd if enabled
-	 * Stop root pd
-	 * Collect coredump using root pd
-	 * Free Target memory chunk
-	 * Start root pd, then start user pd
-	 */
-
-	ab_ahb->tgt_rproc->state = RPROC_CRASHED;
-	ath12k_core_rproc_stop(ab_ahb->tgt_rproc);
-
-	ab_ahb->tgt_rproc->state = RPROC_SUSPENDED;
-	ath12k_core_rproc_coredump(ab, ab_ahb->tgt_rproc);
-
-	ab_ahb->tgt_rrproc->state = RPROC_RUNNING;
-	ath12k_core_rproc_stop(ab_ahb->tgt_rrproc);
-	ath12k_core_rproc_coredump(ab, ab_ahb->tgt_rrproc);
-
-	ath12k_qmi_free_target_mem_chunk(ab);
-
-	ath12k_core_rproc_start(ab_ahb->tgt_rrproc);
-	ath12k_core_rproc_start(ab_ahb->tgt_rproc);
-	ag->crash_type = ATH12K_NO_CRASH;
-	ath12k_core_wait_dump_collect(ab);
-}
-
-/* Asserted target's reboot handling for crash type ATH12K_RPROC_USERPD_HYBRID_CRASH */
+/* Asserted target's reboot handling for crash type ATH12K_RPROC_USERPD_CRASH */
 static void ath12k_core_upd_rproc_boot_recovery(struct ath12k_base *ab)
 {
 	struct ath12k_hw_group *ag = ab->ag;
 	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 
-	if (ag->crash_type != ATH12K_RPROC_USERPD_HYBRID_CRASH)
+	if (ag->crash_type != ATH12K_RPROC_USERPD_CRASH)
 		return;
 
 	/*
@@ -3258,7 +3223,7 @@ static void ath12k_core_upd_rproc_boot_recovery(struct ath12k_base *ab)
 	ath12k_core_wait_dump_collect(ab);
 }
 
-/* Asserted target's reboot handling for crash type ATH12K_RPROC_ROOTPD_HYBRID_CRASH */
+/* Asserted target's reboot handling for crash type ATH12K_RPROC_ROOTPD_CRASH */
 static void ath12k_core_rpd_rproc_boot_recovery(struct ath12k_base *ab)
 {
 	struct ath12k_hw_group *ag = ab->ag;
@@ -3269,9 +3234,6 @@ static void ath12k_core_rpd_rproc_boot_recovery(struct ath12k_base *ab)
 	struct ath12k_base *tmp_ab;
 	int user_pd, ret;
 
-	if (ag->crash_type != ATH12K_RPROC_ROOTPD_HYBRID_CRASH)
-		return;
-
 	if (!rootpd_rproc || !usrpd_rproc) {
 		ath12k_err(ab, "rproc(s) are null\n");
 		return;
@@ -3288,13 +3250,14 @@ static void ath12k_core_rpd_rproc_boot_recovery(struct ath12k_base *ab)
 			   usrpd_rproc->name);
 		return;
 	}
-
 	usrpd_rproc->state = RPROC_CRASHED;
 	ret = ath12k_core_rproc_stop(usrpd_rproc);
 	if (ret)
 		ath12k_err(ab, "failed to stop user_pd:%s ret:%d\n",
 			   usrpd_rproc->name, ret);
 
+	ag->num_userpd_started--;
+
 	/* Reboot Sequence of all remoteproc pds
 	 * 1. Stop all user pds
 	 * 2. In case of text device present, stop text pd
@@ -3309,7 +3272,7 @@ static void ath12k_core_rpd_rproc_boot_recovery(struct ath12k_base *ab)
 	 *    Start textpd device if present
 	 *    Start all userpd devices
 	 */
-	if (!ag->num_started) {
+	if (!ag->num_userpd_started) {
 		if (txtpd_rproc && txtpd_rproc->state != RPROC_OFFLINE) {
 			txtpd_rproc->state = RPROC_CRASHED;
 			ret = ath12k_core_rproc_stop(txtpd_rproc);
@@ -3328,7 +3291,7 @@ static void ath12k_core_rpd_rproc_boot_recovery(struct ath12k_base *ab)
 
 	ath12k_qmi_free_target_mem_chunk(ab);
 
-	if (!ag->num_started) {
+	if (!ag->num_userpd_started) {
 		ret = ath12k_core_rproc_start(rootpd_rproc);
 		if (ret)
 			ath12k_err(ab, "failed to start root_pd:%s ret:%d\n",
@@ -3636,12 +3599,11 @@ static void ath12k_core_reset(struct work_struct *work)
 			ath12k_hif_power_up(ab);
 		} else if (ab->hif.bus == ATH12K_BUS_AHB ||
 			   ab->hif.bus == ATH12K_BUS_HYBRID) {
-			/* When crash type ATH12K_RPROC_USERPD_HYBRID_CRASH is set */
+			/* When crash type ATH12K_RPROC_USERPD_CRASH is set */
 			ath12k_core_upd_rproc_boot_recovery(ab);
-			/* When crash type ATH12K_RPROC_ROOTPD_AHB_CRASH is set */
-			ath12k_core_rproc_boot_recovery(ab);
-			/* When crash type ATH12K_RPROC_ROOTPD_HYBRID_CRASH is set */
-			ath12k_core_rpd_rproc_boot_recovery(ab);
+			/* When crash type ATH12K_RPROC_ROOTPD_CRASH is set */
+			if (ag->crash_type == ATH12K_RPROC_ROOTPD_CRASH)
+				ath12k_core_rpd_rproc_boot_recovery(ab);
 
 		}
 		ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset started\n");
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 283207a..31ff87b 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1320,25 +1320,15 @@ enum ath12k_core_crash_type {
 	/* Fatal error notification from MHI message */
 	ATH12K_MHI_CRASH,
 
-	/* Fatal error notification from remoteproc user pd for ahb based
-	 * internal radio
-	 */
-	ATH12K_RPROC_USERPD_AHB_CRASH,
-
 	/* Fatal error notification from remoteproc user pd for platform with
 	 * ahb based internal radio and pcic based external radios
 	 */
-	ATH12K_RPROC_USERPD_HYBRID_CRASH,
-
-	/* Fatal error notification from remoteproc root pd for ahb based
-	 * internal radio
-	 */
-	ATH12K_RPROC_ROOTPD_AHB_CRASH,
+	ATH12K_RPROC_USERPD_CRASH,
 
 	/* Fatal error notification from remoteproc root pd for platform with
 	 * ahb based internal radio and pcic based external radios
 	 */
-	ATH12K_RPROC_ROOTPD_HYBRID_CRASH
+	ATH12K_RPROC_ROOTPD_CRASH
 };
 
 enum ath12k_mlo_recovery_mode {
@@ -1377,6 +1367,7 @@ struct ath12k_hw_group {
 	u8 num_probed;
 	u8 num_started;
 	u8 num_hw;
+	u8 num_userpd_started;
 	bool mlo_capable;
 	bool hw_queues_stopped;
 	bool mgmt_rx_reorder;
-- 
2.34.1

