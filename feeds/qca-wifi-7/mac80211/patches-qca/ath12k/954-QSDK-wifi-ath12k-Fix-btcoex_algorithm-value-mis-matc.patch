From 0f3dcbe60520db1a97459349ac07a71a27e33d1c Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Mon, 3 Jun 2024 09:10:18 +0530
Subject: [PATCH] QSDK: wifi: ath12k: Fix btcoex_algorithm value mis-match from
 dts

Currently, we fetch the default value of btcoex_algorithm from dts
file and store it in coex_algo_type variable. But when we read
btcoex_algorithm value from debugfs file, we use another
variable(pta_algorithm) which is not assigned by the default
value of dts.

This creates mis-match values of btcoex_algorithm between dts
tree node and debugfs file also using two variable for
btcoex_algorithm causes code discrepancy.

We should use one variable for btcoex_algorithm.

Patch-dependency: none

Fixes: I7a721e5e185 ("wifi: ath12k: BT-Coex feature support")
Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  1 -
 drivers/net/wireless/ath/ath12k/debugfs.c | 12 ++++++------
 2 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index b576bc3..733f7b9 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -868,7 +868,6 @@ struct ath12k_btcoex_info {
         u32 bt_priority_time_slot;
         u32 coex_algo_type;
         u32 pta_priority;
-        u32 pta_algorithm;
         u32 wlan_prio_mask;
         u32 wlan_weight;
         u32 bt_weight;
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 6e6db7e..e12cc47 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -4473,7 +4473,7 @@ static ssize_t ath12k_write_btcoex_algo(struct file *file,
         char buf[256] = {0};
         size_t buf_size;
         u32 pta_num = 0, coex_mode = 0, bt_txrx_time  = 0,
-        bt_priority_time = 0, pta_algorithm = 0,
+        bt_priority_time = 0, coex_algo_type = 0,
         pta_priority = 0;
         int ret = 0;
 
@@ -4492,7 +4492,7 @@ static ssize_t ath12k_write_btcoex_algo(struct file *file,
         buf[buf_size] = '\0';
         ret = sscanf(buf, "%u 0x%x 0x%x 0x%x 0x%x 0x%x" , &pta_num, &coex_mode,
                      &bt_txrx_time, &bt_priority_time,
-                     &pta_algorithm, &pta_priority);
+                     &coex_algo_type, &pta_priority);
 
         if (!ret) {
                 ret = -EINVAL;
@@ -4501,7 +4501,7 @@ static ssize_t ath12k_write_btcoex_algo(struct file *file,
 
         if (coex_mode > BTCOEX_PTA_MODE ||
             coex_mode < BTCOEX_THREE_WIRE_MODE ||
-            pta_algorithm >= COEX_ALGO_MAX_SUPPORTED) {
+            coex_algo_type >= COEX_ALGO_MAX_SUPPORTED) {
                 ret = -EINVAL;
                 goto exit;
         }
@@ -4533,7 +4533,7 @@ static ssize_t ath12k_write_btcoex_algo(struct file *file,
         coex_config.coex_mode          = coex_mode;
         coex_config.bt_txrx_time       = bt_txrx_time;
         coex_config.bt_priority_time   = bt_priority_time;
-        coex_config.pta_algorithm      = pta_algorithm;
+        coex_config.pta_algorithm      = coex_algo_type;
         coex_config.pta_priority       = pta_priority;
         mutex_unlock(&ar->conf_mutex);
 
@@ -4551,7 +4551,7 @@ static ssize_t ath12k_write_btcoex_algo(struct file *file,
         ar->coex.coex_mode              =   coex_mode;
         ar->coex.bt_active_time_slot    =   bt_txrx_time;
         ar->coex.bt_priority_time_slot  =   bt_priority_time;
-        ar->coex.pta_algorithm          =   pta_algorithm;
+        ar->coex.coex_algo_type         =   coex_algo_type;
         ar->coex.pta_priority           =   pta_priority;
         ret = count;
 
@@ -4577,7 +4577,7 @@ static ssize_t ath12k_read_btcoex_algo(struct file *file, char __user *ubuf,
                         ar->coex.pta_num, ar->coex.coex_mode,
                         ar->coex.bt_active_time_slot,
                         ar->coex.bt_priority_time_slot,
-                        ar->coex.pta_algorithm, ar->coex.pta_priority);
+                        ar->coex.coex_algo_type, ar->coex.pta_priority);
         mutex_unlock(&ar->conf_mutex);
 
         return simple_read_from_buffer(ubuf, count, ppos, buf, len);
-- 
2.34.1

