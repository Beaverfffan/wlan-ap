From 2258b452caa897deb45d2a9fda33bd1db59e5d46 Mon Sep 17 00:00:00 2001
From: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>
Date: Tue, 30 Jul 2024 21:15:39 +0530
Subject: [PATCH] wifi: ath12k: Refactor ring reaping logic in tx completion

Ring reaping in tx completion is based on budget and next
entry availabilty. But this reaping logic cache invalidation
of entries is not done properly. So, change the reaping based
on valid entries. Addition to that, next set of new entries will
be proceesed if already processed entries is less than budget
until processed entries equals to budget.This will result in 
better usage of CPU since new napi schedule will get avoided.

Patch dependency: 720-c-ath12k-Optimize-the-tx-completion-routine-by-avoid-a.patch

Signed-off-by: Yuvasree Sivasankaran <quic_ysivasan@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 33 ++++++++++++++++---------
 1 file changed, 21 insertions(+), 12 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 93341f1..da995d5 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1544,8 +1544,8 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 	u8 mac_id;
 	u64 desc_va;
 	u32 desc_id;
-	int valid_entries;
-	int orig_budget = budget;
+	int num_processed = 0;
+	int valid_entries = 0;
 	struct hal_wbm_completion_ring_tx *tx_status;
 	ktime_t timestamp = 0;
 	enum hal_wbm_rel_src_module buf_rel_source;
@@ -1555,23 +1555,25 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 	int htt_status;
 
 	INIT_LIST_HEAD(&desc_free_list);
+	skb_queue_head_init(&free_list_head);
 
 	ath12k_hal_srng_access_dst_ring_begin_nolock(ab, status_ring);
 
-	valid_entries = ath12k_hal_srng_dst_num_free(ab, status_ring, false);
-	if (!valid_entries) {
-		ath12k_hal_srng_access_dst_ring_end_nolock(status_ring);
-		return 0;
-	}
+	if (!valid_entries)
+		valid_entries = ath12k_hal_srng_dst_num_free(ab, status_ring, false);
 
+more_data:
 	if (valid_entries > budget)
 		valid_entries = budget;
 
 	ath12k_hal_srng_dst_invalidate_entry(ab, status_ring, valid_entries);
-	skb_queue_head_init(&free_list_head);
 
-	while (budget && (tx_status = (struct hal_wbm_completion_ring_tx *)ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
-		budget--;
+
+	while (likely(valid_entries--)) {
+
+		tx_status = (struct hal_wbm_completion_ring_tx *)ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring);
+		if (unlikely(!tx_status))
+			break;
 
 		/* Find the HAL_WBM_RELEASE_INFO0_REL_SRC_MODULE value */
 		buf_rel_source = FIELD_GET(HAL_WBM_COMPL_TX_INFO0_REL_SRC_MODULE, tx_status->info0);
@@ -1659,9 +1661,17 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 			ath12k_dp_tx_complete_msdu(ar, msdu, tx_status, buf_rel_source,
 						   tx_desc, timestamp, htt_status);
 		}
+		num_processed ++;
 	}
 	ath12k_hal_srng_access_dst_ring_end_nolock(status_ring);
 
+	if (num_processed < budget) {
+		budget = budget - num_processed;
+		valid_entries = ath12k_hal_srng_dst_num_free(ab, status_ring, true);
+		if (valid_entries)
+			goto more_data;
+	}
+
 	spin_lock_bh(&dp->tx_desc_lock[ring_id]);
 	list_for_each(cur, &desc_free_list) {
 		tx_desc = list_entry(cur, struct ath12k_tx_desc_info, list);
@@ -1671,9 +1681,8 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 	}
 	list_splice_tail(&desc_free_list, &dp->tx_desc_free_list[ring_id]);
 	spin_unlock_bh(&dp->tx_desc_lock[ring_id]);
-
 	dev_kfree_skb_list_fast(&free_list_head);
-	return (orig_budget - budget);
+	return num_processed;
 }
 
 static int
-- 
2.34.1

