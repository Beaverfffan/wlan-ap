From 87f5e5165764c0cc638592234865aab90643bedd Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Mon, 5 Aug 2024 13:55:02 -0700
Subject: [PATCH] wifi: ath12k: Add fast tx path for native wifi

This change will make use of fast_xmit flag for native wifi mode
which will utilise the fast_tx path wherein frame mode
specific operations are done and then packet is enqueued to the hw using
dp_tx_direct which is now changed ath12k_dp_tx_hw_enqueue

The fast_xmit flag is set from the stack whenever a flow has been
identified to avoid per-packet-checks. Whenever the skb->fast_xmit
is set, it means the destination netdevice has been identified and
the packet can be enqueued to HW without doing a lot of processing which
might have been needed for an unidentified flow

Performance analysis: 6G Mesh UDP DL (N1-N2) ~ 300Mbps improvement
Throughput without this change: 4852 Mbps
Throughput with this change: 5183 Mbps

Patch dependency: none

Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c |  9 ++++-----
 drivers/net/wireless/ath/ath12k/dp_tx.h |  3 ++-
 drivers/net/wireless/ath/ath12k/mac.c   | 19 +++++++++++++++++--
 3 files changed, 23 insertions(+), 8 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index da3552f..2b1f126 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -61,7 +61,7 @@ ath12k_dp_tx_get_encap_type(struct ath12k_base *ab, struct sk_buff *skb)
 	return HAL_TCL_ENCAP_TYPE_NATIVE_WIFI;
 }
 
-static void ath12k_dp_tx_encap_nwifi(struct sk_buff *skb)
+void ath12k_dp_tx_encap_nwifi(struct sk_buff *skb)
 {
 	struct ieee80211_hdr *hdr = (void *)skb->data;
 	u8 *qos_ctl;
@@ -260,11 +260,10 @@ static int ath12k_dp_prepare_htt_metadata(struct sk_buff *skb)
 	return 0;
 }
 
-
-int ath12k_dp_tx_direct(struct ath12k_link_vif *arvif, struct sk_buff *skb)
+int ath12k_dp_tx_hw_enqueue(struct ath12k_link_vif *arvif, struct sk_buff *skb)
 {
 	struct ath12k *ar = arvif->ar;
-	struct ath12k_base *ab = arvif->ab;
+	struct ath12k_base *ab = ar->ab;
 	struct ath12k_dp *dp = arvif->dp;
 	struct ath12k_vif_tcl_desc_template *desc = &arvif->desc;
 	struct ath12k_tx_desc_info *tx_desc = NULL;
@@ -387,7 +386,7 @@ fail_remove_tx_buf:
 
 	return ret;
 }
-EXPORT_SYMBOL(ath12k_dp_tx_direct);
+EXPORT_SYMBOL(ath12k_dp_tx_hw_enqueue);
 
 int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 		 struct ath12k_sta *ahsta, struct sk_buff *skb,
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.h b/drivers/net/wireless/ath/ath12k/dp_tx.h
index 588694f..4855894 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.h
@@ -239,5 +239,6 @@ int ath12k_dp_tx_htt_tx_filter_setup(struct ath12k_base *ab, u32 ring_id,
 int ath12k_dp_tx_htt_tx_monitor_mode_ring_config(struct ath12k *ar, bool reset);
 int ath12k_dp_tx_htt_monitor_mode_ring_config(struct ath12k *ar, bool reset);
 int ath12k_dp_tx_htt_h2t_vdev_stats_ol_req(struct ath12k *ar, u64 reset_bitmask);
-int ath12k_dp_tx_direct(struct ath12k_link_vif *arvif, struct sk_buff *skb);
+int ath12k_dp_tx_hw_enqueue(struct ath12k_link_vif *arvif, struct sk_buff *skb);
+void ath12k_dp_tx_encap_nwifi(struct sk_buff *skb);
 #endif
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index ca54874..baf2145 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10747,8 +10747,23 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 			return;
 		}
 
-		skb_cb->flags = ATH12K_SKB_HW_80211_ENCAP;
-		ret = ath12k_dp_tx_direct(arvif, skb);
+		switch(ahvif->tx_encap_type) {
+			case ATH12K_HW_TXRX_ETHERNET:
+				skb_cb->flags = ATH12K_SKB_HW_80211_ENCAP;
+				ret = ath12k_dp_tx_hw_enqueue(arvif, skb);
+				break;
+			case ATH12K_HW_TXRX_NATIVE_WIFI:
+				ath12k_dp_tx_encap_nwifi(skb);
+				skb->is_from_recycler = 0;
+				skb_cb->flags |= ATH12K_SKB_TX_STATUS;
+				ret = ath12k_dp_tx_hw_enqueue(arvif, skb);
+				break;
+			case ATH12K_HW_TXRX_RAW:
+			default:
+				ret = -EINVAL;
+				break;
+		}
+
 		if (unlikely(ret)) {
 			ath12k_dbg(arvif->ar->ab, ATH12K_DBG_MAC,
 				   "failed to transmit frame %d\n", ret);
-- 
2.25.1

