From 1b173e40565889850f28b553101f86c8161d46ae Mon Sep 17 00:00:00 2001
From: Arulanbu Balusamy <quic_abalusam@quicinc.com>
Date: Mon, 24 Jun 2024 16:12:13 +0530
Subject: [PATCH] wifi: ath12k: Add the support to configure the legacy
and HE MCS rates

Add the support to configure the beacon tx rate as legacy and HE MCS
rates. This involves receiving the beacon rate mask from the mac80211 
layer and calculating the corresponding hardware rate code.

Patch-dependency: 920-002-wifi-nl80211-Used-the-chandef-from-the-configured-parameters-during.patch
		  r34-hostapd-Fix-the-issue-while-configure-the-higher-leg.patch
		  r37-hostapd-Fix-NL80211_CMD_SET_BSS-failure-in-EHT-mode.patch
		  r39-hostapd-fix-beacon-rate-configuration-for-he.patch

Patch-work: [None]

Signed-off-by: Arulanbu Balusamy <quic_abalusam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -63,6 +63,14 @@
 static void ath12k_mac_remove_link_interface(struct ieee80211_hw *hw,
 					     struct ath12k_link_vif *arvif);
 
+static int ath12k_get_beacon_hw_ratecode(struct ath12k *ar,
+					 struct ieee80211_bss_conf *link_conf,
+					 enum nl80211_band band);
+
+static int ath12k_mac_set_6g_nonht_dup_conf(struct ath12k_link_vif *arvif,
+					    const struct cfg80211_chan_def *chandef,
+					    bool enable);
+
 static const struct ieee80211_channel ath12k_2ghz_channels[] = {
 	CHAN2G(1, 2412, 0),
 	CHAN2G(2, 2417, 0),
@@ -4466,14 +4474,14 @@ static void ath12k_recalculate_mgmt_rate
 {
 	const struct ieee80211_supported_band *sband;
 	u8 basic_rate_idx;
-	int hw_rate_code;
+	int hw_rate_code, beacon_hw_ratecode, ret;
 	u32 vdev_param;
 	u16 bitrate;
-	int ret;
+	enum nl80211_band band = def->chan->band;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	sband = ar->ah->hw->wiphy->bands[def->chan->band];
+	sband = ar->ah->hw->wiphy->bands[band];
 	basic_rate_idx = ffs(link_conf->basic_rates);
 	if (basic_rate_idx)
 		basic_rate_idx -= 1;
@@ -4491,6 +4499,22 @@ static void ath12k_recalculate_mgmt_rate
 	if (ret)
 		ath12k_warn(ar->ab, "failed to set mgmt tx rate %d\n", ret);
 
+	beacon_hw_ratecode = ath12k_get_beacon_hw_ratecode(ar, link_conf, band);
+	if (beacon_hw_ratecode) {
+		hw_rate_code = beacon_hw_ratecode;
+
+		if (!link_conf->beacon_tx_rate.control[band].legacy) {
+
+			/* Duplicate beacon is only supported for non-HT rates, Therefore
+			 * disable the duplicate beacon for non-HT rates
+			 */
+			ret = ath12k_mac_set_6g_nonht_dup_conf(arvif, def, false);
+			if (ret)
+				ath12k_warn(ar->ab, "failed to unset 6G non-ht dup conf for vdev %d: %d\n",
+					    arvif->vdev_id, ret);
+		}
+	}
+
 	vdev_param = WMI_VDEV_PARAM_BEACON_RATE;
 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id, vdev_param,
 					    hw_rate_code);
@@ -12176,7 +12200,8 @@ static void ath12k_mac_op_remove_chanctx
 }
 
 static int ath12k_mac_set_6g_nonht_dup_conf(struct ath12k_link_vif *arvif,
-					    const struct cfg80211_chan_def *chandef)
+					    const struct cfg80211_chan_def *chandef,
+					    bool enable)
 {
 	struct ath12k *ar = arvif->ar;
 	int param_id, ret = 0;
@@ -12200,18 +12225,17 @@ static int ath12k_mac_set_6g_nonht_dup_c
 	memcpy(link_addr, link_conf->addr, ETH_ALEN);
 	nontransmitted = link_conf->nontransmitted;
 	rcu_read_unlock();
-
 	if ((ahvif->vdev_type == WMI_VDEV_TYPE_AP) &&
 	    !nontransmitted &&
 	    (chandef->chan->band == NL80211_BAND_6GHZ)) {
 		param_id = WMI_VDEV_PARAM_6GHZ_PARAMS;
-		if (mode > MODE_11AX_HE20 && !is_psc) {
+		if (mode > MODE_11AX_HE20 && !is_psc && enable) {
 			value |= WMI_VDEV_6GHZ_BITMAP_NON_HT_DUPLICATE_BEACON;
 			value |= WMI_VDEV_6GHZ_BITMAP_NON_HT_DUPLICATE_BCAST_PROBE_RSP;
 			value |= WMI_VDEV_6GHZ_BITMAP_NON_HT_DUPLICATE_FD_FRAME;
 		}
 		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
-		           "Set 6GHz non-ht dup params for vdev %pM ,vdev_id %d param %d value %d\n",
+			   "Set 6GHz non-ht dup params for vdev %pM ,vdev_id %d param %d value %d\n",
 			   link_addr, arvif->vdev_id, param_id, value);
 		ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id, param_id, value);
 	}
@@ -12318,7 +12342,7 @@ ath12k_mac_vdev_config_after_start(struc
 		ath12k_warn(ab, "failed to set txbf conf for vdev %d: %d\n",
 			    arvif->vdev_id, ret);
 
-	ret = ath12k_mac_set_6g_nonht_dup_conf(arvif, chandef);
+	ret = ath12k_mac_set_6g_nonht_dup_conf(arvif, chandef, true);
 	if (ret)
 		ath12k_warn(ab, "failed to set 6G non-ht dup conf for vdev %d: %d\n",
 		            arvif->vdev_id, ret);
@@ -17334,6 +17358,10 @@ static int __ath12k_mac_register(struct
 
 	wiphy_ext_feature_set(hw->wiphy,
 			      NL80211_EXT_FEATURE_SET_SCAN_DWELL);
+	wiphy_ext_feature_set(hw->wiphy,
+			      NL80211_EXT_FEATURE_BEACON_RATE_LEGACY);
+	wiphy_ext_feature_set(hw->wiphy,
+			      NL80211_EXT_FEATURE_BEACON_RATE_HE);
 
 	if (ar->pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP) {
 		if (test_bit(ar->cfg_rx_chainmask, &cap->adfs_chain_mask)) {
@@ -18178,3 +18206,36 @@ void ath12k_mac_background_dfs_event(str
 		ar->agile_chandef.chan = NULL;
 	}
 }
+
+static int ath12k_get_beacon_hw_ratecode(struct ath12k *ar,
+					 struct ieee80211_bss_conf *link_conf,
+					 enum nl80211_band band)
+{
+	u8 beacon_rate_idx;
+	u16 bitrate;
+	int beacon_hw_rate_code = 0;
+	int he_rate;
+
+	if (link_conf->beacon_tx_rate.control[band].legacy) {
+		beacon_rate_idx = ffs(link_conf->beacon_tx_rate.control[band].legacy);
+		beacon_rate_idx -= 1;
+
+		if (band == NL80211_BAND_5GHZ || band == NL80211_BAND_6GHZ)
+			beacon_rate_idx += ATH12K_MAC_FIRST_OFDM_RATE_IDX;
+		if (beacon_rate_idx < ARRAY_SIZE(ath12k_legacy_rates)) {
+			bitrate = ath12k_legacy_rates[beacon_rate_idx].bitrate;
+			beacon_hw_rate_code = ath12k_mac_get_rate_hw_value(bitrate);
+		}
+	}
+
+	if (ath12k_mac_bitrate_mask_num_he_rates(ar, band, &link_conf->beacon_tx_rate) == 1) {
+		for (int nss = 0; nss < ARRAY_SIZE(link_conf->beacon_tx_rate.control[band].he_mcs); nss++) {
+			if (hweight16(link_conf->beacon_tx_rate.control[band].he_mcs[nss]) == 1) {
+				he_rate = ffs(link_conf->beacon_tx_rate.control[band].he_mcs[nss]) - 1;
+				beacon_hw_rate_code = ATH12K_HW_RATE_CODE(he_rate, nss, WMI_RATE_PREAMBLE_HE);
+			}
+		}
+	}
+
+	return beacon_hw_rate_code;
+}
