--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -16666,7 +16666,7 @@ static int ath12k_setup_per_hw_if_comb(s
 
 }
 static struct ieee80211_chans_per_hw *
-ath12k_setup_per_hw_chan(struct ath12k *ar)
+ath12k_setup_per_hw_chan(struct ath12k *ar, struct wiphy_radio_freq_range *freq)
 {
 	struct ieee80211_chans_per_hw *chans;
 	struct ieee80211_supported_band *band;
@@ -16705,6 +16705,9 @@ ath12k_setup_per_hw_chan(struct ath12k *
 		freq_high = ATH12K_MAX_6G_FREQ;
 	}
 
+	freq->start_freq = freq_low * 1000;
+	freq->end_freq = freq_high * 1000;
+
 	n_channels = ath12k_reg_get_num_chans_in_band(ar, band, freq_low, freq_high);
 	chan_sz = struct_size(chans, chans, n_channels);
 	chans = kzalloc(chan_sz, GFP_KERNEL);
@@ -16728,20 +16731,41 @@ static int ath12k_alloc_per_hw_chans(str
 	struct ieee80211_chans_per_hw **chans;
 	struct ath12k *ar;
 	struct ieee80211_hw *hw = ah->hw;
+	struct wiphy_radio *radio;
+	struct wiphy_radio_freq_range *freq;
+	struct device *dev;
 	int i;
+
 	ar = ah->radio;
+	dev = ar->ab->dev;
+	radio = devm_kcalloc(dev, ah->num_radio, sizeof(*radio), GFP_KERNEL);
+	if (!radio)
+		return -ENOMEM;
+
+	freq = devm_kcalloc(dev, ah->num_radio, sizeof(*freq), GFP_KERNEL);
+	if (!freq)
+		return -ENOMEM;
 
 	chans = kzalloc(sizeof(*chans) * ah->num_radio,
 			GFP_KERNEL);
 	if (!chans)
 		return -ENOMEM;
 
+	hw->wiphy->radio = radio;
+	hw->wiphy->n_radio = ah->num_radio;
+
 	for (i = 0; i < ah->num_radio; i++) {
-		chans[i] = ath12k_setup_per_hw_chan(ar);
+		radio->freq_range = freq;
+		radio->n_freq_range = 1;
+		radio->iface_combinations = hw->wiphy->iface_combinations;
+		radio->n_iface_combinations = hw->wiphy->n_iface_combinations;
+
+		chans[i] = ath12k_setup_per_hw_chan(ar, freq);
 		if (!chans[i])
 			goto err_free;
 		ar++;
-
+		radio++;
+		freq++;
 	}
 	hw->wiphy->hw_chans = chans;
 	hw->wiphy->num_hw = ah->num_radio;
