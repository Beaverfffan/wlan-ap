From 848b6bf0739b74a5bd13026d815620d10bc55f7d Mon Sep 17 00:00:00 2001
From: Avula Sri Charan <quic_asrichar@quicinc.com>
Date: Tue, 4 Jun 2024 22:50:55 +0530
Subject: wifi: ath11k: klock work fixes for ath11k

Changes in coredump.c:

If there is a failure in memory allocation, we should return without
trying to collect the dump as in case of mem allocation failure as
seg_info and segment will be pointing to NULL and deferencing them
will lead to kernel crash.

The dump variable was never initialized and in the current flow
depending on some checks driver may or may not allocate memory for
dump and post this driver will check if dump is pointing to NULL
and return.

But because the variable was never initialized there is a chance that
it might be pointing to some invalid location and driver will end up
accessing it even if the memory is not allocated. Avoid this by
initializing dump to NULL.

Changes on qmi.c:

m3_mem->vaddr is being checked for NULL and yest being passed as
argument to memcpy in skip_m3_alloc.

Moving the NULL check to the begining to avoid this issue.

Patch-depdendency: 194-ath11k-use-dev_coredumpm-API-to-collect-rddm.patch
			
Signed-off-by: Avula Sri Charan <quic_asrichar@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/coredump.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/coredump.c
+++ b/drivers/net/wireless/ath/ath11k/coredump.c
@@ -198,8 +198,10 @@ void ath11k_coredump_download_rddm(struc
 	len = num_seg * sizeof(*segment);
 
 	seg_info = segment = (struct ath11k_dump_segment *)vzalloc(len);
-	if (!seg_info)
+	if (!seg_info) {
 		ath11k_warn(ab, "fail to alloc memory for rddm\n");
+		return;
+	}
 
 	for (i = 0; i < fw_img->entries ; i++) {
 		if (!fw_img->mhi_buf[i].buf)
@@ -288,7 +290,7 @@ void ath11k_coredump_qdss_dump(struct at
 {
 	struct ath11k_dump_segment *segment;
 	int len, num_seg;
-	void *dump;
+	void *dump = NULL;
 
 	num_seg = event_data->mem_seg_len;
 	len = sizeof(*segment);
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -3049,6 +3049,7 @@ static int ath11k_qmi_assign_target_mem_
 			} else {
 				ath11k_dbg(ab, ATH11K_DBG_QMI,
 					   "pageable-addr is not in dt\n");
+				return -EINVAL;
 			}
 
 			ab->qmi.target_mem[idx].paddr =  (phys_addr_t)addr;
@@ -3544,6 +3545,9 @@ static int ath11k_qmi_m3_load(struct ath
 	char path[100];
 	int ret;
 
+	if (m3_mem->vaddr || m3_mem->size)
+		return 0;
+
 	fw = ath11k_core_firmware_request(ab, ATH11K_M3_FILE);
 	if (IS_ERR(fw)) {
 		ret = PTR_ERR(fw);
@@ -3553,9 +3557,6 @@ static int ath11k_qmi_m3_load(struct ath
 		return ret;
 	}
 
-	if (m3_mem->vaddr || m3_mem->size)
-		goto skip_m3_alloc;
-
 	m3_mem->vaddr = dma_alloc_coherent(ab->dev,
 					   fw->size, &m3_mem->paddr,
 					   GFP_KERNEL);
@@ -3566,7 +3567,6 @@ static int ath11k_qmi_m3_load(struct ath
 		return -ENOMEM;
 	}
 
-skip_m3_alloc:
 	memcpy(m3_mem->vaddr, fw->data, fw->size);
 	m3_mem->size = fw->size;
 	release_firmware(fw);
