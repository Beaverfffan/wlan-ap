From bf3ff953967041184526f8dc696768dfe4aac101 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Wed, 25 Oct 2023 21:57:49 +0530
Subject: [PATCH] hostapd: add MLO support for HE-BSS color change event

Currently, HE-BSS color change feature is only supported for non-MLO
scenario. There is a need to support link_id handling during the NL
events in order to support HE-BSS color change events during
Multi-Link operation.

Add link_id support in the NL events and hence enable HE-BSS color
change events for MLO.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 src/ap/hostapd.c                   |   6 ++
 src/drivers/driver.h               |   5 ++
 src/drivers/driver_nl80211.c       |  11 +++
 src/drivers/driver_nl80211_event.c | 105 +++++++++++++++++++++++++----
 4 files changed, 114 insertions(+), 13 deletions(-)

--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -4617,6 +4617,12 @@ int hostapd_fill_cca_settings(struct hos
 
 	settings->counter_offset_beacon = hapd->cca_c_off_beacon;
 	settings->counter_offset_presp = hapd->cca_c_off_proberesp;
+	settings->link_id = -1;
+
+#ifdef CONFIG_IEEE80211BE
+	if (hapd->conf->mld_ap)
+		settings->link_id = hapd->mld_link_id;
+#endif /* CONFIG_IEEE80211BE */
 
 	hostapd_interface_update_fils_ubpr(iface, true);
 
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2811,6 +2811,11 @@ struct cca_settings {
 
 	u16 counter_offset_beacon;
 	u16 counter_offset_presp;
+
+	/**
+	 * link_id: If >=0 indicates the link of the AP MLD to configure
+	 */
+	int link_id;
 };
 
 /* TDLS peer capabilities for send_tdls_mgmt() */
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -11346,6 +11346,17 @@ static int nl80211_switch_color(void *pr
 	}
 
 	nla_nest_end(msg, beacon_cca);
+
+	if (nl80211_link_valid(bss, settings->link_id)) {
+		wpa_printf(MSG_DEBUG, "nl80211: Color change request on link_id=%d",
+			   settings->link_id);
+
+		if (nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, settings->link_id)) {
+			nlmsg_free(msg);
+			return -1;
+		}
+	}
+
 	ret = send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL);
 	if (ret) {
 		wpa_printf(MSG_DEBUG,
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -3831,51 +3831,126 @@ static void nl80211_assoc_comeback(struc
 
 #ifdef CONFIG_IEEE80211AX
 
-static void nl80211_obss_color_collision(struct wpa_driver_nl80211_data *drv,
-					 struct nlattr *tb[])
+static void nl80211_obss_color_collision(struct i802_bss *bss, struct nlattr *tb[])
 {
 	union wpa_event_data data;
+	struct i802_link *mld_link;
+	void *ctx = bss->ctx;
+	int link_id = -1;
 
 	if (!tb[NL80211_ATTR_OBSS_COLOR_BITMAP])
 		return;
 
+	if (tb[NL80211_ATTR_MLO_LINK_ID]) {
+		link_id = nla_get_u8(tb[NL80211_ATTR_MLO_LINK_ID]);
+		mld_link = nl80211_get_link_or_null(bss, link_id);
+		if (!mld_link) {
+			wpa_printf(MSG_DEBUG,
+				   "nl80211: Ignoring BSS color collision event on invalid link id %d",
+				   link_id);
+			return;
+		}
+
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: BSS color collision event for link %d",
+			   link_id);
+		ctx = mld_link->ctx;
+	}
+
 	os_memset(&data, 0, sizeof(data));
 	data.bss_color_collision.bitmap =
 		nla_get_u64(tb[NL80211_ATTR_OBSS_COLOR_BITMAP]);
 
 	wpa_printf(MSG_DEBUG, "nl80211: BSS color collision - bitmap %08llx",
 		   (long long unsigned int) data.bss_color_collision.bitmap);
-	wpa_supplicant_event(drv->ctx, EVENT_BSS_COLOR_COLLISION, &data);
+	wpa_supplicant_event(ctx, EVENT_BSS_COLOR_COLLISION, &data);
 }
 
 
 static void
-nl80211_color_change_announcement_started(struct wpa_driver_nl80211_data *drv)
+nl80211_color_change_announcement_started(struct i802_bss *bss, struct nlattr *tb[])
 {
 	union wpa_event_data data = {};
+	struct i802_link *mld_link;
+	void *ctx = bss->ctx;
+	int link_id = -1;
+
+	if (tb[NL80211_ATTR_MLO_LINK_ID]) {
+		link_id = nla_get_u8(tb[NL80211_ATTR_MLO_LINK_ID]);
+		mld_link = nl80211_get_link_or_null(bss, link_id);
+		if (!mld_link) {
+			wpa_printf(MSG_DEBUG,
+				   "nl80211: Ignoring CCA started event on invalid link id %d",
+				   link_id);
+			return;
+		}
+
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: CCA started event for link %d",
+			   link_id);
+		ctx = mld_link->ctx;
+	}
 
 	wpa_printf(MSG_DEBUG, "nl80211: CCA started");
-	wpa_supplicant_event(drv->ctx, EVENT_CCA_STARTED_NOTIFY, &data);
+	wpa_supplicant_event(ctx, EVENT_CCA_STARTED_NOTIFY, &data);
 }
 
 
 static void
-nl80211_color_change_announcement_aborted(struct wpa_driver_nl80211_data *drv)
+nl80211_color_change_announcement_aborted(struct i802_bss *bss, struct nlattr *tb[])
 {
 	union wpa_event_data data = {};
+	struct i802_link *mld_link;
+	void *ctx = bss->ctx;
+	int link_id = -1;
+
+	if (tb[NL80211_ATTR_MLO_LINK_ID]) {
+		link_id = nla_get_u8(tb[NL80211_ATTR_MLO_LINK_ID]);
+		mld_link = nl80211_get_link_or_null(bss, link_id);
+		if (!mld_link) {
+			wpa_printf(MSG_DEBUG,
+				   "nl80211: Ignoring CCA aborted event on invalid link id %d",
+				   link_id);
+			return;
+		}
+
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: CCA aborted event for link %d",
+			   link_id);
+		ctx = mld_link->ctx;
+	}
 
 	wpa_printf(MSG_DEBUG, "nl80211: CCA aborted");
-	wpa_supplicant_event(drv->ctx, EVENT_CCA_ABORTED_NOTIFY, &data);
+	wpa_supplicant_event(ctx, EVENT_CCA_ABORTED_NOTIFY, &data);
 }
 
 
 static void
-nl80211_color_change_announcement_completed(struct wpa_driver_nl80211_data *drv)
+nl80211_color_change_announcement_completed(struct i802_bss *bss, struct nlattr *tb[])
 {
 	union wpa_event_data data = {};
+	struct i802_link *mld_link;
+	void *ctx = bss->ctx;
+	int link_id = -1;
+
+	if (tb[NL80211_ATTR_MLO_LINK_ID]) {
+		link_id = nla_get_u8(tb[NL80211_ATTR_MLO_LINK_ID]);
+		mld_link = nl80211_get_link_or_null(bss, link_id);
+		if (!mld_link) {
+			wpa_printf(MSG_DEBUG,
+				   "nl80211: Ignoring CCA completed event on invalid link id %d",
+				   link_id);
+			return;
+		}
+
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: CCA completed event for link %d",
+			   link_id);
+		ctx = mld_link->ctx;
+	}
 
 	wpa_printf(MSG_DEBUG, "nl80211: CCA completed");
-	wpa_supplicant_event(drv->ctx, EVENT_CCA_NOTIFY, &data);
+	wpa_supplicant_event(ctx, EVENT_CCA_NOTIFY, &data);
 }
 
 #endif /* CONFIG_IEEE80211AX */
@@ -4145,16 +4220,16 @@ static void do_process_drv_event(struct
 		break;
 #ifdef CONFIG_IEEE80211AX
 	case NL80211_CMD_OBSS_COLOR_COLLISION:
-		nl80211_obss_color_collision(drv, tb);
+		nl80211_obss_color_collision(bss, tb);
 		break;
 	case NL80211_CMD_COLOR_CHANGE_STARTED:
-		nl80211_color_change_announcement_started(drv);
+		nl80211_color_change_announcement_started(bss, tb);
 		break;
 	case NL80211_CMD_COLOR_CHANGE_ABORTED:
-		nl80211_color_change_announcement_aborted(drv);
+		nl80211_color_change_announcement_aborted(bss, tb);
 		break;
 	case NL80211_CMD_COLOR_CHANGE_COMPLETED:
-		nl80211_color_change_announcement_completed(drv);
+		nl80211_color_change_announcement_completed(bss, tb);
 		break;
 #endif /* CONFIG_IEEE80211AX */
 	case NL80211_CMD_UPDATE_HE_MUEDCA_PARAMS:
