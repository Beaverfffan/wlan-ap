From d28ec5e92c3dc250e30d07915ec0e23a1a61e33f Mon Sep 17 00:00:00 2001
From: Naveen S <quic_naves@quicinc.com>
Date: Tue, 26 Mar 2024 12:44:41 +0530
Subject: [PATCH] hostapd: Set NULL for all instances of bss pointers before
 removing bss.

In certain scenarios where the nl80211_remove_link() is used to free
up the links through multiple paths. For example, NL80211_CMD_STOP_AP
removes a bss link and decrements the n_links value and it gets
followed by deinitialisation of all interfaces, the bss struct may get
freed while deinitialising the first interface(2G) and those bss
structs will be accessed during the deinitialisation of other
remaining interfaces(5G, 6G). This happens as respective partner links
still hold the reference to this bss even though it is freed already.

Hence, EVENT_BSS_FREE is used to set NULL in all the partner links
when the bss gets freed on any of the interface deinit sequence.

Signed-off-by: Naveen S <quic_naves@quicinc.com>
---
 src/ap/drv_callbacks.c       |  5 +++++
 src/ap/hostapd.c             | 14 ++++++++++++++
 src/ap/hostapd.h             |  1 +
 src/drivers/driver.h         |  5 +++++
 src/drivers/driver_nl80211.c |  8 ++++++++
 5 files changed, 33 insertions(+)

--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -2527,6 +2527,11 @@ void hostapd_wpa_event(void *ctx, enum w
 		if (link_hapd)
 			hostapd_event_update_cu_param(link_hapd, &data->cu_event);
 		break;
+	case EVENT_BSS_FREE:
+		wpa_printf(MSG_DEBUG, "i802_bss freed on %s",
+			   hapd->conf->iface);
+		hostapd_bss_free(hapd);
+		break;
 	default:
 		wpa_printf(MSG_DEBUG, "Unknown event %d", event);
 		break;
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -5296,4 +5296,18 @@ struct hostapd_data * hostapd_mld_get_fi
 	return mld->fbss;
 }
 
+void hostapd_bss_free(struct hostapd_data *hapd)
+{
+	struct hostapd_data *link_bss = NULL;
+
+	if (!hapd)
+		return;
+
+	hapd->drv_priv = NULL;
+	for_each_partner_bss(link_bss, hapd)
+		link_bss->drv_priv = NULL;
+
+	return;
+}
+
 #endif /* CONFIG_IEEE80211BE */
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -915,4 +915,5 @@ int hostapd_mld_add_link(struct hostapd_
 int hostapd_mld_remove_link(struct hostapd_data *hapd);
 bool hostapd_mld_is_first_bss(struct hostapd_data *hapd);
 struct hostapd_data * hostapd_mld_get_first_bss(struct hostapd_data *hapd);
+void hostapd_bss_free(struct hostapd_data *hapd);
 #endif /* HOSTAPD_H */
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -5975,6 +5975,11 @@ enum wpa_event_type {
 	 */
 
 	EVENT_RX_CRITICAL_UPDATE,
+
+	/**
+	 * EVENT_BSS_FREE - Notification before bss is freed
+	 */
+	EVENT_BSS_FREE,
 };
 
 
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -9192,6 +9192,7 @@ static int wpa_driver_nl80211_if_link_re
 	struct wpa_driver_nl80211_data *drv = bss->drv;
 	struct i802_link *link;
 	int num_links = bss->n_links;
+	void *hapd = bss->ctx;
 
 	wpa_printf(MSG_DEBUG, "nl80211: %s(type=%d ifname=%s num_links=%d) link_id=%d",
 		   __func__, type, ifname, num_links, link_id);
@@ -9209,6 +9210,13 @@ static int wpa_driver_nl80211_if_link_re
 		drv->ctx = bss->ctx;
 
 	if (num_links == 1) {
+		/*
+		 * EVENT_BSS_FREE used to dereference the bss in
+		 * other interfaces as well before removing it
+		 */
+		if (type == WPA_IF_AP_BSS)
+			wpa_supplicant_event(hapd, EVENT_BSS_FREE, NULL);
+
 		wpa_printf(MSG_DEBUG, "nl80211: Only 1 link was there hence remove interface");
 		return wpa_driver_nl80211_if_remove(bss, type, ifname);
 	}
