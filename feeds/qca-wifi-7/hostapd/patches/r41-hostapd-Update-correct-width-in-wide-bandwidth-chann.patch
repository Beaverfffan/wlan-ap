From cf763ede50a8ec2c7e4837fda6674ab164cee7d3 Mon Sep 17 00:00:00 2001
From: Mohan Kumar G <quic_mkumarg@quicinc.com>
Date: Mon, 23 Sep 2024 22:36:05 +0530
Subject: [PATCH] hostapd: Update correct width in wide bandwidth channel
switch

Currently, the new channel width in wide bandwidth channel switch
subfield does not update based on puncturing bitmap during
channel switch.

As per the draft IEEE P802.11be/D7.0 section 35.15.3, the bandwidth
in wide bandwidth channel switch element should include maximum
bandwidth without any disabled channels. The disabled channels
during channel switch is given by puncturing bitmap.

Update the new channel width with maximum bandwidth which does
not include any punctured channels.

Patch-depdendency: r04-005-hostapd-Update-Wide-Bandwidth-Channel-Switch-element.patch

Patch-work: None

Feature: CHANNEL_SWITCH

Signed-off-by: Mohan Kumar G <quic_mkumarg@quicinc.com>
---
 src/ap/ieee802_11.c | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -8439,17 +8439,23 @@ u8 *hostapd_eid_wide_bw_chan_switch(stru
 
 	struct ieee80211_wb_chsw_element *wb_chsw_elem;
 	u8 bw;
+	enum oper_chan_width chan_width = hostapd_get_oper_chwidth(hapd->iface->conf);
 
 	/* bandwidth: 0: 40, 1: 80, 160, 80+80, 4: 320 as per Draft P802.11Revme_D4.0 */
 	switch (hapd->cs_freq_params.bandwidth) {
 	case 40:
 		bw = 0;
+		chan_width = CONF_OPER_CHWIDTH_USE_HT;
 		break;
 	case 80:
 		bw = 1;
+		chan_width = CONF_OPER_CHWIDTH_80MHZ;
 		break;
 	case 160:
 		bw = 1;
+		chan_width = CONF_OPER_CHWIDTH_160MHZ;
+		if (hapd->cs_freq_params.ru_punct_bitmap)
+			break;
 		/* ccfs1 - the channel center frequency index of the 160 MHz channel */
 		ccfs1 = ccfs0;
 		/* ccfs0 - the channel center frequency index of the 80 MHz
@@ -8462,12 +8468,38 @@ u8 *hostapd_eid_wide_bw_chan_switch(stru
 		break;
 	case 320:
 		bw = 4;
+		chan_width = CONF_OPER_CHWIDTH_320MHZ;
 		break;
 	default:
 		/* not valid VHT bandwidth or not in CSA */
 		return eid;
 	}
 
+	/* check max bandwidth without any disabled channels */
+	punct_update_legacy_bw(hapd->cs_freq_params.ru_punct_bitmap,
+			       hapd->cs_freq_params.channel, &chan_width,
+			       &ccfs0, &ccfs1);
+
+	switch (chan_width) {
+	case CONF_OPER_CHWIDTH_USE_HT:
+		/* Wide Bandwidth Channel Switch element is present only
+		 * when the new channel width is wider than 20 MHz */
+		if (ccfs0 == hapd->cs_freq_params.channel)
+			return eid;
+		bw = 0;
+		break;
+	case CONF_OPER_CHWIDTH_80MHZ:
+	case CONF_OPER_CHWIDTH_160MHZ:
+		bw = 1;
+		break;
+	case  CONF_OPER_CHWIDTH_320MHZ:
+		bw = 4;
+		break;
+	default:
+		/* Not valid operation channel bandwidth */
+		return eid;
+	}
+
 	*eid++ = WLAN_EID_WIDE_BW_CHSWITCH;
 	/* Length of Wide Bandwidth Channel Switch element */
 	*eid++ = sizeof(struct ieee80211_wb_chsw_element);
@@ -8603,6 +8635,9 @@ u8 *hostapd_eid_chsw_wrapper(struct host
 		pos = hostapd_eid_bw_indication(hapd, pos, ccfs0, ccfs1);
 #endif /*CONFIG_IEEE80211BE */
 
+	if (length_pos == pos - 1)
+		return eid;
+
 	*length_pos = pos - (eid + 2);
 	return pos;
 }
@@ -9836,7 +9871,7 @@ static void punct_update_legacy_bw_80(u8
 
 	switch (bitmap) {
 	case 0x6:
-		*seg0 = 0;
+		*seg0 = pri_chan;
 		return;
 	case 0x8:
 	case 0x4:
@@ -9857,7 +9892,7 @@ static void punct_update_legacy_bw_80(u8
 		sec_chan = pri_chan - 4;
 
 	if (bitmap & BIT((sec_chan - first_chan) / 4))
-		*seg0 = 0;
+		*seg0 = pri_chan;
 }
 
 
