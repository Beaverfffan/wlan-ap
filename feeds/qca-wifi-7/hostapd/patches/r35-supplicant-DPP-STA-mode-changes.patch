From 35d28ce126b5939ae0eb42f379f79d292267989d Mon Sep 17 00:00:00 2001
From: Arunpandi Kannan <quic_arunpand@quicinc.com>
Date: Mon, 8 Jul 2024 12:37:13 +0530
Subject: [PATCH] wpa_supplicant: DPP STA mode changes

Cancel any AP scan before starting off channel tx for DPP chirping.
DPP chirping will invoke off channel scan in driver. Cancel any ongoing
AP mode scan before issuing DPP chirping.

Use channels supported in current mode for DPP chirping and reduce the
retry time for DPP chirping to 3 seconds.

Do not cancel off cannel scan for each DPP packet exchange, since scan
cancel takes some time to complete in driver and FW, it might cause DPP
session to expire. Due to this DPP exchange wil failure.

Signed-off-by: Arunpandi Kannan <quic_arunpand@quicinc.com>
---
 wpa_supplicant/ctrl_iface.c     |  4 +-
 wpa_supplicant/dpp_supplicant.c | 76 +++++++++++++++++++++++----------
 wpa_supplicant/dpp_supplicant.h |  2 +-
 3 files changed, 56 insertions(+), 26 deletions(-)

diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index d04cbcb..68fd6b8 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -8776,7 +8776,7 @@ static void wpa_supplicant_ctrl_iface_flush(struct wpa_supplicant *wpa_s)
 	wpa_s->dpp_resp_max_tries = 0;
 	wpa_s->dpp_resp_retry_time = 0;
 #ifdef CONFIG_DPP2
-	wpas_dpp_chirp_stop(wpa_s);
+	wpas_dpp_chirp_stop(wpa_s, 0);
 	wpa_s->dpp_pfs_fallback = 0;
 #endif /* CONFIG_DPP2 */
 #ifdef CONFIG_DPP3
@@ -12917,7 +12917,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 		if (wpas_dpp_chirp(wpa_s, buf + 9) < 0)
 			reply_len = -1;
 	} else if (os_strcmp(buf, "DPP_STOP_CHIRP") == 0) {
-		wpas_dpp_chirp_stop(wpa_s);
+		wpas_dpp_chirp_stop(wpa_s, 0);
 	} else if (os_strncmp(buf, "DPP_RECONFIG ", 13) == 0) {
 		if (wpas_dpp_reconfig(wpa_s, buf + 13) < 0)
 			reply_len = -1;
diff --git a/wpa_supplicant/dpp_supplicant.c b/wpa_supplicant/dpp_supplicant.c
index afadd78..1978979 100644
--- a/wpa_supplicant/dpp_supplicant.c
+++ b/wpa_supplicant/dpp_supplicant.c
@@ -1120,7 +1120,7 @@ static void wpas_dpp_rx_auth_req(struct wpa_supplicant *wpa_s, const u8 *src,
 		   MAC2STR(src));
 
 #ifdef CONFIG_DPP2
-	wpas_dpp_chirp_stop(wpa_s);
+	wpas_dpp_chirp_stop(wpa_s, 1);
 #endif /* CONFIG_DPP2 */
 
 	r_bootstrap = dpp_get_attr(buf, len, DPP_ATTR_R_BOOTSTRAP_KEY_HASH,
@@ -1860,7 +1860,6 @@ static void wpas_dpp_start_gas_client(struct wpa_supplicant *wpa_s)
 	int *supp_op_classes;
 
 	wpa_s->dpp_gas_client = 1;
-	offchannel_send_action_done(wpa_s);
 	wpas_dpp_listen_stop(wpa_s);
 
 	supp_op_classes = wpas_supp_op_classes(wpa_s);
@@ -2259,7 +2258,7 @@ static void wpas_dpp_remove_bi(void *ctx, struct dpp_bootstrap_info *bi)
 	struct wpa_supplicant *wpa_s = ctx;
 
 	if (bi == wpa_s->dpp_chirp_bi)
-		wpas_dpp_chirp_stop(wpa_s);
+		wpas_dpp_chirp_stop(wpa_s, 0);
 }
 
 
@@ -2493,7 +2492,7 @@ wpas_dpp_rx_reconfig_auth_req(struct wpa_supplicant *wpa_s, const u8 *src,
 	os_memcpy(auth->peer_mac_addr, src, ETH_ALEN);
 	wpa_s->dpp_auth = auth;
 
-	wpas_dpp_chirp_stop(wpa_s);
+	wpas_dpp_chirp_stop(wpa_s, 1);
 
 	wpa_msg(wpa_s, MSG_INFO, DPP_EVENT_TX "dst=" MACSTR " freq=%u type=%d",
 		MAC2STR(src), freq, DPP_PA_RECONFIG_AUTH_RESP);
@@ -4724,7 +4723,7 @@ void wpas_dpp_deinit(struct wpa_supplicant *wpa_s)
 	eloop_cancel_timeout(wpas_dpp_build_csr, wpa_s, NULL);
 	dpp_pfs_free(wpa_s->dpp_pfs);
 	wpa_s->dpp_pfs = NULL;
-	wpas_dpp_chirp_stop(wpa_s);
+	wpas_dpp_chirp_stop(wpa_s, 0);
 	dpp_free_reconfig_id(wpa_s->dpp_reconfig_id);
 	wpa_s->dpp_reconfig_id = NULL;
 #endif /* CONFIG_DPP2 */
@@ -4888,14 +4887,15 @@ static void wpas_dpp_chirp_tx_status(struct wpa_supplicant *wpa_s,
 			   wpa_s->dpp_chirp_freq);
 		if (eloop_register_timeout(0, 0, wpas_dpp_chirp_next,
 					   wpa_s, NULL) < 0)
-			wpas_dpp_chirp_stop(wpa_s);
+			wpas_dpp_chirp_stop(wpa_s, 0);
 		return;
 	}
 
 	wpa_printf(MSG_DEBUG, "DPP: Chirp send completed - wait for response");
+	eloop_cancel_timeout(wpas_dpp_chirp_timeout, wpa_s, NULL);
 	if (eloop_register_timeout(2, 0, wpas_dpp_chirp_timeout,
 				   wpa_s, NULL) < 0)
-		wpas_dpp_chirp_stop(wpa_s);
+		wpas_dpp_chirp_stop(wpa_s, 0);
 }
 
 
@@ -4904,6 +4904,7 @@ static void wpas_dpp_chirp_start(struct wpa_supplicant *wpa_s)
 	struct wpabuf *msg, *announce = NULL;
 	int type;
 
+	wpas_abort_ongoing_scan(wpa_s);
 	msg = wpa_s->dpp_presence_announcement;
 	type = DPP_PA_PRESENCE_ANNOUNCEMENT;
 	if (!msg) {
@@ -4933,8 +4934,10 @@ static void wpas_dpp_chirp_start(struct wpa_supplicant *wpa_s)
 		    wpa_s->own_addr, broadcast,
 		    wpabuf_head(msg), wpabuf_len(msg),
 		    2000, wpas_dpp_chirp_tx_status, 0) < 0)
-		wpas_dpp_chirp_stop(wpa_s);
+		wpas_dpp_chirp_stop(wpa_s, 0);
 
+	if (eloop_register_timeout(2, 0, wpas_dpp_chirp_timeout, wpa_s, NULL) < 0)
+		wpas_dpp_chirp_stop(wpa_s, 0);
 	wpabuf_free(announce);
 }
 
@@ -4947,7 +4950,7 @@ static int * wpas_dpp_presence_ann_channels(struct wpa_supplicant *wpa_s,
 	int c;
 	struct wpa_bss *bss;
 	bool chan6 = wpa_s->hw.modes == NULL;
-	int *freqs = NULL;
+	int *freqs = NULL, *dpp_freqs = NULL;
 
 	/* Channels from own bootstrapping info */
 	if (bi) {
@@ -4994,6 +4997,22 @@ static int * wpas_dpp_presence_ann_channels(struct wpa_supplicant *wpa_s,
 			int_array_add_unique(&freqs, 5220);
 	}
 
+	mode = get_mode(wpa_s->hw.modes, wpa_s->hw.num_modes,
+			HOSTAPD_MODE_IEEE80211A, true);
+	if (mode) {
+		for (c = 0; c < mode->num_channels; c++) {
+			struct hostapd_channel_data *chan = &mode->channels[c];
+
+			if ((chan->flag & (HOSTAPD_CHAN_DISABLED |
+					  HOSTAPD_CHAN_RADAR)) ||
+			    chan->freq != 6195)
+				continue;
+
+			int_array_add_unique(&freqs, 6195);
+			break;
+		}
+	}
+
 	mode = get_mode(wpa_s->hw.modes, wpa_s->hw.num_modes,
 			HOSTAPD_MODE_IEEE80211AD, false);
 	if (mode) {
@@ -5016,6 +5035,17 @@ static int * wpas_dpp_presence_ann_channels(struct wpa_supplicant *wpa_s,
 			int_array_add_unique(&freqs, bss->freq);
 	}
 
+	if (wpa_s->conf->freq_list && freqs) {
+		for (c = 0; freqs[c]; c++) {
+			for (i = 0; wpa_s->conf->freq_list[i]; i++) {
+				if (freqs[c] == wpa_s->conf->freq_list[i]) {
+					int_array_add_unique(&dpp_freqs, freqs[c]);
+					break;
+				}
+			}
+		}
+		return dpp_freqs;
+	}
 	return freqs;
 }
 
@@ -5035,7 +5065,7 @@ static void wpas_dpp_chirp_scan_res_handler(struct wpa_supplicant *wpa_s,
 
 	if (!wpa_s->dpp_chirp_freqs ||
 	    eloop_register_timeout(0, 0, wpas_dpp_chirp_next, wpa_s, NULL) < 0)
-		wpas_dpp_chirp_stop(wpa_s);
+		wpas_dpp_chirp_stop(wpa_s, 0);
 }
 
 
@@ -5056,7 +5086,7 @@ static void wpas_dpp_chirp_next(void *eloop_ctx, void *timeout_ctx)
 				if (eloop_register_timeout(1, 0,
 							   wpas_dpp_chirp_next,
 							   wpa_s, NULL) < 0) {
-					wpas_dpp_chirp_stop(wpa_s);
+					wpas_dpp_chirp_stop(wpa_s, 0);
 					return;
 				}
 				return;
@@ -5091,25 +5121,25 @@ static void wpas_dpp_chirp_next(void *eloop_ctx, void *timeout_ctx)
 			if (wpa_s->dpp_chirp_iter <= 0) {
 				wpa_printf(MSG_DEBUG,
 					   "DPP: Chirping iterations completed");
-				wpas_dpp_chirp_stop(wpa_s);
+				wpas_dpp_chirp_stop(wpa_s, 0);
 				return;
 			}
 			wpa_s->dpp_chirp_freq = 0;
 			wpa_s->dpp_chirp_scan_done = 0;
-			if (eloop_register_timeout(30, 0, wpas_dpp_chirp_next,
+			if (eloop_register_timeout(3, 0, wpas_dpp_chirp_next,
 						   wpa_s, NULL) < 0) {
-				wpas_dpp_chirp_stop(wpa_s);
+				wpas_dpp_chirp_stop(wpa_s, 0);
 				return;
 			}
 			if (wpa_s->dpp_chirp_listen) {
 				wpa_printf(MSG_DEBUG,
-					   "DPP: Listen on %d MHz during chirp 30 second wait",
+					   "DPP: Listen on %d MHz during chirp 3 second wait",
 					wpa_s->dpp_chirp_listen);
 				wpas_dpp_listen_start(wpa_s,
 						      wpa_s->dpp_chirp_listen);
 			} else {
 				wpa_printf(MSG_DEBUG,
-					   "DPP: Wait 30 seconds before starting the next chirping round");
+					   "DPP: Wait 3 seconds before starting the next chirping round");
 			}
 			return;
 		}
@@ -5122,7 +5152,7 @@ static void wpas_dpp_chirp_next(void *eloop_ctx, void *timeout_ctx)
 int wpas_dpp_chirp(struct wpa_supplicant *wpa_s, const char *cmd)
 {
 	const char *pos;
-	int iter = 1, listen_freq = 0;
+	int iter = 3, listen_freq = 0;
 	struct dpp_bootstrap_info *bi;
 
 	pos = os_strstr(cmd, " own=");
@@ -5150,7 +5180,7 @@ int wpas_dpp_chirp(struct wpa_supplicant *wpa_s, const char *cmd)
 			return -1;
 	}
 
-	wpas_dpp_chirp_stop(wpa_s);
+	wpas_dpp_chirp_stop(wpa_s, 0);
 	wpa_s->dpp_allowed_roles = DPP_CAPAB_ENROLLEE;
 	wpa_s->dpp_netrole = DPP_NETROLE_STA;
 	wpa_s->dpp_qr_mutual = 0;
@@ -5167,10 +5197,10 @@ int wpas_dpp_chirp(struct wpa_supplicant *wpa_s, const char *cmd)
 }
 
 
-void wpas_dpp_chirp_stop(struct wpa_supplicant *wpa_s)
+void wpas_dpp_chirp_stop(struct wpa_supplicant *wpa_s, int is_dpp_active)
 {
-	if (wpa_s->dpp_presence_announcement ||
-	    wpa_s->dpp_reconfig_ssid) {
+	if ((wpa_s->dpp_presence_announcement ||
+	    wpa_s->dpp_reconfig_ssid) && !is_dpp_active) {
 		offchannel_send_action_done(wpa_s);
 		wpa_msg(wpa_s, MSG_INFO, DPP_EVENT_CHIRP_STOPPED);
 	}
@@ -5235,7 +5265,7 @@ int wpas_dpp_reconfig(struct wpa_supplicant *wpa_s, const char *cmd)
 		wpa_supplicant_deauthenticate(
 			wpa_s, WLAN_REASON_DEAUTH_LEAVING);
 	}
-	wpas_dpp_chirp_stop(wpa_s);
+	wpas_dpp_chirp_stop(wpa_s, 0);
 	wpa_s->dpp_allowed_roles = DPP_CAPAB_ENROLLEE;
 	wpa_s->dpp_netrole = DPP_NETROLE_STA;
 	wpa_s->dpp_qr_mutual = 0;
@@ -5552,7 +5582,7 @@ int wpas_dpp_push_button(struct wpa_supplicant *wpa_s, const char *cmd)
 		return -1;
 	wpas_dpp_push_button_stop(wpa_s);
 	wpas_dpp_stop(wpa_s);
-	wpas_dpp_chirp_stop(wpa_s);
+	wpas_dpp_chirp_stop(wpa_s, 0);
 
 	os_get_reltime(&wpa_s->dpp_pb_time);
 
diff --git a/wpa_supplicant/dpp_supplicant.h b/wpa_supplicant/dpp_supplicant.h
index e2bdd9d..629e7d7 100644
--- a/wpa_supplicant/dpp_supplicant.h
+++ b/wpa_supplicant/dpp_supplicant.h
@@ -40,7 +40,7 @@ void wpas_dpp_connected(struct wpa_supplicant *wpa_s);
 void wpas_dpp_send_conn_status_result(struct wpa_supplicant *wpa_s,
 				      enum dpp_status_error result);
 int wpas_dpp_chirp(struct wpa_supplicant *wpa_s, const char *cmd);
-void wpas_dpp_chirp_stop(struct wpa_supplicant *wpa_s);
+void wpas_dpp_chirp_stop(struct wpa_supplicant *wpa_s, int is_dpp_active);
 int wpas_dpp_reconfig(struct wpa_supplicant *wpa_s, const char *cmd);
 int wpas_dpp_ca_set(struct wpa_supplicant *wpa_s, const char *cmd);
 int wpas_dpp_conf_set(struct wpa_supplicant *wpa_s, const char *cmd);
-- 
2.34.1

