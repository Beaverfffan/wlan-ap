From 407d25bf2d1ed0b822ee7949353c0b50b02a77e9 Mon Sep 17 00:00:00 2001
From: Hari Naraayana Desikan Kannan <quic_hnaraaya@quicinc.com>
Date: Mon, 1 Apr 2024 14:35:37 +0530
Subject: [PATCH] hostapd: Fix ACS Behavior for Channel Selection

The current ACS algorithm incorrectly returns success even when there is
no survey list, leading to improper interference factor calculation.
Additionally, it treats 0 as a valid interference factor, which affects
channel selection judgment. Furthermore, the primary channel bitmap is
always set to 0, potentially causing  primary channel to be punctured if
ACS selects a different best channel within the same segment.

To address this issue ,
   1. Return success only when the survey list is not empty.
   2. Ignore interference factor 0.
   3. Select the right bitmap within the segment.

By considering only non-zero interference factor from surevey list,
we compute an accurate average factor. The derived puncturing bitmap
avoids puncturing the primary channel.

Signed-off-by: Hari Naraayana Desikan Kannan <quic_hnaraaya@quicinc.com>
---
 src/ap/acs.c | 43 +++++++++++++++++++++++++------------------
 1 file changed, 25 insertions(+), 18 deletions(-)

diff --git a/src/ap/acs.c b/src/ap/acs.c
index 995bffa..b096bad 100644
--- a/src/ap/acs.c
+++ b/src/ap/acs.c
@@ -93,7 +93,7 @@
  * calculated easily.
  * ---
  * (busy time - tx time) / (active time - tx time) *
- *    2^(10^(chan_nf/10) + 10^(band_min_nf/10))
+ *    2^(10^(chan_nf/10) - 10^(band_min_nf/10))
  * ---
  *
  * However to account for cases where busy/rx time is 0 (channel load is then
@@ -101,7 +101,7 @@
  * channel with lower noise floor is preferred. The equation becomes:
  * ---
  * 10^(chan_nf/5) + (busy time - tx time) / (active time - tx time) *
- *    2^(10^(chan_nf/10) + 10^(band_min_nf/10))
+ *    2^(10^(chan_nf/10) - 10^(band_min_nf/10))
  * ---
  *
  * All this "interference factor" is purely subjective and only time
@@ -258,7 +258,7 @@ struct bw_item {
 static const struct bw_item bw_40[] = {
 	{ 5180, 5200, 38 }, { 5220, 5240, 46 }, { 5260, 5280, 54 },
 	{ 5300, 5320, 62 }, { 5500, 5520, 102 }, { 5540, 5560, 110 },
-	{ 5580, 5600, 110 }, { 5620, 5640, 126}, { 5660, 5680, 134 },
+	{ 5580, 5600, 118 }, { 5620, 5640, 126}, { 5660, 5680, 134 },
 	{ 5700, 5720, 142 }, { 5745, 5765, 151 }, { 5785, 5805, 159 },
 	{ 5825, 5845, 167 }, { 5865, 5885, 175 },
 	{ 5955, 5975, 3 }, { 5995, 6015, 11 }, { 6035, 6055, 19 },
@@ -550,7 +550,7 @@ static int acs_survey_list_is_sufficient(struct hostapd_channel_data *chan)
 	}
 
 	if (ret == -1)
-		ret = 1; /* no survey list entries */
+		ret = 0; /* no survey list entries */
 
 	if (!ret) {
 		wpa_printf(MSG_INFO,
@@ -855,6 +855,7 @@ acs_find_6g_psc_chan_mode(struct hostapd_iface *iface,
 	int i, j, start_freq = 0, freq_match_size = 0;
 	unsigned int k;
 	int *start_freq_list = NULL;
+	int index_primary = 0;
 
 	for (i = 0; i < mode->num_channels; i++) {
 		double total_weight;
@@ -884,9 +885,7 @@ acs_find_6g_psc_chan_mode(struct hostapd_iface *iface,
 							 &freq_match_size);
 		for (int i = 0; i < freq_match_size; i++) {
 			factor = 0;
-			if (acs_usable_chan(chan))
-				factor = chan->interference_factor;
-			total_weight = 1;
+			total_weight = 0;
 
 			/* Start index from -1 because all the PSC channels are located in
 			 * secondary 20MHz of primary 40MHz.
@@ -906,7 +905,8 @@ acs_find_6g_psc_chan_mode(struct hostapd_iface *iface,
 					break;
 				}
 
-				if (acs_usable_chan(adj_chan)) {
+				if (acs_usable_chan(adj_chan) &&
+				    adj_chan->interference_factor > 0) {
 					factor += adj_chan->interference_factor;
 					total_weight += 1;
 				}
@@ -943,7 +943,8 @@ acs_find_6g_psc_chan_mode(struct hostapd_iface *iface,
 			}
 
 			if (acs_usable_chan(chan) &&
-			    (!*ideal_chan || factor < *ideal_factor)) {
+			    (*ideal_factor == 0 ||
+			     factor < *ideal_factor)) {
 				/* reset puncturing bitmap for
 				 * the previous ideal channel
 				 */
@@ -952,11 +953,13 @@ acs_find_6g_psc_chan_mode(struct hostapd_iface *iface,
 
 				*ideal_factor = factor;
 				*ideal_chan = chan;
+				index_primary = (chan->freq - start_freq_list[i]) / 20;
 #ifdef CONFIG_IEEE80211BE
 				if (iface->conf->ieee80211be)
 					acs_update_puncturing_bitmap(iface, mode, bw,
 								     n_chans, chan,
-								     factor, 0);
+								     factor,
+								     index_primary);
 #endif /* CONFIG_IEEE80211BE */
 			}
 		}
@@ -981,6 +984,7 @@ acs_find_ideal_chan_mode(struct hostapd_iface *iface,
 	int i, j, start_freq = 0, freq_match_size = 0;
 	unsigned int k;
 	int *start_freq_list = NULL;
+	int index_primary = 0;
 
 	for (i = 0; i < mode->num_channels; i++) {
 		double total_weight;
@@ -1076,9 +1080,7 @@ acs_find_ideal_chan_mode(struct hostapd_iface *iface,
 							 &freq_match_size);
 		for (int i = 0; i < freq_match_size; i++) {
 			factor = 0;
-			if (acs_usable_chan(chan))
-				factor = chan->interference_factor;
-			total_weight = 1;
+			total_weight = 0;
 
 			/* 5GHz is supported for 240Mhz and
 			 * so reducing number of channels
@@ -1101,9 +1103,11 @@ acs_find_ideal_chan_mode(struct hostapd_iface *iface,
 					break;
 				}
 
-				if (acs_usable_chan(adj_chan)) {
+				if (acs_usable_chan(adj_chan) &&
+				    adj_chan->interference_factor > 0) {
 					factor += adj_chan->interference_factor;
 					total_weight += 1;
+					update_best = true;
 				} else {
 					update_best = false;
 				}
@@ -1203,21 +1207,24 @@ acs_find_ideal_chan_mode(struct hostapd_iface *iface,
 			}
 
 			if (acs_usable_chan(chan) &&
-			    (!*ideal_chan || factor < *ideal_factor)) {
-				/* Reset puncturing bitmap for the previous ideal
-				 * channel
+			    (*ideal_factor == 0 ||
+			     factor < *ideal_factor)) {
+				/* Reset puncturing bitmap for the previous
+				 * ideal channel
 				 */
 				if (*ideal_chan)
 					(*ideal_chan)->punct_bitmap = 0;
 
 				*ideal_factor = factor;
 				*ideal_chan = chan;
+				index_primary = (chan->freq - start_freq_list[i]) / 20;
 
 #ifdef CONFIG_IEEE80211BE
 				if (iface->conf->ieee80211be)
 					acs_update_puncturing_bitmap(iface, mode, bw,
 								     n_chans, chan,
-								     factor, 0);
+								     factor,
+								     index_primary);
 #endif /* CONFIG_IEEE80211BE */
 			}
 		}
-- 
2.34.1

