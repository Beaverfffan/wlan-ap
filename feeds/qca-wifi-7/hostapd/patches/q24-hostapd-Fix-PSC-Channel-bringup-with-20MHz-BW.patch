From 6e93a0f2f3bca30005e0eb248450e746f0660afd Mon Sep 17 00:00:00 2001
From: Hari Naraayana Desikan Kannan <quic_hnaraaya@quicinc.com>
Date: Wed, 21 Feb 2024 21:28:28 +0530
Subject: [PATCH] hostapd: Fix PSC Channel bringup with 20MHz BW.

Address the issue that prevents successful bringup in 6 GHz PSC channels
on 20 MHz bandwidth due to skipping of the 20 MHz channel
in the Automatic Channel Selection (ACS) procedure.

This change will allow any channel to be configured in any bandwidth,
as per the ACS channel list, thereby offering greater versatility
in channel selection

Signed-off-by: Hari Naraayana Desikan Kannan <quic_hnaraaya@quicinc.com>
---
 src/ap/acs.c | 428 +++++++++++++++++++++++++++++----------------------
 1 file changed, 245 insertions(+), 183 deletions(-)

--- a/src/ap/acs.c
+++ b/src/ap/acs.c
@@ -288,9 +288,9 @@ static const struct bw_item bw_160[] = {
 	{ 6755, 6895, 175 }, { 6915, 7055, 207 }, { -1, -1, -1 }
 };
 static const struct bw_item bw_320[] = {
-	{ 5955, 6255, 31 },  { 6115, 6415, 63 }, { 6275, 6575, 95 },
-	{ 6435, 6735, 127 }, { 6595, 6895, 159}, { 6755, 7055, 191 },
-	{ -1, -1, -1 }
+	{ 5500, 5720, 130 },  { 5955, 6255, 31 },  { 6115, 6415, 63 },
+	{ 6275, 6575, 95 }, { 6435, 6735, 127 }, { 6595, 6895, 159},
+	{ 6755, 7055, 191 }, { -1, -1, -1 }
 };
 static const struct bw_item *bw_desc[] = {
 	[ACS_BW40] = bw_40,
@@ -435,7 +435,8 @@ static bool acs_usable_bw_chan(const str
 	unsigned int i = 0;
 
 	while (bw_desc[bw][i].first != -1) {
-		if (chan->freq == bw_desc[bw][i].first)
+		if (chan->freq >= bw_desc[bw][i].first &&
+		    chan->freq <= bw_desc[bw][i].last)
 			return true;
 		i++;
 	}
@@ -459,6 +460,51 @@ static int acs_get_bw_center_chan(int fr
 }
 
 
+static int *acs_get_bw_start_chan(u32 bw, int freq, int *result_size)
+{
+	int *freq_start_list = NULL;
+	enum bw_type bandwidth_type;
+	*result_size = 0;
+
+	switch (bw) {
+	case 40:
+		bandwidth_type = ACS_BW40;
+		break;
+	case 80:
+		bandwidth_type = ACS_BW80;
+		break;
+	case 160:
+		bandwidth_type = ACS_BW160;
+		break;
+	case 320:
+		bandwidth_type = ACS_BW320;
+		break;
+	default:
+		wpa_printf(MSG_INFO,
+			   "ACS: BW=%d not listed", bw);
+		return NULL;
+	}
+
+	for (int i = 0; bw_desc[bandwidth_type][i].first != -1; ++i) {
+		if (freq >= bw_desc[bandwidth_type][i].first &&
+		    freq <= bw_desc[bandwidth_type][i].last) {
+			freq_start_list = os_realloc(freq_start_list,
+						     (*result_size + 1) * sizeof(int));
+			if (!freq_start_list) {
+				os_free(freq_start_list);
+				*result_size = 0;
+				return NULL;
+			}
+
+			freq_start_list[*result_size] =
+				bw_desc[bandwidth_type][i].first;
+			++(*result_size);
+		}
+	}
+
+	return freq_start_list;
+}
+
 static int acs_survey_is_sufficient(struct freq_survey *survey)
 {
 	if (!(survey->filled & SURVEY_HAS_NF)) {
@@ -803,8 +849,9 @@ acs_find_6g_psc_chan_mode(struct hostapd
 {
 	struct hostapd_channel_data *chan, *adj_chan = NULL;
 	long double factor;
-	int i, j;
+	int i, j, start_freq = 0, freq_match_size = 0;
 	unsigned int k;
+	int *start_freq_list = NULL;
 
 	for (i = 0; i < mode->num_channels; i++) {
 		double total_weight;
@@ -830,79 +877,88 @@ acs_find_6g_psc_chan_mode(struct hostapd
 			continue;
 		}
 
-		factor = 0;
-		if (acs_usable_chan(chan))
-			factor = chan->interference_factor;
-		total_weight = 1;
-
-		/* Start index from -1 because all the PSC channels are located in
-		 * secondary 20MHz of primary 40MHz. Ex: CH33 - CH61 has 160MHz BW, PSC
-		 * CH37 which is secondary 20MHz of primary 40MHz.
-		 */
+		start_freq_list =  acs_get_bw_start_chan(bw, chan->freq,
+							 &freq_match_size);
+		for (int i = 0; i < freq_match_size; i++) {
+			factor = 0;
+			if (acs_usable_chan(chan))
+				factor = chan->interference_factor;
+			total_weight = 1;
+
+			/* Start index from -1 because all the PSC channels are located in
+			 * secondary 20MHz of primary 40MHz.
+			 * Ex: CH33 - CH61 has 160MHz BW, PSC CH37 which is secondary
+			 * 20MHz of primary 40MHz.
+			 */
+			start_freq = start_freq_list[i];
+			for (j = 0; j < n_chans; j++) {
+				adj_chan = acs_find_chan(iface, start_freq + (j * 20));
+				if (!adj_chan)
+					break;
 
-		for (j = -1; j < n_chans; j++) {
-			adj_chan = acs_find_chan(iface, chan->freq + (j * 20));
-			if (!adj_chan)
-				break;
+				if (!chan_bw_allowed(adj_chan, bw, 1, 0)) {
+					wpa_printf(MSG_DEBUG,
+						   "ACS: PRI Channel %d: secondary channel %d BW %u is not supported",
+						   chan->chan, adj_chan->chan, bw);
+					break;
+				}
 
-			if (!chan_bw_allowed(adj_chan, bw, 1, 0)) {
-				wpa_printf(MSG_DEBUG,
-					   "ACS: PRI Channel %d: secondary channel %d BW %u is not supported",
-					   chan->chan, adj_chan->chan, bw);
-				break;
+				if (acs_usable_chan(adj_chan)) {
+					factor += adj_chan->interference_factor;
+					total_weight += 1;
+				}
 			}
 
-			if (acs_usable_chan(adj_chan)) {
-				factor += adj_chan->interference_factor;
-				total_weight += 1;
+			if (j != n_chans) {
+				wpa_printf(MSG_DEBUG,
+					   "ACS: Channel %d: not enough bandwidth",
+					   chan->chan);
+				continue;
 			}
-		}
 
-		if (j != n_chans) {
-			wpa_printf(MSG_DEBUG, "ACS: Channel %d: not enough bandwidth",
-				   chan->chan);
-			continue;
-		}
+			factor /= total_weight;
 
-		factor /= total_weight;
-
-		bias = NULL;
-		if (iface->conf->acs_chan_bias) {
-			for (k = 0; k < iface->conf->num_acs_chan_bias; k++) {
-				bias = &iface->conf->acs_chan_bias[k];
-				if (bias->channel == chan->chan)
-					break;
-				bias = NULL;
+			bias = NULL;
+			if (iface->conf->acs_chan_bias) {
+				for (k = 0; k < iface->conf->num_acs_chan_bias; k++) {
+					bias = &iface->conf->acs_chan_bias[k];
+					if (bias->channel == chan->chan)
+						break;
+					bias = NULL;
+				}
 			}
-		}
 
-		if (bias) {
-			factor *= bias->bias;
-			wpa_printf(MSG_DEBUG,
-				   "ACS:  * channel %d: total interference = %Lg (%f bias)",
-				   chan->chan, factor, bias->bias);
-		} else {
-			wpa_printf(MSG_DEBUG,
-				   "ACS:  * channel %d: total interference = %Lg",
-				   chan->chan, factor);
-		}
+			if (bias) {
+				factor *= bias->bias;
+				wpa_printf(MSG_DEBUG,
+					   "ACS:  * channel %d: total interference = %Lg (%f bias)",
+					   chan->chan, factor, bias->bias);
+			} else {
+				wpa_printf(MSG_DEBUG,
+					   "ACS:  * channel %d: total interference = %Lg",
+					   chan->chan, factor);
+			}
 
-		if (acs_usable_chan(chan) &&
-		   (!*ideal_chan || factor < *ideal_factor)) {
-		   	/* reset puncturing bitmap for the previous ideal channel */
-			if (*ideal_chan)
-				(*ideal_chan)->punct_bitmap = 0;
+			if (acs_usable_chan(chan) &&
+			    (!*ideal_chan || factor < *ideal_factor)) {
+				/* reset puncturing bitmap for
+				 * the previous ideal channel
+				 */
+				if (*ideal_chan)
+					(*ideal_chan)->punct_bitmap = 0;
 
-			*ideal_factor = factor;
-			*ideal_chan = chan;
+				*ideal_factor = factor;
+				*ideal_chan = chan;
 #ifdef CONFIG_IEEE80211BE
-			if (iface->conf->ieee80211be)
-				acs_update_puncturing_bitmap(iface, mode, bw,
-							     n_chans, chan,
-							     factor, 0);
+				if (iface->conf->ieee80211be)
+					acs_update_puncturing_bitmap(iface, mode, bw,
+								     n_chans, chan,
+								     factor, 0);
 #endif /* CONFIG_IEEE80211BE */
+			}
 		}
-
+		if (!start_freq_list)
+			os_free(start_freq_list);
 		/* This channel would at least be usable */
 		if (!(*rand_chan))
 			*rand_chan = chan;
@@ -919,8 +975,9 @@ acs_find_ideal_chan_mode(struct hostapd_
 {
 	struct hostapd_channel_data *chan, *adj_chan = NULL, *best;
 	long double factor;
-	int i, j;
+	int i, j, start_freq = 0, freq_match_size = 0;
 	unsigned int k;
+	int *start_freq_list = NULL;
 
 	for (i = 0; i < mode->num_channels; i++) {
 		double total_weight;
@@ -969,9 +1026,9 @@ acs_find_ideal_chan_mode(struct hostapd_
 		/* HT40 on 5 GHz has a limited set of primary channels as per
 		 * 11n Annex J */
 		if (mode->mode == HOSTAPD_MODE_IEEE80211A &&
-		    ((iface->conf->ieee80211n &&
-		      iface->conf->secondary_channel) ||
-		     is_6ghz_freq(chan->freq)) &&
+		    ((iface->conf->secondary_channel) &&
+		     (iface->conf->ieee80211n ||
+		     is_6ghz_freq(chan->freq))) &&
 		    !acs_usable_bw_chan(chan, ACS_BW40)) {
 			wpa_printf(MSG_DEBUG,
 				   "ACS: Channel %d: not allowed as primary channel for 40 MHz bandwidth",
@@ -1012,143 +1069,157 @@ acs_find_ideal_chan_mode(struct hostapd_
 			}
 		}
 
-		factor = 0;
-		if (acs_usable_chan(chan))
-			factor = chan->interference_factor;
-		total_weight = 1;
-
-		/* 5GHz is supported for 240Mhz and so reducing number of channels*/
-		if(!is_6ghz_op_class(iface->conf->op_class) &&
-		   hostapd_get_oper_chwidth(iface->conf) == CONF_OPER_CHWIDTH_320MHZ)
-			n_chans = n_chans - 4;
-
-		for (j = 1; j < n_chans; j++) {
-			adj_chan = acs_find_chan(iface, chan->freq + (j * 20));
-			if (!adj_chan)
-				break;
+		start_freq_list =  acs_get_bw_start_chan(bw, chan->freq,
+							 &freq_match_size);
+		for (int i = 0; i < freq_match_size; i++) {
+			factor = 0;
+			if (acs_usable_chan(chan))
+				factor = chan->interference_factor;
+			total_weight = 1;
+
+			/* 5GHz is supported for 240Mhz and
+			 * so reducing number of channels
+			 */
+			if (!is_6ghz_op_class(iface->conf->op_class) &&
+			    hostapd_get_oper_chwidth(iface->conf) ==
+			    CONF_OPER_CHWIDTH_320MHZ)
+				n_chans = n_chans - 4;
 
-			if (!chan_bw_allowed(adj_chan, bw, 1, 0)) {
-				wpa_printf(MSG_DEBUG,
-					   "ACS: PRI Channel %d: secondary channel %d BW %u is not supported",
-					   chan->chan, adj_chan->chan, bw);
-				break;
-			}
+			start_freq = start_freq_list[i];
+			for (j = 0; j < n_chans; j++) {
+				adj_chan = acs_find_chan(iface, start_freq + (j * 20));
+				if (!adj_chan)
+					break;
 
-			if (acs_usable_chan(adj_chan)) {
-				factor += adj_chan->interference_factor;
-				total_weight += 1;
-			} else {
-				update_best = false;
-			}
+				if (!chan_bw_allowed(adj_chan, bw, 1, 0)) {
+					wpa_printf(MSG_DEBUG,
+						   "ACS: PRI Channel %d: secondary channel %d BW %u is not supported",
+						   chan->chan, adj_chan->chan, bw);
+					break;
+				}
 
-			/* find the best channel in this segment */
-			if (update_best &&
-			    adj_chan->interference_factor <
-			    best->interference_factor)
-				best = adj_chan;
-		}
+				if (acs_usable_chan(adj_chan)) {
+					factor += adj_chan->interference_factor;
+					total_weight += 1;
+				} else {
+					update_best = false;
+				}
 
-		if (j != n_chans) {
-			wpa_printf(MSG_DEBUG, "ACS: Channel %d: not enough bandwidth",
-				   chan->chan);
-			continue;
-		}
+				/* find the best channel in this segment */
+				if (update_best &&
+				    adj_chan->interference_factor <
+				    best->interference_factor)
+					best = adj_chan;
+			}
 
-		/* If the AP is in the 5 GHz or 6 GHz band, lets prefer a less
-		 * crowded primary channel if one was found in the segment */
-		if (iface->current_mode->mode == HOSTAPD_MODE_IEEE80211A &&
-		    chan != best) {
-			wpa_printf(MSG_DEBUG,
-				   "ACS: promoting channel %d over %d (less interference %Lg/%Lg)",
-				   best->chan, chan->chan,
-				   chan->interference_factor,
-				   best->interference_factor);
-			chan = best;
-		}
+			if (j != n_chans) {
+				wpa_printf(MSG_DEBUG,
+					   "ACS: Channel %d: not enough bandwidth",
+					   chan->chan);
+				continue;
+			}
 
-		/* 2.4 GHz has overlapping 20 MHz channels. Include adjacent
-		 * channel interference factor. */
-		if (is_24ghz_mode(mode->mode)) {
-			for (j = 0; j < n_chans; j++) {
-				adj_chan = acs_find_chan(iface, chan->freq +
-							 (j * 20) - 5);
-				if (adj_chan && acs_usable_chan(adj_chan)) {
-					factor += ACS_ADJ_WEIGHT *
-						adj_chan->interference_factor;
-					total_weight += ACS_ADJ_WEIGHT;
-				}
+			/* If the AP is in the 5 GHz or 6 GHz band, lets prefer a less
+			 * crowded primary channel if one was found in the segment
+			 */
+			if (iface->current_mode->mode == HOSTAPD_MODE_IEEE80211A &&
+			    chan != best) {
+				wpa_printf(MSG_DEBUG,
+					   "ACS: promoting channel %d over %d (less interference %Lg/%Lg)",
+					   best->chan, chan->chan,
+					   chan->interference_factor,
+					   best->interference_factor);
+				chan = best;
+			}
 
-				adj_chan = acs_find_chan(iface, chan->freq +
-							 (j * 20) - 10);
-				if (adj_chan && acs_usable_chan(adj_chan)) {
-					factor += ACS_NEXT_ADJ_WEIGHT *
-						adj_chan->interference_factor;
-					total_weight += ACS_NEXT_ADJ_WEIGHT;
+			/* 2.4 GHz has overlapping 20 MHz channels. Include adjacent
+			 * channel interference factor.
+			 */
+			if (is_24ghz_mode(mode->mode)) {
+				for (j = 0; j < n_chans; j++) {
+					adj_chan = acs_find_chan(iface, chan->freq +
+								 (j * 20) - 5);
+					if (adj_chan && acs_usable_chan(adj_chan)) {
+						factor += ACS_ADJ_WEIGHT *
+							adj_chan->interference_factor;
+						total_weight += ACS_ADJ_WEIGHT;
+					}
+
+					adj_chan = acs_find_chan(iface, chan->freq +
+								 (j * 20) - 10);
+					if (adj_chan && acs_usable_chan(adj_chan)) {
+						factor += ACS_NEXT_ADJ_WEIGHT *
+							adj_chan->interference_factor;
+						total_weight += ACS_NEXT_ADJ_WEIGHT;
+					}
+
+					adj_chan = acs_find_chan(iface, chan->freq +
+								 (j * 20) + 5);
+					if (adj_chan && acs_usable_chan(adj_chan)) {
+						factor += ACS_ADJ_WEIGHT *
+							adj_chan->interference_factor;
+						total_weight += ACS_ADJ_WEIGHT;
+					}
+
+					adj_chan = acs_find_chan(iface, chan->freq +
+								 (j * 20) + 10);
+					if (adj_chan && acs_usable_chan(adj_chan)) {
+						factor += ACS_NEXT_ADJ_WEIGHT *
+							adj_chan->interference_factor;
+						total_weight += ACS_NEXT_ADJ_WEIGHT;
+					}
 				}
+			}
 
-				adj_chan = acs_find_chan(iface, chan->freq +
-							 (j * 20) + 5);
-				if (adj_chan && acs_usable_chan(adj_chan)) {
-					factor += ACS_ADJ_WEIGHT *
-						adj_chan->interference_factor;
-					total_weight += ACS_ADJ_WEIGHT;
-				}
+			factor /= total_weight;
 
-				adj_chan = acs_find_chan(iface, chan->freq +
-							 (j * 20) + 10);
-				if (adj_chan && acs_usable_chan(adj_chan)) {
-					factor += ACS_NEXT_ADJ_WEIGHT *
-						adj_chan->interference_factor;
-					total_weight += ACS_NEXT_ADJ_WEIGHT;
+			bias = NULL;
+			if (iface->conf->acs_chan_bias) {
+				for (k = 0; k < iface->conf->num_acs_chan_bias; k++) {
+					bias = &iface->conf->acs_chan_bias[k];
+					if (bias->channel == chan->chan)
+						break;
+					bias = NULL;
 				}
+			} else if (is_24ghz_mode(mode->mode) &&
+				   is_common_24ghz_chan(chan->chan)) {
+				tmp_bias.channel = chan->chan;
+				tmp_bias.bias = ACS_24GHZ_PREFER_1_6_11;
+				bias = &tmp_bias;
 			}
-		}
-
-		factor /= total_weight;
 
-		bias = NULL;
-		if (iface->conf->acs_chan_bias) {
-			for (k = 0; k < iface->conf->num_acs_chan_bias; k++) {
-				bias = &iface->conf->acs_chan_bias[k];
-				if (bias->channel == chan->chan)
-					break;
-				bias = NULL;
+			if (bias) {
+				factor *= bias->bias;
+				wpa_printf(MSG_DEBUG,
+					   "ACS:  * channel %d: total interference = %Lg (%f bias)",
+					   chan->chan, factor, bias->bias);
+			} else {
+				wpa_printf(MSG_DEBUG,
+					   "ACS:  * channel %d: total interference = %Lg",
+					   chan->chan, factor);
 			}
-		} else if (is_24ghz_mode(mode->mode) &&
-			   is_common_24ghz_chan(chan->chan)) {
-			tmp_bias.channel = chan->chan;
-			tmp_bias.bias = ACS_24GHZ_PREFER_1_6_11;
-			bias = &tmp_bias;
-		}
-
-		if (bias) {
-			factor *= bias->bias;
-			wpa_printf(MSG_DEBUG,
-				   "ACS:  * channel %d: total interference = %Lg (%f bias)",
-				   chan->chan, factor, bias->bias);
-		} else {
-			wpa_printf(MSG_DEBUG,
-				   "ACS:  * channel %d: total interference = %Lg",
-				   chan->chan, factor);
-		}
 
-		if (acs_usable_chan(chan) &&
-		    (!*ideal_chan || factor < *ideal_factor)) {
-			/* Reset puncturing bitmap for the previous ideal
-			 * channel */
-			if (*ideal_chan)
-				(*ideal_chan)->punct_bitmap = 0;
+			if (acs_usable_chan(chan) &&
+			    (!*ideal_chan || factor < *ideal_factor)) {
+				/* Reset puncturing bitmap for the previous ideal
+				 * channel
+				 */
+				if (*ideal_chan)
+					(*ideal_chan)->punct_bitmap = 0;
 
-			*ideal_factor = factor;
-			*ideal_chan = chan;
+				*ideal_factor = factor;
+				*ideal_chan = chan;
 
 #ifdef CONFIG_IEEE80211BE
-			if (iface->conf->ieee80211be)
-				acs_update_puncturing_bitmap(iface, mode, bw,
-							     n_chans, chan,
-							     factor, 0);
+				if (iface->conf->ieee80211be)
+					acs_update_puncturing_bitmap(iface, mode, bw,
+								     n_chans, chan,
+								     factor, 0);
 #endif /* CONFIG_IEEE80211BE */
+			}
 		}
+		if (!start_freq_list)
+			os_free(start_freq_list);
 
 		/* This channel would at least be usable */
 		if (!(*rand_chan))
@@ -1464,10 +1535,10 @@ static int * acs_request_scan_add_freqs(
 		if ((chan->flag & HOSTAPD_CHAN_INDOOR_ONLY) &&
 		    iface->conf->country[2] == 0x4f)
 			continue;
-  
-  		if (is_6ghz_freq(chan->freq) &&
-		     iface->conf->acs_exclude_6ghz_non_psc &&
-		     !is_6ghz_psc_frequency(chan->freq))
+
+		if (is_6ghz_freq(chan->freq) &&
+		    iface->conf->acs_exclude_6ghz_non_psc &&
+		    !is_6ghz_psc_frequency(chan->freq))
 			continue;
 
 		*freq++ = chan->freq;
