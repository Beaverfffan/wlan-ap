From c9f5d66d00f4d5b71807472933ae1937fc6a2e1d Mon Sep 17 00:00:00 2001
From: Mohan Kumar G <quic_mkumarg@quicinc.com>
Date: Thu, 30 May 2024 15:04:21 +0530
Subject: [PATCH] hostapd: Use BSS specific WMM parameters

Currently the WMM parameters (hostapd_wmm_ac_params) is common for
all BSSes. Hence if any of the BSS WMM parameters is changed, it is
getting changed for all the other BSSes also.

By default WMM parameter is initialized as an interface config and is
shared by all BSSes in the interface. When WMM parameter of specific
BSS is changed via hostapd_cli command, it is updated in the
interface config and gets changed for all other BSSes.

Hence, initialize a WMM parameter in the BSS config and whenever BSS
specific change is applied, update in this BSS parameter instead of
interface parameter. Also use wmm_override flag to override any
interface specific WMM parameter with BSS specific one if BSS is
specified.

When changing WMM parameter, MU EDCA gets updated for all BSSes.
Change MU EDCA to update only for the BSSes where WMM change in
applied.

ToDo: Add MU EDCA IE for non-Tx BSS in MBSSID profile in
hostapd_eid_mbssid_elem() function.

Patch-depdendency: none

Co-developed-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Signed-off-by: Mohan Kumar G <quic_mkumarg@quicinc.com>
---
 hostapd/ctrl_iface.c   | 31 +++++++++++++++----------------
 src/ap/ap_config.c     | 35 +++++++++++++++++++++++++++++++++++
 src/ap/ap_config.h     |  3 +++
 src/ap/drv_callbacks.c |  4 ----
 src/ap/hostapd.h       |  2 ++
 src/ap/ieee802_11_he.c |  9 ++++++++-
 src/ap/wmm.c           | 18 ++++++++++--------
 7 files changed, 73 insertions(+), 29 deletions(-)

--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -1379,11 +1379,6 @@ static int hostapd_ctrl_iface_set(struct
 		} else if (os_strncmp(cmd, "wme_ac_", 7) == 0 ||
 			   os_strncmp(cmd, "wmm_ac_", 7) == 0) {
 			hapd->parameter_set_count++;
-			 /* Incrementing MU-EDCA Parameter Set Update Count*/
-			 hapd->iface->conf->he_mu_edca.he_qos_info =
-			  (hapd->iface->conf->he_mu_edca.he_qos_info & 0xf0) |
-			  ((hapd->iface->conf->he_mu_edca.he_qos_info + 1) &
-			   0xf);
 			if (ieee802_11_update_beacons(hapd->iface))
 				wpa_printf(MSG_DEBUG,
 					   "Failed to update beacons with WMM parameters");
@@ -3147,6 +3142,9 @@ static int hostapd_ctrl_iface_wmm_param(
 	bool changed = false;
 	struct hostapd_data *tx_hapd = hostapd_mbssid_get_tx_bss(hapd);
 
+	hapd->conf->wmm_override = true;
+	struct hostapd_wmm_ac_params *wmm_ac_params = hapd->conf->wmm_ac_params;
+
 	if (os_strncmp(buf, "ac=", 3) == 0) {
 		tmp = buf + 3;
 		if (os_strncmp(tmp, "be", 2) == 0) {
@@ -3174,8 +3172,8 @@ static int hostapd_ctrl_iface_wmm_param(
 			wpa_printf(MSG_ERROR,
 					"CTRL: AIFS expects wmevalue (0-15)");
 			goto fail;
-		} else if (hapd->iconf->wmm_ac_params[ac].aifs != wmevalue) {
-			hapd->iconf->wmm_ac_params[ac].aifs = wmevalue;
+		} else if (wmm_ac_params[ac].aifs != wmevalue) {
+			wmm_ac_params[ac].aifs = wmevalue;
 			changed = true;
 		}
 	}
@@ -3192,8 +3190,8 @@ static int hostapd_ctrl_iface_wmm_param(
 			wpa_printf(MSG_ERROR,
 					"CTRL: CWMIN can't be greater than CWMAX.");
 			goto fail;
-		} else if (hapd->iconf->wmm_ac_params[ac].cwmin != wmevalue) {
-			hapd->iconf->wmm_ac_params[ac].cwmin = wmevalue;
+		} else if (wmm_ac_params[ac].cwmin != wmevalue) {
+			wmm_ac_params[ac].cwmin = wmevalue;
 			changed = true;
 		}
 	}
@@ -3206,12 +3204,12 @@ static int hostapd_ctrl_iface_wmm_param(
 			wpa_printf(MSG_ERROR,
 					"CTRL: CWMAX expects wmevalue (0-15)");
 			goto fail;
-		} else if (wmevalue < hapd->iconf->wmm_ac_params[ac].cwmin) {
+		} else if (wmevalue < wmm_ac_params[ac].cwmin) {
 			wpa_printf(MSG_ERROR,
 					"CTRL: CWMAX can't be lesser than CWMIN.");
 			goto fail;
-		} else if (hapd->iconf->wmm_ac_params[ac].cwmax != wmevalue) {
-			hapd->iconf->wmm_ac_params[ac].cwmax = wmevalue;
+		} else if (wmm_ac_params[ac].cwmax != wmevalue) {
+			wmm_ac_params[ac].cwmax = wmevalue;
 			changed = true;
 		}
 	}
@@ -3224,8 +3222,8 @@ static int hostapd_ctrl_iface_wmm_param(
 			wpa_printf(MSG_ERROR,
 					"CTRL: TXOP expects wmevalue (0-8192 in units of 32 microseconds)");
 			goto fail;
-		} else if (hapd->iconf->wmm_ac_params[ac].txop_limit != wmevalue) {
-			hapd->iconf->wmm_ac_params[ac].txop_limit = wmevalue;
+		} else if (wmm_ac_params[ac].txop_limit != wmevalue) {
+			wmm_ac_params[ac].txop_limit = wmevalue;
 			changed = true;
 		}
 	}
@@ -3238,8 +3236,8 @@ static int hostapd_ctrl_iface_wmm_param(
 			wpa_printf(MSG_ERROR,
 					"CTRL: ACM expects wmevalue (0/1)");
 			goto fail;
-		} else if (hapd->iconf->wmm_ac_params[ac].admission_control_mandatory != wmevalue) {
-			hapd->iconf->wmm_ac_params[ac].admission_control_mandatory = wmevalue;
+		} else if (wmm_ac_params[ac].admission_control_mandatory != wmevalue) {
+			wmm_ac_params[ac].admission_control_mandatory = wmevalue;
 			changed = true;
 		}
 	}
@@ -3248,6 +3246,7 @@ static int hostapd_ctrl_iface_wmm_param(
 		ieee802_11_set_beacon(tx_hapd);
 	return 0;
 fail:
+	hapd->conf->wmm_override = false;
 	return -1;
 }
 
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -172,6 +172,26 @@ void hostapd_config_defaults_bss(struct
 	bss->pasn_noauth = 1;
 #endif /* CONFIG_PASN */
 	bss->force_disable_in_band_discovery = 1;
+	bss->wmm_override = false;
+#define ecw2cw(ecw) ((1 << (ecw)) - 1)
+	const int aCWmin = 4, aCWmax = 10;
+	const struct hostapd_wmm_ac_params ac_bk = {
+		aCWmin, aCWmax, 7, 0, 0
+	}; /* background traffic */
+	const struct hostapd_wmm_ac_params ac_be = {
+		aCWmin, aCWmax, 3, 0, 0
+	}; /* best effort traffic */
+	const struct hostapd_wmm_ac_params ac_vi = {
+		aCWmin - 1, aCWmin, 2, 3008 / 32, 0
+	}; /* video traffic */
+	const struct hostapd_wmm_ac_params ac_vo = {
+		aCWmin - 2, aCWmin - 1, 2, 1504 / 32, 0
+	}; /* voice traffic */
+#undef ecw2cw
+	bss->wmm_ac_params[0] = ac_be;
+	bss->wmm_ac_params[1] = ac_bk;
+	bss->wmm_ac_params[2] = ac_vi;
+	bss->wmm_ac_params[3] = ac_vo;
 }
 
 
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -973,6 +973,9 @@ struct hostapd_bss_config {
 	 */
 	bool force_disable_in_band_discovery;
 	enum qca_wlan_intf_offload_type ppe_vp_type;
+
+	bool wmm_override;
+	struct hostapd_wmm_ac_params wmm_ac_params[4];
 };
 
 /**
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -2034,7 +2034,6 @@ static void hostapd_event_update_muedca_
 					       struct update_muedca *params)
 {
 	int i;
-	u8 updated_count;
 
 	/* Update current MU-EDCA parameters */
 	for (i = 0; i < 3; i++) {
@@ -2052,9 +2051,6 @@ static void hostapd_event_update_muedca_
 	 * if any STA is connected
 	 */
 	if (hapd->num_sta) {
-		updated_count = (hapd->iface->conf->he_mu_edca.he_qos_info + 1) & 0xf;
-		hapd->iface->conf->he_mu_edca.he_qos_info &= 0xf0;
-		hapd->iface->conf->he_mu_edca.he_qos_info |= updated_count;
 		hapd->parameter_set_count++;
 	}
 
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -546,6 +546,8 @@ struct hostapd_data {
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_IEEE80211BE */
 	bool disable_cu;
+
+	struct hostapd_wmm_ac_params prev_wmm[4];
 };
 
 
--- a/src/ap/ieee802_11_he.c
+++ b/src/ap/ieee802_11_he.c
@@ -322,7 +322,7 @@ u8 * hostapd_eid_he_mu_edca_parameter_se
 {
 	struct ieee80211_he_mu_edca_parameter_set *edca;
 	struct hostapd_wmm_ac_params wmmp[WMM_AC_NUM];
-	u8 *pos;
+	u8 *pos, updated_count;
 	size_t i;
 
 	 /* Updating WME Parameter Set Count to avoid mismatch */
@@ -347,6 +347,13 @@ u8 * hostapd_eid_he_mu_edca_parameter_se
 	edca = (struct ieee80211_he_mu_edca_parameter_set *) pos;
 	os_memcpy(edca, &hapd->iface->conf->he_mu_edca, sizeof(*edca));
 
+	updated_count = edca->he_qos_info & 0xf;
+	if (updated_count != (hapd->parameter_set_count & 0xf)) {
+		updated_count = hapd->parameter_set_count & 0xf;
+		edca->he_qos_info &= 0xf0;
+		edca->he_qos_info |= updated_count;
+	}
+
 	wpa_hexdump(MSG_DEBUG, "HE: MU EDCA Parameter Set element",
 		    pos, sizeof(*edca));
 
--- a/src/ap/wmm.c
+++ b/src/ap/wmm.c
@@ -73,8 +73,14 @@ void wmm_calc_regulatory_limit(struct ho
 {
 	struct hostapd_hw_modes *mode = hapd->iface->current_mode;
 	int c;
+	struct hostapd_wmm_ac_params *wmm_ac_params = hapd->iconf->wmm_ac_params;
+	struct hostapd_wmm_ac_params *prev_wmm = hapd->iface->prev_wmm;
 
-	os_memcpy(acp, hapd->iconf->wmm_ac_params,
+	if (hapd->conf->wmm_override) {
+		wmm_ac_params = hapd->conf->wmm_ac_params;
+		prev_wmm = hapd->prev_wmm;
+	}
+	os_memcpy(acp, wmm_ac_params,
 		  sizeof(hapd->iconf->wmm_ac_params));
 
 	for (c = 0; mode && c < mode->num_channels; c++) {
@@ -84,7 +90,7 @@ void wmm_calc_regulatory_limit(struct ho
 			continue;
 
 		if (chan->wmm_rules_valid)
-			wmm_set_regulatory_limit(hapd->iconf->wmm_ac_params,
+			wmm_set_regulatory_limit(wmm_ac_params,
 						 acp, chan->wmm_rules);
 		break;
 	}
@@ -93,15 +99,11 @@ void wmm_calc_regulatory_limit(struct ho
 	 * Check if we need to update set count. Since both were initialized to
 	 * zero we can compare the whole array in one shot.
 	 */
-	if (os_memcmp(acp, hapd->iface->prev_wmm,
+	if (os_memcmp(acp, prev_wmm,
 		      sizeof(hapd->iconf->wmm_ac_params)) != 0) {
-		os_memcpy(hapd->iface->prev_wmm, acp,
+		os_memcpy(prev_wmm, acp,
 			  sizeof(hapd->iconf->wmm_ac_params));
 		hapd->parameter_set_count++;
-		 /* Incrementing MU-EDCA Parameter Set Update Count*/
-		  hapd->iface->conf->he_mu_edca.he_qos_info =
-		  (hapd->iface->conf->he_mu_edca.he_qos_info & 0xf0) |
-		  ((hapd->iface->conf->he_mu_edca.he_qos_info + 1) & 0xf);
 	}
 }
 
