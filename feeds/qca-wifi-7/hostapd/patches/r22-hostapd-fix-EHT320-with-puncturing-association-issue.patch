From 4f11f80f8e8f693694190dcfa744e08afc9eb6ec Mon Sep 17 00:00:00 2001
From: Ajith C <quic_ajithc@quicinc.com>
Date: Thu, 14 Mar 2024 15:19:01 +0530
Subject: [PATCH] hostapd: Fix association issue with EHT320 and puncturing
 bitmap

Currently some specific STAs fails to associate with AP running
on 5 GHz band, EHT320 htmode and having RU puncturing bitmap

This is because, EHT Operation Disabled Subchannel Bitmap is
Present in EHT operation IE of association response

Fix this issue by stop sending EHT Operation Disabled Subchannel
Bitmap in EHT operation IE of association response if AP is configured
for 5 GHz band, puncturing bitmap is present, and operating bandwidth
is 320, also bandwidth is set to 160 in EHT operation information
of association response

Signed-off-by: Mohan Kumar G <quic_mkumarg@quicinc.com>
Signed-off-by: Ajith C <quic_ajithc@quicinc.com>
---
 src/ap/ieee802_11_eht.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

--- a/src/ap/ieee802_11_eht.c
+++ b/src/ap/ieee802_11_eht.c
@@ -227,6 +227,8 @@ u8 * hostapd_eid_eht_operation(struct ho
 	struct ieee80211_eht_operation *oper;
 	u8 *pos = eid, seg0 = 0, seg1 = 0, *length_pos;
 	enum oper_chan_width chwidth;
+	u16 new_punct_bitmap = hapd->iconf->ru_punct_bitmap ? hapd->iconf->ru_punct_bitmap :
+							      hapd->iconf->punct_bitmap;
 
 	mode = hapd->iface->current_mode;
 	if (!mode)
@@ -285,6 +287,7 @@ u8 * hostapd_eid_eht_operation(struct ho
 
 	if (hapd->iconf->ru_punct_bitmap && !hapd->iface->ru_punct_supp_bw) {
 		hapd->iconf->ru_punct_bitmap = 0;
+		new_punct_bitmap = 0;
 		wpa_printf(MSG_ERROR,
 			   "Driver does not support RU puncturing. Setting bitmap to 0");
 	}
@@ -293,6 +296,14 @@ u8 * hostapd_eid_eht_operation(struct ho
 	if (!seg0)
 		seg0 = hapd->iconf->channel;
 
+	if (is_5ghz_freq(mode->channels->freq) && (chwidth == CONF_OPER_CHWIDTH_320MHZ)) {
+		chwidth = CONF_OPER_CHWIDTH_160MHZ;
+		/* The bitmap validation is already done.
+		 * This will be 5 GHz 240 MHz.
+		 */
+		new_punct_bitmap &= 0xFF;
+		seg0 -= 16;
+	}
 	switch (chwidth) {
 	case CONF_OPER_CHWIDTH_320MHZ:
 		oper->oper_info.control |= EHT_OPER_CHANNEL_WIDTH_320MHZ;
@@ -313,9 +324,9 @@ u8 * hostapd_eid_eht_operation(struct ho
 				oper->oper_info.ccfs0 = oper->oper_info.ccfs1 + 8;
 		}
 
-		if (hapd->iconf->ru_punct_bitmap &&
-		    hapd->iface->ru_punct_supp_bw == CONF_OPER_CHWIDTH_320MHZ) {
+		if (new_punct_bitmap && hapd->iface->ru_punct_supp_bw == CONF_OPER_CHWIDTH_320MHZ) {
 			hapd->iconf->ru_punct_bitmap = 0;
+			new_punct_bitmap = 0;
 			wpa_printf(MSG_ERROR,
 				   "Driver does not support RU puncturing for bandwidths less than 320 MHz. Setting bitmap to 0");
 		}
@@ -330,6 +341,7 @@ u8 * hostapd_eid_eht_operation(struct ho
 		break;
 	case CONF_OPER_CHWIDTH_USE_HT:
 		hapd->iconf->ru_punct_bitmap = 0;
+		new_punct_bitmap = 0;
 		if ((is_6ghz_op_class(hapd->iconf->op_class) &&
 		    op_class_to_bandwidth(hapd->iconf->op_class) == 40) ||
 		    hapd->iconf->secondary_channel)
@@ -340,26 +352,20 @@ u8 * hostapd_eid_eht_operation(struct ho
 		break;
 	default:
 		hapd->iconf->ru_punct_bitmap = 0;
+		new_punct_bitmap = 0;
 		oper->oper_info.control |= EHT_OPER_CHANNEL_WIDTH_20MHZ;
 		break;
 	}
 
 	oper->oper_info.ccfs0 = seg0;
 	oper->oper_info.ccfs1 = seg1;
-
-	if (hapd->iconf->punct_bitmap) {
-		oper->oper_params |= EHT_OPER_DISABLED_SUBCHAN_BITMAP_PRESENT;
-		oper->oper_info.disabled_chan_bitmap =
-			host_to_le16(hapd->iconf->punct_bitmap);
-	}
-
 	pos += 3;
 
 exit:
 
-	if (hapd->iconf->ru_punct_bitmap) {
+	if (new_punct_bitmap) {
 		oper->oper_params |= EHT_OPER_DISABLED_SUBCHAN_BITMAP_PRESENT;
-		oper->oper_info.disabled_chan_bitmap = host_to_le16(hapd->iconf->ru_punct_bitmap);
+		oper->oper_info.disabled_chan_bitmap = host_to_le16(new_punct_bitmap);
 		pos += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
 	}
 
