From 3e796b298a31f89bbeeb7889f438409ed5eacbcf Mon Sep 17 00:00:00 2001
From: Jouni Malinen <quic_jouni@quicinc.com>
Date: Tue, 14 May 2024 11:20:16 +0530
Subject: [PATCH] AP MLD: Add MLO Link KDE for each affiliated link in
 EAPOL-Key 3/4

Previously, MLO Link KDE was added only for each link that was
negotiated for the ML association. However, IEEE Std 802.11be/D5.0,
12.7.6.1 defines the MLO Link KDE to be included "for each affiliated
AP" which is not constrained by what the non-AP MLD might have requested
or what the negotiation outcome for this particular ML association is.

Signed-off-by: Jouni Malinen <quic_jouni@quicinc.com>
Signed-off-by: Ajith C <quic_ajithc@quicinc.com>
---
 src/ap/wpa_auth.c | 6 ------
 1 file changed, 6 deletions(-)

--- a/src/ap/wpa_auth.c
+++ b/src/ap/wpa_auth.c
@@ -121,7 +121,9 @@ void wpa_release_link_auth_ref(struct wp
 }
 
 struct wpa_get_link_auth_ctx {
-	u8 *addr;
+	const u8 *addr;
+	const u8 *mld_addr;
+	int link_id;
 	struct wpa_authenticator *wpa_auth;
 };
 
@@ -129,10 +131,34 @@ static int wpa_get_link_sta_auth(struct
 {
 	struct wpa_get_link_auth_ctx *ctx = data;
 
-	if (os_memcmp(wpa_auth->addr, ctx->addr, ETH_ALEN) != 0)
+	if (!wpa_auth->is_ml)
 		return 0;
-	ctx->wpa_auth = wpa_auth;
-	return 1;
+
+	if (ctx->mld_addr &&
+	    (os_memcmp(wpa_auth->mld_addr, ctx->mld_addr, ETH_ALEN) != 0))
+		return 0;
+
+	if ((ctx->addr && (os_memcmp(wpa_auth->addr, ctx->addr, ETH_ALEN) == 0)) ||
+	    (ctx->link_id > -1 && wpa_auth->is_ml &&
+	     wpa_auth->link_id == ctx->link_id)) {
+		ctx->wpa_auth = wpa_auth;
+		return 1;
+
+	}
+	return 0;
+}
+
+static struct wpa_authenticator *
+wpa_get_link_auth(struct wpa_authenticator *wpa_auth, int link_id)
+{
+	struct wpa_get_link_auth_ctx ctx;
+
+	ctx.addr = NULL;
+	ctx.mld_addr = wpa_auth->mld_addr;
+	ctx.link_id = link_id;
+	ctx.wpa_auth = NULL;
+	wpa_auth_for_each_auth(wpa_auth, wpa_get_link_sta_auth, &ctx);
+	return ctx.wpa_auth;
 }
 
 static int wpa_get_primary_wpa_auth_cb(struct wpa_authenticator *wpa_auth, void *data)
@@ -4186,16 +4212,26 @@ static size_t wpa_auth_ml_kdes_len(struc
 
 	/* MLO Link KDE for each link */
 	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
-		if (!sm->mld_links[link_id].valid)
+		struct wpa_authenticator *wpa_auth;
+		const u8 *ie;
+
+		wpa_auth = wpa_get_link_auth(sm->wpa_auth, link_id);
+		if (!wpa_auth)
 			continue;
 
 #ifdef CONFIG_IEEE80211R_AP
 		if (wpa_key_mgmt_ft(sm->wpa_key_mgmt))
 			kde_len += 2 + PMKID_LEN; /* PMKR1Name into RSN IE */
 #endif
-		kde_len += 2 + RSN_SELECTOR_LEN + 1 + ETH_ALEN +
-			sm->mld_links[link_id].rsne_len +
-			sm->mld_links[link_id].rsnxe_len;
+		kde_len += 2 + RSN_SELECTOR_LEN + 1 + ETH_ALEN;
+		ie = get_ie(wpa_auth->wpa_ie, wpa_auth->wpa_ie_len,
+			    WLAN_EID_RSN);
+		if (ie)
+			kde_len += 2 + ie[1];
+		ie = get_ie(wpa_auth->wpa_ie, wpa_auth->wpa_ie_len,
+			    WLAN_EID_RSNX);
+		if (ie)
+			kde_len += 2 + ie[1];
 	}
 
 	kde_len += wpa_auth_ml_group_kdes_len(sm);
@@ -4204,12 +4240,14 @@ static size_t wpa_auth_ml_kdes_len(struc
 	return kde_len;
 }
 
-
 static u8 * wpa_auth_ml_kdes(struct wpa_state_machine *sm, u8 *pos)
 {
 #ifdef CONFIG_IEEE80211BE
 	u8 link_id;
-	u8 *start = pos, *len_pos;
+	u8 *start = pos;
+#ifdef CONFIG_IEEE80211R_AP
+	u8 *len_pos;
+#endif
 
 	if (sm->mld_assoc_link_id < 0)
 		return pos;
@@ -4219,42 +4257,56 @@ static u8 * wpa_auth_ml_kdes(struct wpa_
 			  sm->own_mld_addr, ETH_ALEN, NULL, 0);
 
 	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+		struct wpa_authenticator *wpa_auth;
+		const u8 *rsne, *rsnxe;
+		size_t rsne_len, rsnxe_len;
+#ifdef CONFIG_IEEE80211R_AP
 		u8 *rsne_start;
+#endif
 
-		if (!sm->mld_links[link_id].valid)
+		wpa_auth = wpa_get_link_auth(sm->wpa_auth, link_id);
+		if (!wpa_auth)
 			continue;
 
+		rsne = get_ie(wpa_auth->wpa_ie, wpa_auth->wpa_ie_len,
+			     WLAN_EID_RSN);
+		rsne_len = rsne ? 2 + rsne[1] : 0;
+
+		rsnxe = get_ie(wpa_auth->wpa_ie, wpa_auth->wpa_ie_len,
+			       WLAN_EID_RSNX);
+		rsnxe_len = rsnxe ? 2 + rsnxe[1] : 0;
 		wpa_printf(MSG_DEBUG,
 			   "RSN: MLO Link: link=%u, len=%zu", link_id,
 			   RSN_SELECTOR_LEN + 1 + ETH_ALEN +
-			   sm->mld_links[link_id].rsne_len +
-			   sm->mld_links[link_id].rsnxe_len);
+			   rsne_len + rsnxe_len);
 
 		*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+#ifdef CONFIG_IEEE80211R_AP
 		len_pos = pos;
+#endif
 		*pos++ = RSN_SELECTOR_LEN + 1 + ETH_ALEN +
-			sm->mld_links[link_id].rsne_len +
-			sm->mld_links[link_id].rsnxe_len;
+			rsne_len + rsnxe_len;
 
 		RSN_SELECTOR_PUT(pos, RSN_KEY_DATA_MLO_LINK);
 		pos += RSN_SELECTOR_LEN;
 
 		/* Add the Link Information */
 		*pos = link_id;
-		if (sm->mld_links[link_id].rsne_len)
+		if (rsne_len)
 			*pos |= RSN_MLO_LINK_KDE_LI_RSNE_INFO;
-		if (sm->mld_links[link_id].rsnxe_len)
+		if (rsnxe_len)
 			*pos |= RSN_MLO_LINK_KDE_LI_RSNXE_INFO;
 
 		pos++;
-		os_memcpy(pos, sm->mld_links[link_id].own_addr, ETH_ALEN);
+		os_memcpy(pos, wpa_auth->addr, ETH_ALEN);
 		pos += ETH_ALEN;
 
+#ifdef CONFIG_IEEE80211R_AP
 		rsne_start = pos;
-		if (sm->mld_links[link_id].rsne_len) {
-			os_memcpy(pos, sm->mld_links[link_id].rsne,
-				  sm->mld_links[link_id].rsne_len);
-			pos += sm->mld_links[link_id].rsne_len;
+#endif
+		if (rsne_len) {
+			os_memcpy(pos, rsne, rsne_len);
+			pos += rsne_len;
 		}
 
 #ifdef CONFIG_IEEE80211R_AP
@@ -4276,10 +4328,9 @@ static u8 * wpa_auth_ml_kdes(struct wpa_
 		}
 #endif /* CONFIG_IEEE80211R_AP */
 
-		if (sm->mld_links[link_id].rsnxe_len) {
-			os_memcpy(pos, sm->mld_links[link_id].rsnxe,
-				  sm->mld_links[link_id].rsnxe_len);
-			pos += sm->mld_links[link_id].rsnxe_len;
+		if (rsnxe_len) {
+			os_memcpy(pos, rsnxe, rsnxe_len);
+			pos += rsnxe_len;
 		}
 	}
 
@@ -4290,7 +4341,6 @@ static u8 * wpa_auth_ml_kdes(struct wpa_
 	return pos;
 }
 
-
 SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 {
 	u8 rsc[WPA_KEY_RSC_LEN], *_rsc, *gtk, *kde = NULL, *pos, stub_gtk[32];
@@ -6970,6 +7020,8 @@ void wpa_auth_set_ml_info(struct wpa_sta
         if (link_id != mld_assoc_link_id) {
                 sm->n_mld_affiliated_links++;
                 ctx.addr = link->local_addr;
+		ctx.mld_addr = NULL;
+		ctx.link_id = -1;
                 ctx.wpa_auth = NULL;
                 wpa_auth_for_each_auth(sm->wpa_auth, wpa_get_link_sta_auth, &ctx);
                 if (ctx.wpa_auth) {
