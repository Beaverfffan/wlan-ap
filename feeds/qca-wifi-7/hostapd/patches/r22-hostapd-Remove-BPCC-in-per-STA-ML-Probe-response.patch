From 32241d12c3956bda3098e5f8dedf1eebf3def2dc Mon Sep 17 00:00:00 2001
From: Mohan Kumar G <quic_mkumarg@quicinc.com>
Date: Mon, 11 Mar 2024 17:34:51 +0530
Subject: [PATCH] hostapd: Remove BPCC in per STA ML Probe response

Currently in ML Probe response, the per-STA Profile STA control
has BPCC present set to true by default for all frames.

As per IEEE P802.11be/D5.0 section 9.4.2.312.2.4, AP sets this field
to 1 in (Re)Association Response frame and sets to 0 in other frames.

Fix this issue by setting the BPCC present flag in STA control
and adding BPCC element in STA Info only for ML Association or
Reassociation response frames.

Signed-off-by: Mohan Kumar G <quic_mkumarg@quicinc.com>
---
 src/ap/beacon.c         | 14 +++++++++-----
 src/ap/ieee802_11.c     |  8 +++++---
 src/ap/ieee802_11.h     |  6 ++++--
 src/ap/ieee802_11_eht.c | 32 ++++++++++++++++++++++----------
 src/ap/wpa_auth_glue.c  |  4 ++--
 5 files changed, 42 insertions(+), 22 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -990,7 +990,8 @@ static u8 * hostapd_gen_probe_resp(struc
 
 		if (hapd_probed != hapd && hapd_probed->conf->mld_ap && ml_probe)
 			buflen += hostapd_eid_eht_basic_ml_len(hapd_probed,
-							       hapd->partner_links, true);
+							       hapd->partner_links, true,
+							       WLAN_FC_STYPE_PROBE_RESP);
 	}
 
 #endif /* CONFIG_IEEE80211BE */
@@ -1166,9 +1167,11 @@ static u8 * hostapd_gen_probe_resp(struc
 		if (hapd->conf->mld_ap) {
 			if (hapd_probed == hapd && ml_probe)
 				pos = hostapd_eid_eht_basic_ml(hapd, pos,
-							       hapd->partner_links, false);
+							       hapd->partner_links, false,
+							       WLAN_FC_STYPE_PROBE_RESP);
 			else
-				pos = hostapd_eid_eht_basic_ml(hapd, pos, NULL, false);
+				pos = hostapd_eid_eht_basic_ml(hapd, pos, NULL, false,
+							       WLAN_FC_STYPE_PROBE_RESP);
 		}
 		pos = hostapd_eid_eht_capab(hapd, pos, IEEE80211_MODE_AP);
 		pos = hostapd_eid_eht_operation(hapd, pos, IEEE80211_MODE_AP);
@@ -1176,7 +1179,8 @@ static u8 * hostapd_gen_probe_resp(struc
 
 		if (hapd_probed != hapd && hapd_probed->conf->mld_ap && ml_probe)
 			pos = hostapd_eid_eht_basic_ml(hapd_probed, pos,
-						       hapd_probed->partner_links, true);
+						       hapd_probed->partner_links, true,
+						       WLAN_FC_STYPE_PROBE_RESP);
 	}
 
 #endif /* CONFIG_IEEE80211BE */
@@ -2469,7 +2473,7 @@ int ieee802_11_build_ap_params(struct ho
 	if (hapd->iconf->ieee80211be && !hapd->conf->disable_11be) {
 		if (hapd->conf->mld_ap)
 			tailpos = hostapd_eid_eht_basic_ml(hapd, tailpos, NULL,
-							   false);
+							   false, WLAN_FC_STYPE_BEACON);
 		tailpos = hostapd_eid_eht_capab(hapd, tailpos,
 						IEEE80211_MODE_AP);
 		startpos = tailpos;
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -5132,7 +5132,8 @@ rsnxe_done:
 #ifdef CONFIG_IEEE80211BE
 	if (hapd->iconf->ieee80211be && !hapd->conf->disable_11be) {
 		if (hapd->conf->mld_ap && sta && sta->mld_info.mld_sta)
-			p = hostapd_eid_eht_basic_ml(hapd, p, sta->mld_info.links, false);
+			p = hostapd_eid_eht_basic_ml(hapd, p, sta->mld_info.links, false,
+						     WLAN_FC_STYPE_ASSOC_RESP);
 		p = hostapd_eid_eht_capab(hapd, p, IEEE80211_MODE_AP);
 		p = hostapd_eid_eht_operation(hapd, p, IEEE80211_MODE_AP);
 		p = hostapd_eid_vendor_240mhz(hapd, p, IEEE80211_MODE_AP);
@@ -8836,7 +8837,8 @@ static size_t hostapd_eid_mbssid_elem_le
 #ifdef CONFIG_IEEE80211BE
 		/* For ML Probe resp, solicited hapd's MLE will be in the frame body */
 		if (bss->conf->mld_ap && (bss != hapd_probed || !ml_probe))
-			nontx_profile_len += hostapd_eid_eht_basic_ml_len(bss, NULL, true);
+			nontx_profile_len += hostapd_eid_eht_basic_ml_len(bss, NULL, true,
+									  frame_type);
 #endif /* CONFIG_IEEE80211BE */
 
 		if (ie_count || ext_ie_count) {
@@ -9021,7 +9023,7 @@ static u8 * hostapd_eid_mbssid_elem(stru
 #ifdef CONFIG_IEEE80211BE
 		/* For ML Probe resp, solicited hapd's MLE will be in the frame body */
 		if (bss->conf->mld_ap && (bss != hapd_probed || !ml_probe))
-			eid = hostapd_eid_eht_basic_ml(bss, eid, NULL, true);
+			eid = hostapd_eid_eht_basic_ml(bss, eid, NULL, true, frame_type);
 #endif /* CONFIG_IEEE80211BE */
 		if (ie_count || ext_ie_count) {
 			*eid++ = WLAN_EID_EXTENSION;
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -102,9 +102,11 @@ void hostapd_get_eht_capab(struct hostap
 			   struct ieee80211_eht_capabilities *dest,
 			   size_t len);
 u8 * hostapd_eid_eht_basic_ml(struct hostapd_data *hapd, u8 *eid,
-			      struct mld_link_info *link_info, bool include_mld_id);
+			      struct mld_link_info *link_info,
+			      bool include_mld_id, u32 type);
 size_t hostapd_eid_eht_basic_ml_len(struct hostapd_data *hapd,
-				    struct mld_link_info *info, bool include_mld_id);
+				    struct mld_link_info *info,
+				    bool include_mld_id, u32 type);
 struct wpabuf * hostapd_ml_auth_resp(struct hostapd_data *hapd);
 const u8 * hostapd_process_ml_auth(struct hostapd_data *hapd,
 				   const struct ieee80211_mgmt *mgmt,
--- a/src/ap/ieee802_11_eht.c
+++ b/src/ap/ieee802_11_eht.c
@@ -594,7 +594,7 @@ void hostapd_get_eht_capab(struct hostap
 */
 #define MLE_COMMON_INFO_LEN 13
 u8 * hostapd_eid_eht_basic_ml(struct hostapd_data *hapd, u8 *eid,
-			      struct mld_link_info *info, bool include_mld_id)
+			      struct mld_link_info *info, bool include_mld_id, u32 type)
 {
 	struct wpabuf *buf;
 	u16 control, mld_cap;
@@ -703,9 +703,13 @@ u8 * hostapd_eid_eht_basic_ml(struct hos
 		/*
 		 * control (2) + station info length (1) + MAC address (6) +
 		 * beacon interval (2) + TSF offset (8) + DTIM info (2) + BSS
-		 * parameters change counter (1) + station profile length.
+		 * parameters change count (0 or 1) + station profile length.
 		 */
-		const size_t fixed_len = 22;
+		size_t fixed_len = 21;
+
+		/* BSS parameters change count (1) for (Re)Assoc response */
+		if (type == WLAN_FC_STYPE_ASSOC_RESP || type == WLAN_FC_STYPE_REASSOC_RESP)
+			fixed_len += 1;
 		size_t total_len = fixed_len + link->resp_sta_profile_len;
 
 		/* Skip the local one */
@@ -733,8 +737,11 @@ u8 * hostapd_eid_eht_basic_ml(struct hos
 			EHT_PER_STA_CTRL_COMPLETE_PROFILE_MSK |
 			EHT_PER_STA_CTRL_TSF_OFFSET_PRESENT_MSK |
 			EHT_PER_STA_CTRL_BEACON_INTERVAL_PRESENT_MSK |
-			EHT_PER_STA_CTRL_DTIM_INFO_PRESENT_MSK |
-			EHT_PER_STA_CTRL_BSS_PARAM_CNT_PRESENT_MSK;
+			EHT_PER_STA_CTRL_DTIM_INFO_PRESENT_MSK;
+
+		/* Set BSS Parameters Change Count present mask for (Re)Assoc response */
+		if (type == WLAN_FC_STYPE_ASSOC_RESP || type == WLAN_FC_STYPE_REASSOC_RESP)
+			control |= EHT_PER_STA_CTRL_BSS_PARAM_CNT_PRESENT_MSK;
 		wpabuf_put_le16(buf, control);
 
 		/* STA Info */
@@ -755,7 +762,8 @@ u8 * hostapd_eid_eht_basic_ml(struct hos
 		wpabuf_put_le16(buf, link_bss->conf->dtim_period);
 
 		/* BSS Parameters Change Count */
-		wpabuf_put_u8(buf, link_bss->rx_cu_param.bpcc);
+		if (type == WLAN_FC_STYPE_ASSOC_RESP || type == WLAN_FC_STYPE_REASSOC_RESP)
+			wpabuf_put_u8(buf, link_bss->rx_cu_param.bpcc);
 
 		/* Fragment the sub element if needed */
 		if (total_len <= 255) {
@@ -786,6 +794,7 @@ u8 * hostapd_eid_eht_basic_ml(struct hos
 			}
 		}
 		/* Dont refer to rejected links info Anymore */
+
 		if (link->status != WLAN_STATUS_SUCCESS)
 			link->valid = false;
 	}
@@ -827,15 +836,14 @@ out:
 	wpabuf_free(buf);
 	return pos;
 }
-#define MLE_STA_INFO_LENGTH 22
+#define MLE_STA_INFO_LENGTH 21
 /*
  * control (2) + station info length (1) + MAC address (6) +
- * beacon interval (2) + TSF offset (8) + DTIM info (2) + BSS
- * parameters change counter (1)
+ * beacon interval (2) + TSF offset (8) + DTIM info (2)
  */
 size_t hostapd_eid_eht_basic_ml_len(struct hostapd_data *hapd,
 				    struct mld_link_info *info,
-				    bool include_mld_id)
+				    bool include_mld_id, u32 type)
 {
 	int link_id;
 	size_t len, num_frags;
@@ -866,6 +874,10 @@ size_t hostapd_eid_eht_basic_ml_len(stru
 
 		size_t sta_prof_len = MLE_STA_INFO_LENGTH + link->resp_sta_profile_len;
 
+		/* Add BSS Parameters Change Count in per STA for (Re)Assoc resp */
+		if (type == WLAN_FC_STYPE_ASSOC_RESP || type == WLAN_FC_STYPE_REASSOC_RESP)
+			sta_prof_len += 1;
+
 		/* Skip the local one */
 		if (link_id == hapd->mld_link_id || !link->valid)
 			continue;
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -1605,7 +1605,7 @@ static u8 *hostapd_wpa_ft_add_bmle(void
 {
 	struct hostapd_data *hapd = ctx;
 
-	return hostapd_eid_eht_basic_ml(hapd, bmle_ie, NULL, true);
+	return hostapd_eid_eht_basic_ml(hapd, bmle_ie, NULL, true, WLAN_FC_STYPE_AUTH);
 }
 
 
@@ -1613,7 +1613,7 @@ static size_t hostapd_wpa_ft_add_bmle_le
 {
 	struct hostapd_data *hapd = ctx;
 
-	return hostapd_eid_eht_basic_ml_len(hapd, NULL, true);
+	return hostapd_eid_eht_basic_ml_len(hapd, NULL, true, WLAN_FC_STYPE_AUTH);
 }
 
 
